
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 06 13:30:56 CEST 2015
//----------------------------------------------------

package sparql;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 06 13:30:56 CEST 2015
  */
public class SparqlCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SparqlCup() {super();}

  /** Constructor which sets the default scanner. */
  public SparqlCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SparqlCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\002\002\004\000\002\214\003\000\002\214" +
    "\002\000\002\215\004\000\002\215\003\000\002\215\003" +
    "\000\002\005\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\010\003\000\002\011\003\000\002" +
    "\011\004\000\002\006\004\000\002\006\004\000\002\007" +
    "\005\000\002\007\004\000\002\007\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\221\002\000" +
    "\002\013\006\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\014" +
    "\005\000\002\213\005\000\002\212\003\000\002\212\004" +
    "\000\002\124\003\000\002\124\007\000\002\213\005\000" +
    "\002\213\004\000\002\213\004\000\002\213\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\004\000\002\125" +
    "\003\000\002\125\002\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\004\000\002\126\003\000" +
    "\002\126\002\000\002\127\003\000\002\127\002\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\005\000\002\130\003" +
    "\000\002\130\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\020\004\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\131\003\000\002\131\002" +
    "\000\002\004\003\000\002\004\002\000\002\222\002\000" +
    "\002\022\005\000\002\022\003\000\002\022\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\003\000\002\223" +
    "\002\000\002\024\006\000\002\224\002\000\002\024\006" +
    "\000\002\225\002\000\002\024\006\000\002\024\004\000" +
    "\002\024\004\000\002\025\003\000\002\025\004\000\002" +
    "\025\003\000\002\003\006\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\132\003\000\002\132\002" +
    "\000\002\203\003\000\002\203\004\000\002\203\005\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\030\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\004\000\002\033\003\000\002\033\007" +
    "\000\002\133\003\000\002\133\002\000\002\134\003\000" +
    "\002\134\002\000\002\135\004\000\002\135\005\000\002" +
    "\135\004\000\002\135\005\000\002\034\003\000\002\034" +
    "\006\000\002\207\004\000\002\207\005\000\002\136\004" +
    "\000\002\137\003\000\002\140\004\000\002\140\005\000" +
    "\002\140\004\000\002\140\005\000\002\035\003\000\002" +
    "\035\003\000\002\036\004\000\002\141\003\000\002\141" +
    "\002\000\002\142\004\000\002\142\005\000\002\142\004" +
    "\000\002\142\005\000\002\037\003\000\002\226\002\000" +
    "\002\202\005\000\002\227\002\000\002\202\005\000\002" +
    "\230\002\000\002\202\005\000\002\231\002\000\002\202" +
    "\005\000\002\202\003\000\002\176\003\000\002\211\003" +
    "\000\002\211\002\000\002\177\005\000\002\200\003\000" +
    "\002\200\002\000\002\201\003\000\002\232\002\000\002" +
    "\201\005\000\002\201\003\000\002\201\004\000\002\206" +
    "\003\000\002\206\003\000\002\206\003\000\002\233\002" +
    "\000\002\234\002\000\002\210\007\000\002\235\002\000" +
    "\002\210\006\000\002\210\004\000\002\146\003\000\002" +
    "\146\002\000\002\147\004\000\002\147\005\000\002\147" +
    "\004\000\002\147\005\000\002\145\004\000\002\143\003" +
    "\000\002\143\003\000\002\040\003\000\002\041\003\000" +
    "\002\042\003\000\002\236\002\000\002\042\005\000\002" +
    "\150\003\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\005\000\002\043\003\000\002\044\003" +
    "\000\002\237\002\000\002\045\005\000\002\151\003\000" +
    "\002\151\002\000\002\152\004\000\002\152\005\000\002" +
    "\152\004\000\002\152\005\000\002\240\002\000\002\046" +
    "\005\000\002\153\003\000\002\153\002\000\002\154\004" +
    "\000\002\154\005\000\002\154\004\000\002\154\005\000" +
    "\002\241\002\000\002\047\005\000\002\155\003\000\002" +
    "\155\002\000\002\050\003\000\002\050\004\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\004\000\002\052\005\000" +
    "\002\053\003\000\002\053\005\000\002\157\004\000\002" +
    "\157\002\000\002\156\003\000\002\156\002\000\002\160" +
    "\004\000\002\160\005\000\002\054\004\000\002\054\004" +
    "\000\002\054\004\000\002\054\004\000\002\054\004\000" +
    "\002\054\004\000\002\055\003\000\002\055\003\000\002" +
    "\056\005\000\002\057\003\000\002\057\003\000\002\060" +
    "\005\000\002\061\005\000\002\161\003\000\002\161\004" +
    "\000\002\062\005\000\002\162\003\000\002\162\004\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\205\003\000\002\205\003\000\002\065" +
    "\003\000\002\065\003\000\002\204\003\000\002\204\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\067\003\000\002\070\004\000\002\163\003\000\002\163" +
    "\002\000\002\164\004\000\002\164\005\000\002\071\004" +
    "\000\002\165\003\000\002\165\002\000\002\166\004\000" +
    "\002\166\005\000\002\166\004\000\002\166\005\000\002" +
    "\072\003\000\002\073\003\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\074\003\000\002\100\003\000\002\100\003\000\002" +
    "\077\003\000\002\077\005\000\002\077\005\000\002\075" +
    "\003\000\002\075\005\000\002\075\005\000\002\075\004" +
    "\000\002\076\003\000\002\076\005\000\002\076\005\000" +
    "\002\101\004\000\002\101\004\000\002\101\004\000\002" +
    "\101\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\103\005\000\002\104\003\000" +
    "\002\104\006\000\002\104\004\000\002\104\012\000\002" +
    "\104\010\000\002\104\010\000\002\104\010\000\002\104" +
    "\006\000\002\104\006\000\002\104\006\000\002\104\006" +
    "\000\002\104\006\000\002\104\003\000\002\105\012\000" +
    "\002\105\010\000\002\106\012\000\002\106\010\000\002" +
    "\107\014\000\002\107\012\000\002\110\007\000\002\110" +
    "\007\000\002\110\007\000\002\110\007\000\002\110\007" +
    "\000\002\110\007\000\002\110\013\000\002\110\007\000" +
    "\002\111\003\000\002\111\004\000\002\242\002\000\002" +
    "\112\005\000\002\243\002\000\002\112\006\000\002\112" +
    "\003\000\002\113\003\000\002\113\003\000\002\113\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\117" +
    "\003\000\002\117\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\121\003\000" +
    "\002\121\003\000\002\122\003\000\002\122\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0203\000\020\002\uffff\003\017\004\015\005\010\006" +
    "\006\023\004\151\022\001\002\000\006\003\u0204\151\022" +
    "\001\002\000\012\002\ufffd\006\006\023\004\151\022\001" +
    "\002\000\016\003\u01fa\017\u01f8\145\u01f6\154\u01f7\237\070" +
    "\240\067\001\002\000\012\002\ufff7\006\ufff7\023\ufff7\151" +
    "\ufff7\001\002\000\006\003\u01f1\234\u01f2\001\002\000\016" +
    "\002\uffe6\003\u01f0\012\043\013\034\015\033\016\036\001" +
    "\002\000\016\002\uffda\003\uffda\012\uffda\013\uffda\015\uffda" +
    "\016\uffda\001\002\000\004\002\000\001\002\000\020\002" +
    "\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\023\ufffa\151\ufffa" +
    "\001\002\000\006\003\u01ed\233\u01ee\001\002\000\020\002" +
    "\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\023\ufff9\151\ufff9" +
    "\001\002\000\020\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\023\ufff8\151\ufff8\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\u01ec\001\002\000\072\003\u0133\006\006\027" +
    "\u012b\044\150\045\164\145\u013d\147\u0131\151\022\152\u013c" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\257\u012e\001" +
    "\002\000\012\002\ufffb\006\ufffb\023\ufffb\151\ufffb\001\002" +
    "\000\012\002\uffe7\003\030\023\004\151\022\001\002\000" +
    "\020\002\ufff6\003\017\004\015\005\010\006\ufff6\023\ufff6" +
    "\151\ufff6\001\002\000\012\002\ufff5\006\ufff5\023\ufff5\151" +
    "\ufff5\001\002\000\016\002\uffed\003\u0123\012\043\013\034" +
    "\015\033\016\036\001\002\000\016\002\uffe8\003\uffec\012" +
    "\uffec\013\uffec\015\uffec\016\uffec\001\002\000\014\003\042" +
    "\012\043\013\034\015\033\016\036\001\002\000\014\002" +
    "\uffd5\003\u0121\015\033\016\036\152\uffd5\001\002\000\014" +
    "\002\uffb6\003\u011e\016\uffb6\152\uffb6\242\uffb8\001\002\000" +
    "\066\014\047\031\045\036\064\037\102\040\046\041\062" +
    "\042\055\043\052\114\056\115\065\116\074\117\107\127" +
    "\054\130\106\131\063\132\112\133\110\135\077\137\051" +
    "\143\101\145\105\233\066\234\111\235\075\237\070\240" +
    "\067\001\002\000\004\002\uffeb\001\002\000\014\002\uffb2" +
    "\003\u011b\015\uffb2\152\uffb2\242\u011a\001\002\000\006\002" +
    "\uffd4\152\uffd4\001\002\000\010\002\uffc0\016\036\152\uffc0" +
    "\001\002\000\010\002\uffbe\015\033\152\uffbe\001\002\000" +
    "\004\013\u0116\001\002\000\072\003\072\013\071\014\047" +
    "\031\045\036\064\037\102\040\046\041\062\042\055\043" +
    "\052\114\056\115\065\116\074\117\107\127\054\130\106" +
    "\131\063\132\112\133\110\135\077\137\051\143\101\145" +
    "\105\233\066\234\111\235\075\237\070\240\067\001\002" +
    "\000\144\002\uff98\003\uff98\014\uff98\015\uff98\016\uff98\031" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\114\uff98\115\uff98\116\uff98\117\uff98\127" +
    "\uff98\130\uff98\131\uff98\132\uff98\133\uff98\135\uff98\137\uff98" +
    "\143\uff98\145\uff98\147\uff98\152\uff98\155\uff98\233\uff98\234" +
    "\uff98\235\uff98\237\uff98\240\uff98\242\uff98\243\uff98\244\uff98" +
    "\245\uff98\246\uff98\247\uff98\250\uff98\251\uff98\252\uff98\253" +
    "\uff98\254\uff98\255\uff98\256\uff98\257\uff98\001\002\000\004" +
    "\145\u0113\001\002\000\004\145\u0110\001\002\000\006\003" +
    "\u010e\145\105\001\002\000\100\002\uffc3\003\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\031\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3" +
    "\127\uffc3\130\uffc3\131\uffc3\132\uffc3\133\uffc3\135\uffc3\137" +
    "\uffc3\143\uffc3\145\uffc3\152\uffc3\233\uffc3\234\uffc3\235\uffc3" +
    "\237\uffc3\240\uffc3\001\002\000\004\145\u0109\001\002\000" +
    "\004\145\u0101\001\002\000\144\002\uff97\003\uff97\014\uff97" +
    "\015\uff97\016\uff97\031\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\114\uff97\115\uff97" +
    "\116\uff97\117\uff97\127\uff97\130\uff97\131\uff97\132\uff97\133" +
    "\uff97\135\uff97\137\uff97\143\uff97\145\uff97\147\uff97\152\uff97" +
    "\155\uff97\233\uff97\234\uff97\235\uff97\237\uff97\240\uff97\242" +
    "\uff97\243\uff97\244\uff97\245\uff97\246\uff97\247\uff97\250\uff97" +
    "\251\uff97\252\uff97\253\uff97\254\uff97\255\uff97\256\uff97\257" +
    "\uff97\001\002\000\004\145\370\001\002\000\004\145\365" +
    "\001\002\000\006\145\203\257\205\001\002\000\100\002" +
    "\uffc4\003\uffc4\014\uffc4\015\uffc4\016\uffc4\031\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\114\uffc4\115" +
    "\uffc4\116\uffc4\117\uffc4\127\uffc4\130\uffc4\131\uffc4\132\uffc4" +
    "\133\uffc4\135\uffc4\137\uffc4\143\uffc4\145\uffc4\152\uffc4\233" +
    "\uffc4\234\uffc4\235\uffc4\237\uffc4\240\uffc4\001\002\000\212" +
    "\002\ufece\003\ufece\014\ufece\015\ufece\016\ufece\031\ufece\036" +
    "\ufece\037\ufece\040\ufece\041\ufece\042\ufece\043\ufece\044\ufece" +
    "\045\ufece\046\ufece\051\ufece\114\ufece\115\ufece\116\ufece\117" +
    "\ufece\127\ufece\130\ufece\131\ufece\132\ufece\133\ufece\135\ufece" +
    "\137\ufece\141\ufece\143\ufece\145\ufece\146\ufece\147\ufece\152" +
    "\ufece\153\ufece\154\ufece\155\ufece\156\ufece\157\ufece\162\ufece" +
    "\164\ufece\165\ufece\166\ufece\167\ufece\170\ufece\171\ufece\172" +
    "\ufece\173\ufece\174\ufece\175\ufece\233\ufece\234\ufece\235\ufece" +
    "\237\ufece\240\ufece\242\ufece\243\ufece\244\ufece\245\ufece\246" +
    "\ufece\247\ufece\250\ufece\251\ufece\252\ufece\253\ufece\254\ufece" +
    "\255\ufece\256\ufece\257\ufece\001\002\000\144\002\uff99\003" +
    "\uff99\014\uff99\015\uff99\016\uff99\031\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\114" +
    "\uff99\115\uff99\116\uff99\117\uff99\127\uff99\130\uff99\131\uff99" +
    "\132\uff99\133\uff99\135\uff99\137\uff99\143\uff99\145\uff99\147" +
    "\uff99\152\uff99\155\uff99\233\uff99\234\uff99\235\uff99\237\uff99" +
    "\240\uff99\242\uff99\243\uff99\244\uff99\245\uff99\246\uff99\247" +
    "\uff99\250\uff99\251\uff99\252\uff99\253\uff99\254\uff99\255\uff99" +
    "\256\uff99\257\uff99\001\002\000\004\145\361\001\002\000" +
    "\004\145\355\001\002\000\004\145\350\001\002\000\004" +
    "\145\341\001\002\000\216\003\ufe9a\027\ufe9a\030\ufe9a\031" +
    "\ufe9a\036\ufe9a\037\ufe9a\040\ufe9a\041\ufe9a\042\ufe9a\043\ufe9a" +
    "\044\ufe9a\045\ufe9a\046\ufe9a\051\ufe9a\114\ufe9a\115\ufe9a\116" +
    "\ufe9a\117\ufe9a\127\ufe9a\130\ufe9a\131\ufe9a\132\ufe9a\133\ufe9a" +
    "\135\ufe9a\137\ufe9a\141\ufe9a\142\ufe9a\145\ufe9a\146\ufe9a\147" +
    "\ufe9a\150\ufe9a\151\ufe9a\152\ufe9a\153\ufe9a\154\ufe9a\155\ufe9a" +
    "\156\ufe9a\157\ufe9a\161\ufe9a\162\ufe9a\163\ufe9a\164\ufe9a\165" +
    "\ufe9a\166\ufe9a\167\ufe9a\170\ufe9a\171\ufe9a\172\ufe9a\173\ufe9a" +
    "\174\ufe9a\175\ufe9a\233\ufe9a\234\ufe9a\235\ufe9a\237\ufe9a\240" +
    "\ufe9a\242\ufe9a\243\ufe9a\244\ufe9a\245\ufe9a\246\ufe9a\247\ufe9a" +
    "\250\ufe9a\251\ufe9a\252\ufe9a\253\ufe9a\254\ufe9a\255\ufe9a\256" +
    "\ufe9a\257\ufe9a\001\002\000\226\002\uff05\003\uff05\014\uff05" +
    "\015\uff05\016\uff05\023\uff05\027\uff05\030\uff05\031\uff05\036" +
    "\uff05\037\uff05\040\uff05\041\uff05\042\uff05\043\uff05\044\uff05" +
    "\045\uff05\046\uff05\051\uff05\114\uff05\115\uff05\116\uff05\117" +
    "\uff05\127\uff05\130\uff05\131\uff05\132\uff05\133\uff05\135\uff05" +
    "\137\uff05\141\uff05\142\uff05\143\uff05\145\uff05\146\uff05\147" +
    "\uff05\150\uff05\151\uff05\152\uff05\153\uff05\154\uff05\155\uff05" +
    "\156\uff05\157\uff05\162\uff05\164\uff05\165\uff05\166\uff05\167" +
    "\uff05\170\uff05\171\uff05\172\uff05\173\uff05\174\uff05\175\uff05" +
    "\233\uff05\234\uff05\235\uff05\237\uff05\240\uff05\242\uff05\243" +
    "\uff05\244\uff05\245\uff05\246\uff05\247\uff05\250\uff05\251\uff05" +
    "\252\uff05\253\uff05\254\uff05\255\uff05\256\uff05\257\uff05\001" +
    "\002\000\226\002\uff06\003\uff06\014\uff06\015\uff06\016\uff06" +
    "\023\uff06\027\uff06\030\uff06\031\uff06\036\uff06\037\uff06\040" +
    "\uff06\041\uff06\042\uff06\043\uff06\044\uff06\045\uff06\046\uff06" +
    "\051\uff06\114\uff06\115\uff06\116\uff06\117\uff06\127\uff06\130" +
    "\uff06\131\uff06\132\uff06\133\uff06\135\uff06\137\uff06\141\uff06" +
    "\142\uff06\143\uff06\145\uff06\146\uff06\147\uff06\150\uff06\151" +
    "\uff06\152\uff06\153\uff06\154\uff06\155\uff06\156\uff06\157\uff06" +
    "\162\uff06\164\uff06\165\uff06\166\uff06\167\uff06\170\uff06\171" +
    "\uff06\172\uff06\173\uff06\174\uff06\175\uff06\233\uff06\234\uff06" +
    "\235\uff06\237\uff06\240\uff06\242\uff06\243\uff06\244\uff06\245" +
    "\uff06\246\uff06\247\uff06\250\uff06\251\uff06\252\uff06\253\uff06" +
    "\254\uff06\255\uff06\256\uff06\257\uff06\001\002\000\070\003" +
    "\337\014\047\031\045\036\064\037\102\040\046\041\062" +
    "\042\055\043\052\114\056\115\065\116\074\117\107\127" +
    "\054\130\106\131\063\132\112\133\110\135\077\137\051" +
    "\143\101\145\105\233\066\234\111\235\075\237\070\240" +
    "\067\001\002\000\014\002\uffcc\003\uffcc\015\uffcc\016\uffcc" +
    "\152\uffcc\001\002\000\006\145\230\257\231\001\002\000" +
    "\004\145\331\001\002\000\216\003\ufe98\027\ufe98\030\ufe98" +
    "\031\ufe98\036\ufe98\037\ufe98\040\ufe98\041\ufe98\042\ufe98\043" +
    "\ufe98\044\ufe98\045\ufe98\046\ufe98\051\ufe98\114\ufe98\115\ufe98" +
    "\116\ufe98\117\ufe98\127\ufe98\130\ufe98\131\ufe98\132\ufe98\133" +
    "\ufe98\135\ufe98\137\ufe98\141\ufe98\142\ufe98\145\ufe98\146\ufe98" +
    "\147\ufe98\150\ufe98\151\ufe98\152\ufe98\153\ufe98\154\ufe98\155" +
    "\ufe98\156\ufe98\157\ufe98\161\ufe98\162\ufe98\163\ufe98\164\ufe98" +
    "\165\ufe98\166\ufe98\167\ufe98\170\ufe98\171\ufe98\172\ufe98\173" +
    "\ufe98\174\ufe98\175\ufe98\233\ufe98\234\ufe98\235\ufe98\237\ufe98" +
    "\240\ufe98\242\ufe98\243\ufe98\244\ufe98\245\ufe98\246\ufe98\247" +
    "\ufe98\250\ufe98\251\ufe98\252\ufe98\253\ufe98\254\ufe98\255\ufe98" +
    "\256\ufe98\257\ufe98\001\002\000\100\002\uffc8\003\uffc8\014" +
    "\047\015\uffc8\016\uffc8\031\045\036\064\037\102\040\046" +
    "\041\062\042\055\043\052\114\056\115\065\116\074\117" +
    "\107\127\054\130\106\131\063\132\112\133\110\135\077" +
    "\137\051\143\101\145\105\152\uffc8\233\066\234\111\235" +
    "\075\237\070\240\067\001\002\000\004\145\324\001\002" +
    "\000\212\002\ufec2\003\ufec2\014\ufec2\015\ufec2\016\ufec2\031" +
    "\ufec2\036\ufec2\037\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2" +
    "\044\ufec2\045\ufec2\046\ufec2\051\ufec2\114\ufec2\115\ufec2\116" +
    "\ufec2\117\ufec2\127\ufec2\130\ufec2\131\ufec2\132\ufec2\133\ufec2" +
    "\135\ufec2\137\ufec2\141\ufec2\143\ufec2\145\ufec2\146\ufec2\147" +
    "\ufec2\152\ufec2\153\ufec2\154\ufec2\155\ufec2\156\ufec2\157\ufec2" +
    "\162\ufec2\164\ufec2\165\ufec2\166\ufec2\167\ufec2\170\ufec2\171" +
    "\ufec2\172\ufec2\173\ufec2\174\ufec2\175\ufec2\233\ufec2\234\ufec2" +
    "\235\ufec2\237\ufec2\240\ufec2\242\ufec2\243\ufec2\244\ufec2\245" +
    "\ufec2\246\ufec2\247\ufec2\250\ufec2\251\ufec2\252\ufec2\253\ufec2" +
    "\254\ufec2\255\ufec2\256\ufec2\257\ufec2\001\002\000\006\003" +
    "\322\145\105\001\002\000\004\145\317\001\002\000\216" +
    "\003\ufe99\027\ufe99\030\ufe99\031\ufe99\036\ufe99\037\ufe99\040" +
    "\ufe99\041\ufe99\042\ufe99\043\ufe99\044\ufe99\045\ufe99\046\ufe99" +
    "\051\ufe99\114\ufe99\115\ufe99\116\ufe99\117\ufe99\127\ufe99\130" +
    "\ufe99\131\ufe99\132\ufe99\133\ufe99\135\ufe99\137\ufe99\141\ufe99" +
    "\142\ufe99\145\ufe99\146\ufe99\147\ufe99\150\ufe99\151\ufe99\152" +
    "\ufe99\153\ufe99\154\ufe99\155\ufe99\156\ufe99\157\ufe99\161\ufe99" +
    "\162\ufe99\163\ufe99\164\ufe99\165\ufe99\166\ufe99\167\ufe99\170" +
    "\ufe99\171\ufe99\172\ufe99\173\ufe99\174\ufe99\175\ufe99\233\ufe99" +
    "\234\ufe99\235\ufe99\237\ufe99\240\ufe99\242\ufe99\243\ufe99\244" +
    "\ufe99\245\ufe99\246\ufe99\247\ufe99\250\ufe99\251\ufe99\252\ufe99" +
    "\253\ufe99\254\ufe99\255\ufe99\256\ufe99\257\ufe99\001\002\000" +
    "\014\002\uffcb\003\uffcb\015\uffcb\016\uffcb\152\uffcb\001\002" +
    "\000\130\031\045\036\064\037\102\040\046\041\062\042" +
    "\055\043\052\044\150\045\164\046\135\114\056\115\065" +
    "\116\074\117\107\127\054\130\106\131\063\132\112\133" +
    "\110\135\077\137\051\145\105\153\153\174\126\175\141" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\001\002\000" +
    "\004\145\311\001\002\000\004\145\306\001\002\000\004" +
    "\145\300\001\002\000\216\003\ufe97\027\ufe97\030\ufe97\031" +
    "\ufe97\036\ufe97\037\ufe97\040\ufe97\041\ufe97\042\ufe97\043\ufe97" +
    "\044\ufe97\045\ufe97\046\ufe97\051\ufe97\114\ufe97\115\ufe97\116" +
    "\ufe97\117\ufe97\127\ufe97\130\ufe97\131\ufe97\132\ufe97\133\ufe97" +
    "\135\ufe97\137\ufe97\141\ufe97\142\ufe97\145\ufe97\146\ufe97\147" +
    "\ufe97\150\ufe97\151\ufe97\152\ufe97\153\ufe97\154\ufe97\155\ufe97" +
    "\156\ufe97\157\ufe97\161\ufe97\162\ufe97\163\ufe97\164\ufe97\165" +
    "\ufe97\166\ufe97\167\ufe97\170\ufe97\171\ufe97\172\ufe97\173\ufe97" +
    "\174\ufe97\175\ufe97\233\ufe97\234\ufe97\235\ufe97\237\ufe97\240" +
    "\ufe97\242\ufe97\243\ufe97\244\ufe97\245\ufe97\246\ufe97\247\ufe97" +
    "\250\ufe97\251\ufe97\252\ufe97\253\ufe97\254\ufe97\255\ufe97\256" +
    "\ufe97\257\ufe97\001\002\000\004\145\113\001\002\000\132" +
    "\017\114\031\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\114\uff92\115\uff92" +
    "\116\uff92\117\uff92\127\uff92\130\uff92\131\uff92\132\uff92\133" +
    "\uff92\135\uff92\137\uff92\145\uff92\153\uff92\174\uff92\175\uff92" +
    "\233\uff92\234\uff92\235\uff92\237\uff92\240\uff92\242\uff92\243" +
    "\uff92\244\uff92\245\uff92\246\uff92\247\uff92\250\uff92\251\uff92" +
    "\252\uff92\253\uff92\254\uff92\255\uff92\256\uff92\001\002\000" +
    "\132\031\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\114\uff93\115\uff93\116" +
    "\uff93\117\uff93\127\uff93\130\uff93\131\uff93\132\uff93\133\uff93" +
    "\135\uff93\137\uff93\145\uff93\153\uff93\154\uff93\174\uff93\175" +
    "\uff93\233\uff93\234\uff93\235\uff93\237\uff93\240\uff93\242\uff93" +
    "\243\uff93\244\uff93\245\uff93\246\uff93\247\uff93\250\uff93\251" +
    "\uff93\252\uff93\253\uff93\254\uff93\255\uff93\256\uff93\001\002" +
    "\000\130\031\045\036\064\037\102\040\046\041\062\042" +
    "\055\043\052\044\150\045\164\046\135\114\056\115\065" +
    "\116\074\117\107\127\054\130\106\131\063\132\112\133" +
    "\110\135\077\137\051\145\105\153\153\174\126\175\141" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\001\002\000" +
    "\166\031\ufed2\036\ufed2\037\ufed2\040\ufed2\041\ufed2\042\ufed2" +
    "\043\ufed2\044\ufed2\045\ufed2\046\ufed2\051\ufed2\114\ufed2\115" +
    "\ufed2\116\ufed2\117\ufed2\127\ufed2\130\ufed2\131\ufed2\132\ufed2" +
    "\133\ufed2\135\ufed2\137\ufed2\141\ufed2\145\ufed2\146\ufed2\153" +
    "\ufed2\154\ufed2\156\ufed2\157\ufed2\162\ufed2\164\ufed2\165\ufed2" +
    "\166\ufed2\167\ufed2\170\ufed2\171\ufed2\172\ufed2\173\ufed2\174" +
    "\ufed2\175\ufed2\233\ufed2\234\ufed2\235\ufed2\237\ufed2\240\ufed2" +
    "\242\ufed2\243\ufed2\244\ufed2\245\ufed2\246\ufed2\247\ufed2\250" +
    "\ufed2\251\ufed2\252\ufed2\253\ufed2\254\ufed2\255\ufed2\256\ufed2" +
    "\001\002\000\144\031\ufef6\036\ufef6\037\ufef6\040\ufef6\041" +
    "\ufef6\042\ufef6\043\ufef6\044\ufef6\045\ufef6\046\ufef6\051\ufef6" +
    "\114\ufef6\115\ufef6\116\ufef6\117\ufef6\127\ufef6\130\ufef6\131" +
    "\ufef6\132\ufef6\133\ufef6\135\ufef6\137\ufef6\145\ufef6\146\ufef6" +
    "\153\ufef6\156\ufef6\157\ufef6\164\ufef6\165\271\174\ufef6\175" +
    "\ufef6\233\ufef6\234\ufef6\235\ufef6\237\ufef6\240\ufef6\242\ufef6" +
    "\243\ufef6\244\ufef6\245\ufef6\246\ufef6\247\ufef6\250\ufef6\251" +
    "\ufef6\252\ufef6\253\ufef6\254\ufef6\255\ufef6\256\ufef6\001\002" +
    "\000\212\003\ufeaa\027\ufeaa\030\ufeaa\031\ufeaa\036\ufeaa\037" +
    "\ufeaa\040\ufeaa\041\ufeaa\042\ufeaa\043\ufeaa\044\ufeaa\045\ufeaa" +
    "\046\ufeaa\051\ufeaa\114\ufeaa\115\ufeaa\116\ufeaa\117\ufeaa\127" +
    "\ufeaa\130\ufeaa\131\ufeaa\132\ufeaa\133\ufeaa\135\ufeaa\137\ufeaa" +
    "\141\ufeaa\142\ufeaa\145\ufeaa\146\ufeaa\147\ufeaa\150\ufeaa\151" +
    "\ufeaa\152\ufeaa\153\ufeaa\154\ufeaa\155\ufeaa\156\ufeaa\157\ufeaa" +
    "\162\ufeaa\164\ufeaa\165\ufeaa\166\ufeaa\167\ufeaa\170\ufeaa\171" +
    "\ufeaa\172\ufeaa\173\ufeaa\174\ufeaa\175\ufeaa\233\ufeaa\234\ufeaa" +
    "\235\ufeaa\237\ufeaa\240\ufeaa\242\ufeaa\243\ufeaa\244\ufeaa\245" +
    "\ufeaa\246\ufeaa\247\ufeaa\250\ufeaa\251\ufeaa\252\ufeaa\253\ufeaa" +
    "\254\ufeaa\255\ufeaa\256\ufeaa\257\ufeaa\001\002\000\142\031" +
    "\045\036\064\037\102\040\046\041\062\042\055\043\052" +
    "\044\150\045\164\046\135\051\ufefb\114\056\115\065\116" +
    "\074\117\107\127\054\130\106\131\063\132\112\133\110" +
    "\135\077\137\051\145\105\146\ufefb\153\153\156\ufefb\157" +
    "\ufefb\164\264\174\126\175\141\233\066\234\111\235\075" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\166\031\ufed5\036\ufed5\037" +
    "\ufed5\040\ufed5\041\ufed5\042\ufed5\043\ufed5\044\ufed5\045\ufed5" +
    "\046\ufed5\051\ufed5\114\ufed5\115\ufed5\116\ufed5\117\ufed5\127" +
    "\ufed5\130\ufed5\131\ufed5\132\ufed5\133\ufed5\135\ufed5\137\ufed5" +
    "\141\ufed5\145\ufed5\146\ufed5\153\ufed5\154\ufed5\156\ufed5\157" +
    "\ufed5\162\ufed5\164\ufed5\165\ufed5\166\ufed5\167\ufed5\170\ufed5" +
    "\171\ufed5\172\ufed5\173\ufed5\174\ufed5\175\ufed5\233\ufed5\234" +
    "\ufed5\235\ufed5\237\ufed5\240\ufed5\242\ufed5\243\ufed5\244\ufed5" +
    "\245\ufed5\246\ufed5\247\ufed5\250\ufed5\251\ufed5\252\ufed5\253" +
    "\ufed5\254\ufed5\255\ufed5\256\ufed5\001\002\000\212\003\ufea2" +
    "\027\ufea2\030\ufea2\031\ufea2\036\ufea2\037\ufea2\040\ufea2\041" +
    "\ufea2\042\ufea2\043\ufea2\044\ufea2\045\ufea2\046\ufea2\051\ufea2" +
    "\114\ufea2\115\ufea2\116\ufea2\117\ufea2\127\ufea2\130\ufea2\131" +
    "\ufea2\132\ufea2\133\ufea2\135\ufea2\137\ufea2\141\ufea2\142\ufea2" +
    "\145\ufea2\146\ufea2\147\ufea2\150\ufea2\151\ufea2\152\ufea2\153" +
    "\ufea2\154\ufea2\155\ufea2\156\ufea2\157\ufea2\162\ufea2\164\ufea2" +
    "\165\ufea2\166\ufea2\167\ufea2\170\ufea2\171\ufea2\172\ufea2\173" +
    "\ufea2\174\ufea2\175\ufea2\233\ufea2\234\ufea2\235\ufea2\237\ufea2" +
    "\240\ufea2\242\ufea2\243\ufea2\244\ufea2\245\ufea2\246\ufea2\247" +
    "\ufea2\250\ufea2\251\ufea2\252\ufea2\253\ufea2\254\ufea2\255\ufea2" +
    "\256\ufea2\257\ufea2\001\002\000\216\003\ufe9b\027\ufe9b\030" +
    "\ufe9b\031\ufe9b\036\ufe9b\037\ufe9b\040\ufe9b\041\ufe9b\042\ufe9b" +
    "\043\ufe9b\044\ufe9b\045\ufe9b\046\ufe9b\051\ufe9b\114\ufe9b\115" +
    "\ufe9b\116\ufe9b\117\ufe9b\127\ufe9b\130\ufe9b\131\ufe9b\132\ufe9b" +
    "\133\ufe9b\135\ufe9b\137\ufe9b\141\ufe9b\142\ufe9b\145\ufe9b\146" +
    "\ufe9b\147\ufe9b\150\ufe9b\151\ufe9b\152\ufe9b\153\ufe9b\154\ufe9b" +
    "\155\ufe9b\156\ufe9b\157\ufe9b\160\ufe9b\162\ufe9b\164\ufe9b\165" +
    "\ufe9b\166\ufe9b\167\ufe9b\170\ufe9b\171\ufe9b\172\ufe9b\173\ufe9b" +
    "\174\ufe9b\175\ufe9b\233\ufe9b\234\ufe9b\235\ufe9b\237\ufe9b\240" +
    "\ufe9b\241\ufe9b\242\ufe9b\243\ufe9b\244\ufe9b\245\ufe9b\246\ufe9b" +
    "\247\ufe9b\250\ufe9b\251\ufe9b\252\ufe9b\253\ufe9b\254\ufe9b\255" +
    "\ufe9b\256\ufe9b\257\ufe9b\001\002\000\216\003\ufe9c\027\ufe9c" +
    "\030\ufe9c\031\ufe9c\036\ufe9c\037\ufe9c\040\ufe9c\041\ufe9c\042" +
    "\ufe9c\043\ufe9c\044\ufe9c\045\ufe9c\046\ufe9c\051\ufe9c\114\ufe9c" +
    "\115\ufe9c\116\ufe9c\117\ufe9c\127\ufe9c\130\ufe9c\131\ufe9c\132" +
    "\ufe9c\133\ufe9c\135\ufe9c\137\ufe9c\141\ufe9c\142\ufe9c\145\ufe9c" +
    "\146\ufe9c\147\ufe9c\150\ufe9c\151\ufe9c\152\ufe9c\153\ufe9c\154" +
    "\ufe9c\155\ufe9c\156\ufe9c\157\ufe9c\160\ufe9c\162\ufe9c\164\ufe9c" +
    "\165\ufe9c\166\ufe9c\167\ufe9c\170\ufe9c\171\ufe9c\172\ufe9c\173" +
    "\ufe9c\174\ufe9c\175\ufe9c\233\ufe9c\234\ufe9c\235\ufe9c\237\ufe9c" +
    "\240\ufe9c\241\ufe9c\242\ufe9c\243\ufe9c\244\ufe9c\245\ufe9c\246" +
    "\ufe9c\247\ufe9c\250\ufe9c\251\ufe9c\252\ufe9c\253\ufe9c\254\ufe9c" +
    "\255\ufe9c\256\ufe9c\257\ufe9c\001\002\000\120\031\045\036" +
    "\064\037\102\040\046\041\062\042\055\043\052\044\150" +
    "\045\164\114\056\115\065\116\074\117\107\127\054\130" +
    "\106\131\063\132\112\133\110\135\077\137\051\145\105" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\001\002\000" +
    "\212\003\ufea7\027\ufea7\030\ufea7\031\ufea7\036\ufea7\037\ufea7" +
    "\040\ufea7\041\ufea7\042\ufea7\043\ufea7\044\ufea7\045\ufea7\046" +
    "\ufea7\051\ufea7\114\ufea7\115\ufea7\116\ufea7\117\ufea7\127\ufea7" +
    "\130\ufea7\131\ufea7\132\ufea7\133\ufea7\135\ufea7\137\ufea7\141" +
    "\ufea7\142\ufea7\145\ufea7\146\ufea7\147\ufea7\150\ufea7\151\ufea7" +
    "\152\ufea7\153\ufea7\154\ufea7\155\ufea7\156\ufea7\157\ufea7\162" +
    "\ufea7\164\ufea7\165\ufea7\166\ufea7\167\ufea7\170\ufea7\171\ufea7" +
    "\172\ufea7\173\ufea7\174\ufea7\175\ufea7\233\ufea7\234\ufea7\235" +
    "\ufea7\237\ufea7\240\ufea7\242\ufea7\243\ufea7\244\ufea7\245\ufea7" +
    "\246\ufea7\247\ufea7\250\ufea7\251\ufea7\252\ufea7\253\ufea7\254" +
    "\ufea7\255\ufea7\256\ufea7\257\ufea7\001\002\000\212\003\ufea9" +
    "\027\ufea9\030\ufea9\031\ufea9\036\ufea9\037\ufea9\040\ufea9\041" +
    "\ufea9\042\ufea9\043\ufea9\044\ufea9\045\ufea9\046\ufea9\051\ufea9" +
    "\114\ufea9\115\ufea9\116\ufea9\117\ufea9\127\ufea9\130\ufea9\131" +
    "\ufea9\132\ufea9\133\ufea9\135\ufea9\137\ufea9\141\ufea9\142\ufea9" +
    "\145\ufea9\146\ufea9\147\ufea9\150\ufea9\151\ufea9\152\ufea9\153" +
    "\ufea9\154\ufea9\155\ufea9\156\ufea9\157\ufea9\162\ufea9\164\ufea9" +
    "\165\ufea9\166\ufea9\167\ufea9\170\ufea9\171\ufea9\172\ufea9\173" +
    "\ufea9\174\ufea9\175\ufea9\233\ufea9\234\ufea9\235\ufea9\237\ufea9" +
    "\240\ufea9\242\ufea9\243\ufea9\244\ufea9\245\ufea9\246\ufea9\247" +
    "\ufea9\250\ufea9\251\ufea9\252\ufea9\253\ufea9\254\ufea9\255\ufea9" +
    "\256\ufea9\257\ufea9\001\002\000\166\031\ufed0\036\ufed0\037" +
    "\ufed0\040\ufed0\041\ufed0\042\ufed0\043\ufed0\044\ufed0\045\ufed0" +
    "\046\ufed0\051\ufed0\114\ufed0\115\ufed0\116\ufed0\117\ufed0\127" +
    "\ufed0\130\ufed0\131\ufed0\132\ufed0\133\ufed0\135\ufed0\137\ufed0" +
    "\141\ufed0\145\ufed0\146\ufed0\153\ufed0\154\ufed0\156\ufed0\157" +
    "\ufed0\162\ufed0\164\ufed0\165\ufed0\166\ufed0\167\ufed0\170\ufed0" +
    "\171\ufed0\172\ufed0\173\ufed0\174\ufed0\175\ufed0\233\ufed0\234" +
    "\ufed0\235\ufed0\237\ufed0\240\ufed0\242\ufed0\243\ufed0\244\ufed0" +
    "\245\ufed0\246\ufed0\247\ufed0\250\ufed0\251\ufed0\252\ufed0\253" +
    "\ufed0\254\ufed0\255\ufed0\256\ufed0\001\002\000\212\003\ufeab" +
    "\027\ufeab\030\ufeab\031\ufeab\036\ufeab\037\ufeab\040\ufeab\041" +
    "\ufeab\042\ufeab\043\ufeab\044\ufeab\045\ufeab\046\ufeab\051\ufeab" +
    "\114\ufeab\115\ufeab\116\ufeab\117\ufeab\127\ufeab\130\ufeab\131" +
    "\ufeab\132\ufeab\133\ufeab\135\ufeab\137\ufeab\141\ufeab\142\ufeab" +
    "\145\ufeab\146\ufeab\147\ufeab\150\ufeab\151\ufeab\152\ufeab\153" +
    "\ufeab\154\ufeab\155\ufeab\156\ufeab\157\ufeab\162\ufeab\164\ufeab" +
    "\165\ufeab\166\ufeab\167\ufeab\170\ufeab\171\ufeab\172\ufeab\173" +
    "\ufeab\174\ufeab\175\ufeab\233\ufeab\234\ufeab\235\ufeab\237\ufeab" +
    "\240\ufeab\242\ufeab\243\ufeab\244\ufeab\245\ufeab\246\ufeab\247" +
    "\ufeab\250\ufeab\251\ufeab\252\ufeab\253\ufeab\254\ufeab\255\ufeab" +
    "\256\ufeab\257\ufeab\001\002\000\212\003\ufea5\027\ufea5\030" +
    "\ufea5\031\ufea5\036\ufea5\037\ufea5\040\ufea5\041\ufea5\042\ufea5" +
    "\043\ufea5\044\ufea5\045\ufea5\046\ufea5\051\ufea5\114\ufea5\115" +
    "\ufea5\116\ufea5\117\ufea5\127\ufea5\130\ufea5\131\ufea5\132\ufea5" +
    "\133\ufea5\135\ufea5\137\ufea5\141\ufea5\142\ufea5\145\ufea5\146" +
    "\ufea5\147\ufea5\150\ufea5\151\ufea5\152\ufea5\153\ufea5\154\ufea5" +
    "\155\ufea5\156\ufea5\157\ufea5\162\ufea5\164\ufea5\165\ufea5\166" +
    "\ufea5\167\ufea5\170\ufea5\171\ufea5\172\ufea5\173\ufea5\174\ufea5" +
    "\175\ufea5\233\ufea5\234\ufea5\235\ufea5\237\ufea5\240\ufea5\242" +
    "\ufea5\243\ufea5\244\ufea5\245\ufea5\246\ufea5\247\ufea5\250\ufea5" +
    "\251\ufea5\252\ufea5\253\ufea5\254\ufea5\255\ufea5\256\ufea5\257" +
    "\ufea5\001\002\000\212\003\ufeac\027\ufeac\030\ufeac\031\ufeac" +
    "\036\ufeac\037\ufeac\040\ufeac\041\ufeac\042\ufeac\043\ufeac\044" +
    "\ufeac\045\ufeac\046\ufeac\051\ufeac\114\ufeac\115\ufeac\116\ufeac" +
    "\117\ufeac\127\ufeac\130\ufeac\131\ufeac\132\ufeac\133\ufeac\135" +
    "\ufeac\137\ufeac\141\ufeac\142\ufeac\145\ufeac\146\ufeac\147\ufeac" +
    "\150\ufeac\151\ufeac\152\ufeac\153\ufeac\154\ufeac\155\ufeac\156" +
    "\ufeac\157\ufeac\162\ufeac\164\ufeac\165\ufeac\166\ufeac\167\ufeac" +
    "\170\ufeac\171\ufeac\172\ufeac\173\ufeac\174\ufeac\175\ufeac\233" +
    "\ufeac\234\ufeac\235\ufeac\237\ufeac\240\ufeac\242\ufeac\243\ufeac" +
    "\244\ufeac\245\ufeac\246\ufeac\247\ufeac\250\ufeac\251\ufeac\252" +
    "\ufeac\253\ufeac\254\ufeac\255\ufeac\256\ufeac\257\ufeac\001\002" +
    "\000\004\141\257\001\002\000\166\031\ufedd\036\ufedd\037" +
    "\ufedd\040\ufedd\041\ufedd\042\ufedd\043\ufedd\044\ufedd\045\ufedd" +
    "\046\ufedd\051\ufedd\114\ufedd\115\ufedd\116\ufedd\117\ufedd\127" +
    "\ufedd\130\ufedd\131\ufedd\132\ufedd\133\ufedd\135\ufedd\137\ufedd" +
    "\141\ufedd\145\ufedd\146\ufedd\153\ufedd\154\ufedd\156\ufedd\157" +
    "\ufedd\162\ufedd\164\ufedd\165\ufedd\166\ufedd\167\ufedd\170\ufedd" +
    "\171\ufedd\172\ufedd\173\ufedd\174\ufedd\175\ufedd\233\ufedd\234" +
    "\ufedd\235\ufedd\237\ufedd\240\ufedd\242\ufedd\243\ufedd\244\ufedd" +
    "\245\ufedd\246\ufedd\247\ufedd\250\ufedd\251\ufedd\252\ufedd\253" +
    "\ufedd\254\ufedd\255\ufedd\256\ufedd\001\002\000\162\031\ufee7" +
    "\036\ufee7\037\ufee7\040\ufee7\041\ufee7\042\ufee7\043\ufee7\044" +
    "\ufee7\045\ufee7\046\ufee7\051\ufee7\114\ufee7\115\ufee7\116\ufee7" +
    "\117\ufee7\127\ufee7\130\ufee7\131\ufee7\132\ufee7\133\ufee7\135" +
    "\ufee7\137\ufee7\141\ufee7\145\ufee7\146\ufee7\153\ufee7\156\ufee7" +
    "\157\ufee7\164\ufee7\165\ufee7\166\ufee7\167\ufee7\170\ufee7\171" +
    "\ufee7\172\ufee7\173\ufee7\174\250\175\244\233\ufee7\234\ufee7" +
    "\235\ufee7\237\ufee7\240\ufee7\242\ufee7\243\ufee7\244\ufee7\245" +
    "\163\246\133\247\162\250\156\251\123\252\154\253\ufee7" +
    "\254\ufee7\255\ufee7\256\ufee7\001\002\000\166\031\ufed4\036" +
    "\ufed4\037\ufed4\040\ufed4\041\ufed4\042\ufed4\043\ufed4\044\ufed4" +
    "\045\ufed4\046\ufed4\051\ufed4\114\ufed4\115\ufed4\116\ufed4\117" +
    "\ufed4\127\ufed4\130\ufed4\131\ufed4\132\ufed4\133\ufed4\135\ufed4" +
    "\137\ufed4\141\ufed4\145\ufed4\146\ufed4\153\ufed4\154\ufed4\156" +
    "\ufed4\157\ufed4\162\ufed4\164\ufed4\165\ufed4\166\ufed4\167\ufed4" +
    "\170\ufed4\171\ufed4\172\ufed4\173\ufed4\174\ufed4\175\ufed4\233" +
    "\ufed4\234\ufed4\235\ufed4\237\ufed4\240\ufed4\242\ufed4\243\ufed4" +
    "\244\ufed4\245\ufed4\246\ufed4\247\ufed4\250\ufed4\251\ufed4\252" +
    "\ufed4\253\ufed4\254\ufed4\255\ufed4\256\ufed4\001\002\000\120" +
    "\031\045\036\064\037\102\040\046\041\062\042\055\043" +
    "\052\044\150\045\164\114\056\115\065\116\074\117\107" +
    "\127\054\130\106\131\063\132\112\133\110\135\077\137" +
    "\051\145\105\233\066\234\111\235\075\237\070\240\067" +
    "\242\130\243\144\244\127\245\163\246\133\247\162\250" +
    "\156\251\123\252\154\253\147\254\146\255\125\256\124" +
    "\001\002\000\166\031\ufed6\036\ufed6\037\ufed6\040\ufed6\041" +
    "\ufed6\042\ufed6\043\ufed6\044\ufed6\045\ufed6\046\ufed6\051\ufed6" +
    "\114\ufed6\115\ufed6\116\ufed6\117\ufed6\127\ufed6\130\ufed6\131" +
    "\ufed6\132\ufed6\133\ufed6\135\ufed6\137\ufed6\141\ufed6\145\ufed6" +
    "\146\ufed6\153\ufed6\154\ufed6\156\ufed6\157\ufed6\162\ufed6\164" +
    "\ufed6\165\ufed6\166\ufed6\167\ufed6\170\ufed6\171\ufed6\172\ufed6" +
    "\173\ufed6\174\ufed6\175\ufed6\233\ufed6\234\ufed6\235\ufed6\237" +
    "\ufed6\240\ufed6\242\ufed6\243\ufed6\244\ufed6\245\ufed6\246\ufed6" +
    "\247\ufed6\250\ufed6\251\ufed6\252\ufed6\253\ufed6\254\ufed6\255" +
    "\ufed6\256\ufed6\001\002\000\166\031\ufed7\036\ufed7\037\ufed7" +
    "\040\ufed7\041\ufed7\042\ufed7\043\ufed7\044\ufed7\045\ufed7\046" +
    "\ufed7\051\ufed7\114\ufed7\115\ufed7\116\ufed7\117\ufed7\127\ufed7" +
    "\130\ufed7\131\ufed7\132\ufed7\133\ufed7\135\ufed7\137\ufed7\141" +
    "\ufed7\145\ufed7\146\ufed7\153\ufed7\154\ufed7\156\ufed7\157\ufed7" +
    "\162\ufed7\164\ufed7\165\ufed7\166\ufed7\167\ufed7\170\ufed7\171" +
    "\ufed7\172\ufed7\173\ufed7\174\ufed7\175\ufed7\233\ufed7\234\ufed7" +
    "\235\ufed7\237\ufed7\240\ufed7\242\ufed7\243\ufed7\244\ufed7\245" +
    "\ufed7\246\ufed7\247\ufed7\250\ufed7\251\ufed7\252\ufed7\253\ufed7" +
    "\254\ufed7\255\ufed7\256\ufed7\001\002\000\212\003\ufea8\027" +
    "\ufea8\030\ufea8\031\ufea8\036\ufea8\037\ufea8\040\ufea8\041\ufea8" +
    "\042\ufea8\043\ufea8\044\ufea8\045\ufea8\046\ufea8\051\ufea8\114" +
    "\ufea8\115\ufea8\116\ufea8\117\ufea8\127\ufea8\130\ufea8\131\ufea8" +
    "\132\ufea8\133\ufea8\135\ufea8\137\ufea8\141\ufea8\142\ufea8\145" +
    "\ufea8\146\ufea8\147\ufea8\150\ufea8\151\ufea8\152\ufea8\153\ufea8" +
    "\154\ufea8\155\ufea8\156\ufea8\157\ufea8\162\ufea8\164\ufea8\165" +
    "\ufea8\166\ufea8\167\ufea8\170\ufea8\171\ufea8\172\ufea8\173\ufea8" +
    "\174\ufea8\175\ufea8\233\ufea8\234\ufea8\235\ufea8\237\ufea8\240" +
    "\ufea8\242\ufea8\243\ufea8\244\ufea8\245\ufea8\246\ufea8\247\ufea8" +
    "\250\ufea8\251\ufea8\252\ufea8\253\ufea8\254\ufea8\255\ufea8\256" +
    "\ufea8\257\ufea8\001\002\000\166\031\ufee1\036\ufee1\037\ufee1" +
    "\040\ufee1\041\ufee1\042\ufee1\043\ufee1\044\ufee1\045\ufee1\046" +
    "\ufee1\051\ufee1\114\ufee1\115\ufee1\116\ufee1\117\ufee1\127\ufee1" +
    "\130\ufee1\131\ufee1\132\ufee1\133\ufee1\135\ufee1\137\ufee1\141" +
    "\ufee1\145\ufee1\146\ufee1\153\ufee1\154\236\156\ufee1\157\ufee1" +
    "\162\237\164\ufee1\165\ufee1\166\ufee1\167\ufee1\170\ufee1\171" +
    "\ufee1\172\ufee1\173\ufee1\174\ufee1\175\ufee1\233\ufee1\234\ufee1" +
    "\235\ufee1\237\ufee1\240\ufee1\242\ufee1\243\ufee1\244\ufee1\245" +
    "\ufee1\246\ufee1\247\ufee1\250\ufee1\251\ufee1\252\ufee1\253\ufee1" +
    "\254\ufee1\255\ufee1\256\ufee1\001\002\000\216\003\ufe9d\027" +
    "\ufe9d\030\ufe9d\031\ufe9d\036\ufe9d\037\ufe9d\040\ufe9d\041\ufe9d" +
    "\042\ufe9d\043\ufe9d\044\ufe9d\045\ufe9d\046\ufe9d\051\ufe9d\114" +
    "\ufe9d\115\ufe9d\116\ufe9d\117\ufe9d\127\ufe9d\130\ufe9d\131\ufe9d" +
    "\132\ufe9d\133\ufe9d\135\ufe9d\137\ufe9d\141\ufe9d\142\ufe9d\145" +
    "\ufe9d\146\ufe9d\147\ufe9d\150\ufe9d\151\ufe9d\152\ufe9d\153\ufe9d" +
    "\154\ufe9d\155\ufe9d\156\ufe9d\157\ufe9d\160\ufe9d\162\ufe9d\164" +
    "\ufe9d\165\ufe9d\166\ufe9d\167\ufe9d\170\ufe9d\171\ufe9d\172\ufe9d" +
    "\173\ufe9d\174\ufe9d\175\ufe9d\233\ufe9d\234\ufe9d\235\ufe9d\237" +
    "\ufe9d\240\ufe9d\241\ufe9d\242\ufe9d\243\ufe9d\244\ufe9d\245\ufe9d" +
    "\246\ufe9d\247\ufe9d\250\ufe9d\251\ufe9d\252\ufe9d\253\ufe9d\254" +
    "\ufe9d\255\ufe9d\256\ufe9d\257\ufe9d\001\002\000\216\003\ufe9e" +
    "\027\ufe9e\030\ufe9e\031\ufe9e\036\ufe9e\037\ufe9e\040\ufe9e\041" +
    "\ufe9e\042\ufe9e\043\ufe9e\044\ufe9e\045\ufe9e\046\ufe9e\051\ufe9e" +
    "\114\ufe9e\115\ufe9e\116\ufe9e\117\ufe9e\127\ufe9e\130\ufe9e\131" +
    "\ufe9e\132\ufe9e\133\ufe9e\135\ufe9e\137\ufe9e\141\ufe9e\142\ufe9e" +
    "\145\ufe9e\146\ufe9e\147\ufe9e\150\ufe9e\151\ufe9e\152\ufe9e\153" +
    "\ufe9e\154\ufe9e\155\ufe9e\156\ufe9e\157\ufe9e\160\ufe9e\162\ufe9e" +
    "\164\ufe9e\165\ufe9e\166\ufe9e\167\ufe9e\170\ufe9e\171\ufe9e\172" +
    "\ufe9e\173\ufe9e\174\ufe9e\175\ufe9e\233\ufe9e\234\ufe9e\235\ufe9e" +
    "\237\ufe9e\240\ufe9e\241\ufe9e\242\ufe9e\243\ufe9e\244\ufe9e\245" +
    "\ufe9e\246\ufe9e\247\ufe9e\250\ufe9e\251\ufe9e\252\ufe9e\253\ufe9e" +
    "\254\ufe9e\255\ufe9e\256\ufe9e\257\ufe9e\001\002\000\212\003" +
    "\ufea0\027\ufea0\030\ufea0\031\ufea0\036\ufea0\037\ufea0\040\ufea0" +
    "\041\ufea0\042\ufea0\043\ufea0\044\ufea0\045\ufea0\046\ufea0\051" +
    "\ufea0\114\ufea0\115\ufea0\116\ufea0\117\ufea0\127\ufea0\130\ufea0" +
    "\131\ufea0\132\ufea0\133\ufea0\135\ufea0\137\ufea0\141\ufea0\142" +
    "\ufea0\145\ufea0\146\ufea0\147\ufea0\150\ufea0\151\ufea0\152\ufea0" +
    "\153\ufea0\154\ufea0\155\ufea0\156\ufea0\157\ufea0\162\ufea0\164" +
    "\ufea0\165\ufea0\166\ufea0\167\ufea0\170\ufea0\171\ufea0\172\ufea0" +
    "\173\ufea0\174\ufea0\175\ufea0\233\ufea0\234\ufea0\235\ufea0\237" +
    "\ufea0\240\ufea0\242\ufea0\243\ufea0\244\ufea0\245\ufea0\246\ufea0" +
    "\247\ufea0\250\ufea0\251\ufea0\252\ufea0\253\ufea0\254\ufea0\255" +
    "\ufea0\256\ufea0\257\ufea0\001\002\000\170\031\ufeb3\036\ufeb3" +
    "\037\ufeb3\040\ufeb3\041\ufeb3\042\ufeb3\043\ufeb3\044\ufeb3\045" +
    "\ufeb3\046\ufeb3\051\ufeb3\114\ufeb3\115\ufeb3\116\ufeb3\117\ufeb3" +
    "\127\ufeb3\130\ufeb3\131\ufeb3\132\ufeb3\133\ufeb3\135\ufeb3\137" +
    "\ufeb3\141\ufeb3\145\230\146\ufeb3\153\ufeb3\154\ufeb3\156\ufeb3" +
    "\157\ufeb3\162\ufeb3\164\ufeb3\165\ufeb3\166\ufeb3\167\ufeb3\170" +
    "\ufeb3\171\ufeb3\172\ufeb3\173\ufeb3\174\ufeb3\175\ufeb3\233\ufeb3" +
    "\234\ufeb3\235\ufeb3\237\ufeb3\240\ufeb3\242\ufeb3\243\ufeb3\244" +
    "\ufeb3\245\ufeb3\246\ufeb3\247\ufeb3\250\ufeb3\251\ufeb3\252\ufeb3" +
    "\253\ufeb3\254\ufeb3\255\ufeb3\256\ufeb3\257\231\001\002\000" +
    "\166\031\ufed3\036\ufed3\037\ufed3\040\ufed3\041\ufed3\042\ufed3" +
    "\043\ufed3\044\ufed3\045\ufed3\046\ufed3\051\ufed3\114\ufed3\115" +
    "\ufed3\116\ufed3\117\ufed3\127\ufed3\130\ufed3\131\ufed3\132\ufed3" +
    "\133\ufed3\135\ufed3\137\ufed3\141\ufed3\145\ufed3\146\ufed3\153" +
    "\ufed3\154\ufed3\156\ufed3\157\ufed3\162\ufed3\164\ufed3\165\ufed3" +
    "\166\ufed3\167\ufed3\170\ufed3\171\ufed3\172\ufed3\173\ufed3\174" +
    "\ufed3\175\ufed3\233\ufed3\234\ufed3\235\ufed3\237\ufed3\240\ufed3" +
    "\242\ufed3\243\ufed3\244\ufed3\245\ufed3\246\ufed3\247\ufed3\250" +
    "\ufed3\251\ufed3\252\ufed3\253\ufed3\254\ufed3\255\ufed3\256\ufed3" +
    "\001\002\000\120\031\045\036\064\037\102\040\046\041" +
    "\062\042\055\043\052\044\150\045\164\114\056\115\065" +
    "\116\074\117\107\127\054\130\106\131\063\132\112\133" +
    "\110\135\077\137\051\145\105\233\066\234\111\235\075" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\212\003\ufea1\027\ufea1\030" +
    "\ufea1\031\ufea1\036\ufea1\037\ufea1\040\ufea1\041\ufea1\042\ufea1" +
    "\043\ufea1\044\ufea1\045\ufea1\046\ufea1\051\ufea1\114\ufea1\115" +
    "\ufea1\116\ufea1\117\ufea1\127\ufea1\130\ufea1\131\ufea1\132\ufea1" +
    "\133\ufea1\135\ufea1\137\ufea1\141\ufea1\142\ufea1\145\ufea1\146" +
    "\ufea1\147\ufea1\150\ufea1\151\ufea1\152\ufea1\153\ufea1\154\ufea1" +
    "\155\ufea1\156\ufea1\157\ufea1\162\ufea1\164\ufea1\165\ufea1\166" +
    "\ufea1\167\ufea1\170\ufea1\171\ufea1\172\ufea1\173\ufea1\174\ufea1" +
    "\175\ufea1\233\ufea1\234\ufea1\235\ufea1\237\ufea1\240\ufea1\242" +
    "\ufea1\243\ufea1\244\ufea1\245\ufea1\246\ufea1\247\ufea1\250\ufea1" +
    "\251\ufea1\252\ufea1\253\ufea1\254\ufea1\255\ufea1\256\ufea1\257" +
    "\ufea1\001\002\000\216\003\ufead\027\ufead\030\ufead\031\ufead" +
    "\036\ufead\037\ufead\040\ufead\041\ufead\042\ufead\043\ufead\044" +
    "\ufead\045\ufead\046\ufead\051\ufead\114\ufead\115\ufead\116\ufead" +
    "\117\ufead\127\ufead\130\ufead\131\ufead\132\ufead\133\ufead\135" +
    "\ufead\137\ufead\141\ufead\142\ufead\145\ufead\146\ufead\147\ufead" +
    "\150\ufead\151\ufead\152\ufead\153\ufead\154\ufead\155\ufead\156" +
    "\ufead\157\ufead\160\ufeaf\162\ufead\164\ufead\165\ufead\166\ufead" +
    "\167\ufead\170\ufead\171\ufead\172\ufead\173\ufead\174\ufead\175" +
    "\ufead\233\ufead\234\ufead\235\ufead\237\ufead\240\ufead\241\ufeb1" +
    "\242\ufead\243\ufead\244\ufead\245\ufead\246\ufead\247\ufead\250" +
    "\ufead\251\ufead\252\ufead\253\ufead\254\ufead\255\ufead\256\ufead" +
    "\257\ufead\001\002\000\212\003\ufea3\027\ufea3\030\ufea3\031" +
    "\ufea3\036\ufea3\037\ufea3\040\ufea3\041\ufea3\042\ufea3\043\ufea3" +
    "\044\ufea3\045\ufea3\046\ufea3\051\ufea3\114\ufea3\115\ufea3\116" +
    "\ufea3\117\ufea3\127\ufea3\130\ufea3\131\ufea3\132\ufea3\133\ufea3" +
    "\135\ufea3\137\ufea3\141\ufea3\142\ufea3\145\ufea3\146\ufea3\147" +
    "\ufea3\150\ufea3\151\ufea3\152\ufea3\153\ufea3\154\ufea3\155\ufea3" +
    "\156\ufea3\157\ufea3\162\ufea3\164\ufea3\165\ufea3\166\ufea3\167" +
    "\ufea3\170\ufea3\171\ufea3\172\ufea3\173\ufea3\174\ufea3\175\ufea3" +
    "\233\ufea3\234\ufea3\235\ufea3\237\ufea3\240\ufea3\242\ufea3\243" +
    "\ufea3\244\ufea3\245\ufea3\246\ufea3\247\ufea3\250\ufea3\251\ufea3" +
    "\252\ufea3\253\ufea3\254\ufea3\255\ufea3\256\ufea3\257\ufea3\001" +
    "\002\000\162\031\ufef0\036\ufef0\037\ufef0\040\ufef0\041\ufef0" +
    "\042\ufef0\043\ufef0\044\ufef0\045\ufef0\046\ufef0\051\ufef0\114" +
    "\ufef0\115\ufef0\116\ufef0\117\ufef0\127\ufef0\130\ufef0\131\ufef0" +
    "\132\ufef0\133\ufef0\135\ufef0\137\ufef0\141\172\145\ufef0\146" +
    "\ufef0\153\ufef0\156\ufef0\157\ufef0\164\ufef0\165\ufef0\166\176" +
    "\167\171\170\173\171\174\172\175\173\170\174\ufef0\175" +
    "\ufef0\233\ufef0\234\ufef0\235\ufef0\237\ufef0\240\ufef0\242\ufef0" +
    "\243\ufef0\244\ufef0\245\ufef0\246\ufef0\247\ufef0\250\ufef0\251" +
    "\ufef0\252\ufef0\253\ufef0\254\ufef0\255\ufef0\256\ufef0\001\002" +
    "\000\004\146\167\001\002\000\012\051\ufefe\146\ufefe\156" +
    "\ufefe\157\ufefe\001\002\000\212\003\ufea4\027\ufea4\030\ufea4" +
    "\031\ufea4\036\ufea4\037\ufea4\040\ufea4\041\ufea4\042\ufea4\043" +
    "\ufea4\044\ufea4\045\ufea4\046\ufea4\051\ufea4\114\ufea4\115\ufea4" +
    "\116\ufea4\117\ufea4\127\ufea4\130\ufea4\131\ufea4\132\ufea4\133" +
    "\ufea4\135\ufea4\137\ufea4\141\ufea4\142\ufea4\145\ufea4\146\ufea4" +
    "\147\ufea4\150\ufea4\151\ufea4\152\ufea4\153\ufea4\154\ufea4\155" +
    "\ufea4\156\ufea4\157\ufea4\162\ufea4\164\ufea4\165\ufea4\166\ufea4" +
    "\167\ufea4\170\ufea4\171\ufea4\172\ufea4\173\ufea4\174\ufea4\175" +
    "\ufea4\233\ufea4\234\ufea4\235\ufea4\237\ufea4\240\ufea4\242\ufea4" +
    "\243\ufea4\244\ufea4\245\ufea4\246\ufea4\247\ufea4\250\ufea4\251" +
    "\ufea4\252\ufea4\253\ufea4\254\ufea4\255\ufea4\256\ufea4\257\ufea4" +
    "\001\002\000\212\003\ufea6\027\ufea6\030\ufea6\031\ufea6\036" +
    "\ufea6\037\ufea6\040\ufea6\041\ufea6\042\ufea6\043\ufea6\044\ufea6" +
    "\045\ufea6\046\ufea6\051\ufea6\114\ufea6\115\ufea6\116\ufea6\117" +
    "\ufea6\127\ufea6\130\ufea6\131\ufea6\132\ufea6\133\ufea6\135\ufea6" +
    "\137\ufea6\141\ufea6\142\ufea6\145\ufea6\146\ufea6\147\ufea6\150" +
    "\ufea6\151\ufea6\152\ufea6\153\ufea6\154\ufea6\155\ufea6\156\ufea6" +
    "\157\ufea6\162\ufea6\164\ufea6\165\ufea6\166\ufea6\167\ufea6\170" +
    "\ufea6\171\ufea6\172\ufea6\173\ufea6\174\ufea6\175\ufea6\233\ufea6" +
    "\234\ufea6\235\ufea6\237\ufea6\240\ufea6\242\ufea6\243\ufea6\244" +
    "\ufea6\245\ufea6\246\ufea6\247\ufea6\250\ufea6\251\ufea6\252\ufea6" +
    "\253\ufea6\254\ufea6\255\ufea6\256\ufea6\257\ufea6\001\002\000" +
    "\212\003\ufe9f\027\ufe9f\030\ufe9f\031\ufe9f\036\ufe9f\037\ufe9f" +
    "\040\ufe9f\041\ufe9f\042\ufe9f\043\ufe9f\044\ufe9f\045\ufe9f\046" +
    "\ufe9f\051\ufe9f\114\ufe9f\115\ufe9f\116\ufe9f\117\ufe9f\127\ufe9f" +
    "\130\ufe9f\131\ufe9f\132\ufe9f\133\ufe9f\135\ufe9f\137\ufe9f\141" +
    "\ufe9f\142\ufe9f\145\ufe9f\146\ufe9f\147\ufe9f\150\ufe9f\151\ufe9f" +
    "\152\ufe9f\153\ufe9f\154\ufe9f\155\ufe9f\156\ufe9f\157\ufe9f\162" +
    "\ufe9f\164\ufe9f\165\ufe9f\166\ufe9f\167\ufe9f\170\ufe9f\171\ufe9f" +
    "\172\ufe9f\173\ufe9f\174\ufe9f\175\ufe9f\233\ufe9f\234\ufe9f\235" +
    "\ufe9f\237\ufe9f\240\ufe9f\242\ufe9f\243\ufe9f\244\ufe9f\245\ufe9f" +
    "\246\ufe9f\247\ufe9f\250\ufe9f\251\ufe9f\252\ufe9f\253\ufe9f\254" +
    "\ufe9f\255\ufe9f\256\ufe9f\257\ufe9f\001\002\000\166\031\ufed1" +
    "\036\ufed1\037\ufed1\040\ufed1\041\ufed1\042\ufed1\043\ufed1\044" +
    "\ufed1\045\ufed1\046\ufed1\051\ufed1\114\ufed1\115\ufed1\116\ufed1" +
    "\117\ufed1\127\ufed1\130\ufed1\131\ufed1\132\ufed1\133\ufed1\135" +
    "\ufed1\137\ufed1\141\ufed1\145\ufed1\146\ufed1\153\ufed1\154\ufed1" +
    "\156\ufed1\157\ufed1\162\ufed1\164\ufed1\165\ufed1\166\ufed1\167" +
    "\ufed1\170\ufed1\171\ufed1\172\ufed1\173\ufed1\174\ufed1\175\ufed1" +
    "\233\ufed1\234\ufed1\235\ufed1\237\ufed1\240\ufed1\242\ufed1\243" +
    "\ufed1\244\ufed1\245\ufed1\246\ufed1\247\ufed1\250\ufed1\251\ufed1" +
    "\252\ufed1\253\ufed1\254\ufed1\255\ufed1\256\ufed1\001\002\000" +
    "\144\031\ufef1\036\ufef1\037\ufef1\040\ufef1\041\ufef1\042\ufef1" +
    "\043\ufef1\044\ufef1\045\ufef1\046\ufef1\051\ufef1\114\ufef1\115" +
    "\ufef1\116\ufef1\117\ufef1\127\ufef1\130\ufef1\131\ufef1\132\ufef1" +
    "\133\ufef1\135\ufef1\137\ufef1\145\ufef1\146\ufef1\153\ufef1\156" +
    "\ufef1\157\ufef1\164\ufef1\165\ufef1\174\ufef1\175\ufef1\233\ufef1" +
    "\234\ufef1\235\ufef1\237\ufef1\240\ufef1\242\ufef1\243\ufef1\244" +
    "\ufef1\245\ufef1\246\ufef1\247\ufef1\250\ufef1\251\ufef1\252\ufef1" +
    "\253\ufef1\254\ufef1\255\ufef1\256\ufef1\001\002\000\212\002" +
    "\ufeb7\003\ufeb7\014\ufeb7\015\ufeb7\016\ufeb7\031\ufeb7\036\ufeb7" +
    "\037\ufeb7\040\ufeb7\041\ufeb7\042\ufeb7\043\ufeb7\044\ufeb7\045" +
    "\ufeb7\046\ufeb7\051\ufeb7\114\ufeb7\115\ufeb7\116\ufeb7\117\ufeb7" +
    "\127\ufeb7\130\ufeb7\131\ufeb7\132\ufeb7\133\ufeb7\135\ufeb7\137" +
    "\ufeb7\141\ufeb7\143\ufeb7\145\ufeb7\146\ufeb7\147\ufeb7\152\ufeb7" +
    "\153\ufeb7\154\ufeb7\155\ufeb7\156\ufeb7\157\ufeb7\162\ufeb7\164" +
    "\ufeb7\165\ufeb7\166\ufeb7\167\ufeb7\170\ufeb7\171\ufeb7\172\ufeb7" +
    "\173\ufeb7\174\ufeb7\175\ufeb7\233\ufeb7\234\ufeb7\235\ufeb7\237" +
    "\ufeb7\240\ufeb7\242\ufeb7\243\ufeb7\244\ufeb7\245\ufeb7\246\ufeb7" +
    "\247\ufeb7\250\ufeb7\251\ufeb7\252\ufeb7\253\ufeb7\254\ufeb7\255" +
    "\ufeb7\256\ufeb7\257\ufeb7\001\002\000\126\031\045\036\064" +
    "\037\102\040\046\041\062\042\055\043\052\044\150\045" +
    "\164\114\056\115\065\116\074\117\107\127\054\130\106" +
    "\131\063\132\112\133\110\135\077\137\051\145\105\153" +
    "\153\174\126\175\141\233\066\234\111\235\075\237\070" +
    "\240\067\242\130\243\144\244\127\245\163\246\133\247" +
    "\162\250\156\251\123\252\154\253\147\254\146\255\125" +
    "\256\124\001\002\000\126\031\045\036\064\037\102\040" +
    "\046\041\062\042\055\043\052\044\150\045\164\114\056" +
    "\115\065\116\074\117\107\127\054\130\106\131\063\132" +
    "\112\133\110\135\077\137\051\145\105\153\153\174\126" +
    "\175\141\233\066\234\111\235\075\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\001" +
    "\002\000\006\145\203\257\205\001\002\000\126\031\045" +
    "\036\064\037\102\040\046\041\062\042\055\043\052\044" +
    "\150\045\164\114\056\115\065\116\074\117\107\127\054" +
    "\130\106\131\063\132\112\133\110\135\077\137\051\145" +
    "\105\153\153\174\126\175\141\233\066\234\111\235\075" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\126\031\045\036\064\037" +
    "\102\040\046\041\062\042\055\043\052\044\150\045\164" +
    "\114\056\115\065\116\074\117\107\127\054\130\106\131" +
    "\063\132\112\133\110\135\077\137\051\145\105\153\153" +
    "\174\126\175\141\233\066\234\111\235\075\237\070\240" +
    "\067\242\130\243\144\244\127\245\163\246\133\247\162" +
    "\250\156\251\123\252\154\253\147\254\146\255\125\256" +
    "\124\001\002\000\126\031\045\036\064\037\102\040\046" +
    "\041\062\042\055\043\052\044\150\045\164\114\056\115" +
    "\065\116\074\117\107\127\054\130\106\131\063\132\112" +
    "\133\110\135\077\137\051\145\105\153\153\174\126\175" +
    "\141\233\066\234\111\235\075\237\070\240\067\242\130" +
    "\243\144\244\127\245\163\246\133\247\162\250\156\251" +
    "\123\252\154\253\147\254\146\255\125\256\124\001\002" +
    "\000\126\031\045\036\064\037\102\040\046\041\062\042" +
    "\055\043\052\044\150\045\164\114\056\115\065\116\074" +
    "\117\107\127\054\130\106\131\063\132\112\133\110\135" +
    "\077\137\051\145\105\153\153\174\126\175\141\233\066" +
    "\234\111\235\075\237\070\240\067\242\130\243\144\244" +
    "\127\245\163\246\133\247\162\250\156\251\123\252\154" +
    "\253\147\254\146\255\125\256\124\001\002\000\144\031" +
    "\ufeef\036\ufeef\037\ufeef\040\ufeef\041\ufeef\042\ufeef\043\ufeef" +
    "\044\ufeef\045\ufeef\046\ufeef\051\ufeef\114\ufeef\115\ufeef\116" +
    "\ufeef\117\ufeef\127\ufeef\130\ufeef\131\ufeef\132\ufeef\133\ufeef" +
    "\135\ufeef\137\ufeef\145\ufeef\146\ufeef\153\ufeef\156\ufeef\157" +
    "\ufeef\164\ufeef\165\ufeef\174\ufeef\175\ufeef\233\ufeef\234\ufeef" +
    "\235\ufeef\237\ufeef\240\ufeef\242\ufeef\243\ufeef\244\ufeef\245" +
    "\ufeef\246\ufeef\247\ufeef\250\ufeef\251\ufeef\252\ufeef\253\ufeef" +
    "\254\ufeef\255\ufeef\256\ufeef\001\002\000\144\031\ufeeb\036" +
    "\ufeeb\037\ufeeb\040\ufeeb\041\ufeeb\042\ufeeb\043\ufeeb\044\ufeeb" +
    "\045\ufeeb\046\ufeeb\051\ufeeb\114\ufeeb\115\ufeeb\116\ufeeb\117" +
    "\ufeeb\127\ufeeb\130\ufeeb\131\ufeeb\132\ufeeb\133\ufeeb\135\ufeeb" +
    "\137\ufeeb\145\ufeeb\146\ufeeb\153\ufeeb\156\ufeeb\157\ufeeb\164" +
    "\ufeeb\165\ufeeb\174\ufeeb\175\ufeeb\233\ufeeb\234\ufeeb\235\ufeeb" +
    "\237\ufeeb\240\ufeeb\242\ufeeb\243\ufeeb\244\ufeeb\245\ufeeb\246" +
    "\ufeeb\247\ufeeb\250\ufeeb\251\ufeeb\252\ufeeb\253\ufeeb\254\ufeeb" +
    "\255\ufeeb\256\ufeeb\001\002\000\144\031\ufeee\036\ufeee\037" +
    "\ufeee\040\ufeee\041\ufeee\042\ufeee\043\ufeee\044\ufeee\045\ufeee" +
    "\046\ufeee\051\ufeee\114\ufeee\115\ufeee\116\ufeee\117\ufeee\127" +
    "\ufeee\130\ufeee\131\ufeee\132\ufeee\133\ufeee\135\ufeee\137\ufeee" +
    "\145\ufeee\146\ufeee\153\ufeee\156\ufeee\157\ufeee\164\ufeee\165" +
    "\ufeee\174\ufeee\175\ufeee\233\ufeee\234\ufeee\235\ufeee\237\ufeee" +
    "\240\ufeee\242\ufeee\243\ufeee\244\ufeee\245\ufeee\246\ufeee\247" +
    "\ufeee\250\ufeee\251\ufeee\252\ufeee\253\ufeee\254\ufeee\255\ufeee" +
    "\256\ufeee\001\002\000\144\031\ufeec\036\ufeec\037\ufeec\040" +
    "\ufeec\041\ufeec\042\ufeec\043\ufeec\044\ufeec\045\ufeec\046\ufeec" +
    "\051\ufeec\114\ufeec\115\ufeec\116\ufeec\117\ufeec\127\ufeec\130" +
    "\ufeec\131\ufeec\132\ufeec\133\ufeec\135\ufeec\137\ufeec\145\ufeec" +
    "\146\ufeec\153\ufeec\156\ufeec\157\ufeec\164\ufeec\165\ufeec\174" +
    "\ufeec\175\ufeec\233\ufeec\234\ufeec\235\ufeec\237\ufeec\240\ufeec" +
    "\242\ufeec\243\ufeec\244\ufeec\245\ufeec\246\ufeec\247\ufeec\250" +
    "\ufeec\251\ufeec\252\ufeec\253\ufeec\254\ufeec\255\ufeec\256\ufeec" +
    "\001\002\000\130\031\045\036\064\037\102\040\046\041" +
    "\062\042\055\043\052\044\150\045\164\046\135\114\056" +
    "\115\065\116\074\117\107\127\054\130\106\131\063\132" +
    "\112\133\110\135\077\137\051\145\105\153\153\174\126" +
    "\175\141\233\066\234\111\235\075\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\001" +
    "\002\000\144\031\ufee9\036\ufee9\037\ufee9\040\ufee9\041\ufee9" +
    "\042\ufee9\043\ufee9\044\ufee9\045\ufee9\046\ufee9\051\ufee9\114" +
    "\ufee9\115\ufee9\116\ufee9\117\ufee9\127\ufee9\130\ufee9\131\ufee9" +
    "\132\ufee9\133\ufee9\135\ufee9\137\ufee9\145\ufee9\146\ufee9\153" +
    "\ufee9\156\ufee9\157\ufee9\164\ufee9\165\ufee9\174\ufee9\175\ufee9" +
    "\233\ufee9\234\ufee9\235\ufee9\237\ufee9\240\ufee9\242\ufee9\243" +
    "\ufee9\244\ufee9\245\ufee9\246\ufee9\247\ufee9\250\ufee9\251\ufee9" +
    "\252\ufee9\253\ufee9\254\ufee9\255\ufee9\256\ufee9\001\002\000" +
    "\212\002\uff8b\003\uff8b\014\uff8b\015\uff8b\016\uff8b\031\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\051\uff8b\114\uff8b\115\uff8b\116\uff8b" +
    "\117\uff8b\127\uff8b\130\uff8b\131\uff8b\132\uff8b\133\uff8b\135" +
    "\uff8b\137\uff8b\141\uff8b\143\uff8b\145\uff8b\146\uff8b\147\uff8b" +
    "\152\uff8b\153\uff8b\154\uff8b\155\uff8b\156\uff8b\157\uff8b\162" +
    "\uff8b\164\uff8b\165\uff8b\166\uff8b\167\uff8b\170\uff8b\171\uff8b" +
    "\172\uff8b\173\uff8b\174\uff8b\175\uff8b\233\uff8b\234\uff8b\235" +
    "\uff8b\237\uff8b\240\uff8b\242\uff8b\243\uff8b\244\uff8b\245\uff8b" +
    "\246\uff8b\247\uff8b\250\uff8b\251\uff8b\252\uff8b\253\uff8b\254" +
    "\uff8b\255\uff8b\256\uff8b\257\uff8b\001\002\000\006\146\uff90" +
    "\156\207\001\002\000\132\003\213\031\045\036\064\037" +
    "\102\040\046\041\062\042\055\043\052\044\150\045\164" +
    "\046\135\114\056\115\065\116\074\117\107\127\054\130" +
    "\106\131\063\132\112\133\110\135\077\137\051\145\105" +
    "\153\153\174\126\175\141\233\066\234\111\235\075\237" +
    "\070\240\067\242\130\243\144\244\127\245\163\246\133" +
    "\247\162\250\156\251\123\252\154\253\147\254\146\255" +
    "\125\256\124\001\002\000\004\146\212\001\002\000\004" +
    "\146\uff91\001\002\000\212\002\uff8a\003\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\031\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\051\uff8a\114" +
    "\uff8a\115\uff8a\116\uff8a\117\uff8a\127\uff8a\130\uff8a\131\uff8a" +
    "\132\uff8a\133\uff8a\135\uff8a\137\uff8a\141\uff8a\143\uff8a\145" +
    "\uff8a\146\uff8a\147\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a" +
    "\156\uff8a\157\uff8a\162\uff8a\164\uff8a\165\uff8a\166\uff8a\167" +
    "\uff8a\170\uff8a\171\uff8a\172\uff8a\173\uff8a\174\uff8a\175\uff8a" +
    "\233\uff8a\234\uff8a\235\uff8a\237\uff8a\240\uff8a\242\uff8a\243" +
    "\uff8a\244\uff8a\245\uff8a\246\uff8a\247\uff8a\250\uff8a\251\uff8a" +
    "\252\uff8a\253\uff8a\254\uff8a\255\uff8a\256\uff8a\257\uff8a\001" +
    "\002\000\006\146\uff8d\156\207\001\002\000\006\146\uff8f" +
    "\156\207\001\002\000\004\146\uff8e\001\002\000\004\146" +
    "\uff8c\001\002\000\144\031\ufeed\036\ufeed\037\ufeed\040\ufeed" +
    "\041\ufeed\042\ufeed\043\ufeed\044\ufeed\045\ufeed\046\ufeed\051" +
    "\ufeed\114\ufeed\115\ufeed\116\ufeed\117\ufeed\127\ufeed\130\ufeed" +
    "\131\ufeed\132\ufeed\133\ufeed\135\ufeed\137\ufeed\145\ufeed\146" +
    "\ufeed\153\ufeed\156\ufeed\157\ufeed\164\ufeed\165\ufeed\174\ufeed" +
    "\175\ufeed\233\ufeed\234\ufeed\235\ufeed\237\ufeed\240\ufeed\242" +
    "\ufeed\243\ufeed\244\ufeed\245\ufeed\246\ufeed\247\ufeed\250\ufeed" +
    "\251\ufeed\252\ufeed\253\ufeed\254\ufeed\255\ufeed\256\ufeed\001" +
    "\002\000\144\031\ufeea\036\ufeea\037\ufeea\040\ufeea\041\ufeea" +
    "\042\ufeea\043\ufeea\044\ufeea\045\ufeea\046\ufeea\051\ufeea\114" +
    "\ufeea\115\ufeea\116\ufeea\117\ufeea\127\ufeea\130\ufeea\131\ufeea" +
    "\132\ufeea\133\ufeea\135\ufeea\137\ufeea\145\ufeea\146\ufeea\153" +
    "\ufeea\156\ufeea\157\ufeea\164\ufeea\165\ufeea\174\ufeea\175\ufeea" +
    "\233\ufeea\234\ufeea\235\ufeea\237\ufeea\240\ufeea\242\ufeea\243" +
    "\ufeea\244\ufeea\245\ufeea\246\ufeea\247\ufeea\250\ufeea\251\ufeea" +
    "\252\ufeea\253\ufeea\254\ufeea\255\ufeea\256\ufeea\001\002\000" +
    "\004\160\224\001\002\000\004\241\223\001\002\000\212" +
    "\003\ufeb0\027\ufeb0\030\ufeb0\031\ufeb0\036\ufeb0\037\ufeb0\040" +
    "\ufeb0\041\ufeb0\042\ufeb0\043\ufeb0\044\ufeb0\045\ufeb0\046\ufeb0" +
    "\051\ufeb0\114\ufeb0\115\ufeb0\116\ufeb0\117\ufeb0\127\ufeb0\130" +
    "\ufeb0\131\ufeb0\132\ufeb0\133\ufeb0\135\ufeb0\137\ufeb0\141\ufeb0" +
    "\142\ufeb0\145\ufeb0\146\ufeb0\147\ufeb0\150\ufeb0\151\ufeb0\152" +
    "\ufeb0\153\ufeb0\154\ufeb0\155\ufeb0\156\ufeb0\157\ufeb0\162\ufeb0" +
    "\164\ufeb0\165\ufeb0\166\ufeb0\167\ufeb0\170\ufeb0\171\ufeb0\172" +
    "\ufeb0\173\ufeb0\174\ufeb0\175\ufeb0\233\ufeb0\234\ufeb0\235\ufeb0" +
    "\237\ufeb0\240\ufeb0\242\ufeb0\243\ufeb0\244\ufeb0\245\ufeb0\246" +
    "\ufeb0\247\ufeb0\250\ufeb0\251\ufeb0\252\ufeb0\253\ufeb0\254\ufeb0" +
    "\255\ufeb0\256\ufeb0\257\ufeb0\001\002\000\010\233\066\234" +
    "\111\235\075\001\002\000\212\003\ufeae\027\ufeae\030\ufeae" +
    "\031\ufeae\036\ufeae\037\ufeae\040\ufeae\041\ufeae\042\ufeae\043" +
    "\ufeae\044\ufeae\045\ufeae\046\ufeae\051\ufeae\114\ufeae\115\ufeae" +
    "\116\ufeae\117\ufeae\127\ufeae\130\ufeae\131\ufeae\132\ufeae\133" +
    "\ufeae\135\ufeae\137\ufeae\141\ufeae\142\ufeae\145\ufeae\146\ufeae" +
    "\147\ufeae\150\ufeae\151\ufeae\152\ufeae\153\ufeae\154\ufeae\155" +
    "\ufeae\156\ufeae\157\ufeae\162\ufeae\164\ufeae\165\ufeae\166\ufeae" +
    "\167\ufeae\170\ufeae\171\ufeae\172\ufeae\173\ufeae\174\ufeae\175" +
    "\ufeae\233\ufeae\234\ufeae\235\ufeae\237\ufeae\240\ufeae\242\ufeae" +
    "\243\ufeae\244\ufeae\245\ufeae\246\ufeae\247\ufeae\250\ufeae\251" +
    "\ufeae\252\ufeae\253\ufeae\254\ufeae\255\ufeae\256\ufeae\257\ufeae" +
    "\001\002\000\166\031\ufeda\036\ufeda\037\ufeda\040\ufeda\041" +
    "\ufeda\042\ufeda\043\ufeda\044\ufeda\045\ufeda\046\ufeda\051\ufeda" +
    "\114\ufeda\115\ufeda\116\ufeda\117\ufeda\127\ufeda\130\ufeda\131" +
    "\ufeda\132\ufeda\133\ufeda\135\ufeda\137\ufeda\141\ufeda\145\ufeda" +
    "\146\ufeda\153\ufeda\154\ufeda\156\ufeda\157\ufeda\162\ufeda\164" +
    "\ufeda\165\ufeda\166\ufeda\167\ufeda\170\ufeda\171\ufeda\172\ufeda" +
    "\173\ufeda\174\ufeda\175\ufeda\233\ufeda\234\ufeda\235\ufeda\237" +
    "\ufeda\240\ufeda\242\ufeda\243\ufeda\244\ufeda\245\ufeda\246\ufeda" +
    "\247\ufeda\250\ufeda\251\ufeda\252\ufeda\253\ufeda\254\ufeda\255" +
    "\ufeda\256\ufeda\001\002\000\166\031\ufeb2\036\ufeb2\037\ufeb2" +
    "\040\ufeb2\041\ufeb2\042\ufeb2\043\ufeb2\044\ufeb2\045\ufeb2\046" +
    "\ufeb2\051\ufeb2\114\ufeb2\115\ufeb2\116\ufeb2\117\ufeb2\127\ufeb2" +
    "\130\ufeb2\131\ufeb2\132\ufeb2\133\ufeb2\135\ufeb2\137\ufeb2\141" +
    "\ufeb2\145\ufeb2\146\ufeb2\153\ufeb2\154\ufeb2\156\ufeb2\157\ufeb2" +
    "\162\ufeb2\164\ufeb2\165\ufeb2\166\ufeb2\167\ufeb2\170\ufeb2\171" +
    "\ufeb2\172\ufeb2\173\ufeb2\174\ufeb2\175\ufeb2\233\ufeb2\234\ufeb2" +
    "\235\ufeb2\237\ufeb2\240\ufeb2\242\ufeb2\243\ufeb2\244\ufeb2\245" +
    "\ufeb2\246\ufeb2\247\ufeb2\250\ufeb2\251\ufeb2\252\ufeb2\253\ufeb2" +
    "\254\ufeb2\255\ufeb2\256\ufeb2\001\002\000\132\017\114\031" +
    "\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\114\uff92\115\uff92\116\uff92\117" +
    "\uff92\127\uff92\130\uff92\131\uff92\132\uff92\133\uff92\135\uff92" +
    "\137\uff92\145\uff92\153\uff92\174\uff92\175\uff92\233\uff92\234" +
    "\uff92\235\uff92\237\uff92\240\uff92\242\uff92\243\uff92\244\uff92" +
    "\245\uff92\246\uff92\247\uff92\250\uff92\251\uff92\252\uff92\253" +
    "\uff92\254\uff92\255\uff92\256\uff92\001\002\000\212\002\uff95" +
    "\003\uff95\014\uff95\015\uff95\016\uff95\031\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\051\uff95\114\uff95\115\uff95\116\uff95\117\uff95\127" +
    "\uff95\130\uff95\131\uff95\132\uff95\133\uff95\135\uff95\137\uff95" +
    "\141\uff95\143\uff95\145\uff95\146\uff95\147\uff95\152\uff95\153" +
    "\uff95\154\uff95\155\uff95\156\uff95\157\uff95\162\uff95\164\uff95" +
    "\165\uff95\166\uff95\167\uff95\170\uff95\171\uff95\172\uff95\173" +
    "\uff95\174\uff95\175\uff95\233\uff95\234\uff95\235\uff95\237\uff95" +
    "\240\uff95\242\uff95\243\uff95\244\uff95\245\uff95\246\uff95\247" +
    "\uff95\250\uff95\251\uff95\252\uff95\253\uff95\254\uff95\255\uff95" +
    "\256\uff95\257\uff95\001\002\000\130\031\045\036\064\037" +
    "\102\040\046\041\062\042\055\043\052\044\150\045\164" +
    "\046\135\114\056\115\065\116\074\117\107\127\054\130" +
    "\106\131\063\132\112\133\110\135\077\137\051\145\105" +
    "\153\153\174\126\175\141\233\066\234\111\235\075\237" +
    "\070\240\067\242\130\243\144\244\127\245\163\246\133" +
    "\247\162\250\156\251\123\252\154\253\147\254\146\255" +
    "\125\256\124\001\002\000\006\146\uff90\156\207\001\002" +
    "\000\004\146\235\001\002\000\212\002\uff94\003\uff94\014" +
    "\uff94\015\uff94\016\uff94\031\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\051" +
    "\uff94\114\uff94\115\uff94\116\uff94\117\uff94\127\uff94\130\uff94" +
    "\131\uff94\132\uff94\133\uff94\135\uff94\137\uff94\141\uff94\143" +
    "\uff94\145\uff94\146\uff94\147\uff94\152\uff94\153\uff94\154\uff94" +
    "\155\uff94\156\uff94\157\uff94\162\uff94\164\uff94\165\uff94\166" +
    "\uff94\167\uff94\170\uff94\171\uff94\172\uff94\173\uff94\174\uff94" +
    "\175\uff94\233\uff94\234\uff94\235\uff94\237\uff94\240\uff94\242" +
    "\uff94\243\uff94\244\uff94\245\uff94\246\uff94\247\uff94\250\uff94" +
    "\251\uff94\252\uff94\253\uff94\254\uff94\255\uff94\256\uff94\257" +
    "\uff94\001\002\000\126\031\045\036\064\037\102\040\046" +
    "\041\062\042\055\043\052\044\150\045\164\114\056\115" +
    "\065\116\074\117\107\127\054\130\106\131\063\132\112" +
    "\133\110\135\077\137\051\145\105\153\153\174\126\175" +
    "\141\233\066\234\111\235\075\237\070\240\067\242\130" +
    "\243\144\244\127\245\163\246\133\247\162\250\156\251" +
    "\123\252\154\253\147\254\146\255\125\256\124\001\002" +
    "\000\126\031\045\036\064\037\102\040\046\041\062\042" +
    "\055\043\052\044\150\045\164\114\056\115\065\116\074" +
    "\117\107\127\054\130\106\131\063\132\112\133\110\135" +
    "\077\137\051\145\105\153\153\174\126\175\141\233\066" +
    "\234\111\235\075\237\070\240\067\242\130\243\144\244" +
    "\127\245\163\246\133\247\162\250\156\251\123\252\154" +
    "\253\147\254\146\255\125\256\124\001\002\000\166\031" +
    "\ufedb\036\ufedb\037\ufedb\040\ufedb\041\ufedb\042\ufedb\043\ufedb" +
    "\044\ufedb\045\ufedb\046\ufedb\051\ufedb\114\ufedb\115\ufedb\116" +
    "\ufedb\117\ufedb\127\ufedb\130\ufedb\131\ufedb\132\ufedb\133\ufedb" +
    "\135\ufedb\137\ufedb\141\ufedb\145\ufedb\146\ufedb\153\ufedb\154" +
    "\ufedb\156\ufedb\157\ufedb\162\ufedb\164\ufedb\165\ufedb\166\ufedb" +
    "\167\ufedb\170\ufedb\171\ufedb\172\ufedb\173\ufedb\174\ufedb\175" +
    "\ufedb\233\ufedb\234\ufedb\235\ufedb\237\ufedb\240\ufedb\242\ufedb" +
    "\243\ufedb\244\ufedb\245\ufedb\246\ufedb\247\ufedb\250\ufedb\251" +
    "\ufedb\252\ufedb\253\ufedb\254\ufedb\255\ufedb\256\ufedb\001\002" +
    "\000\166\031\ufedc\036\ufedc\037\ufedc\040\ufedc\041\ufedc\042" +
    "\ufedc\043\ufedc\044\ufedc\045\ufedc\046\ufedc\051\ufedc\114\ufedc" +
    "\115\ufedc\116\ufedc\117\ufedc\127\ufedc\130\ufedc\131\ufedc\132" +
    "\ufedc\133\ufedc\135\ufedc\137\ufedc\141\ufedc\145\ufedc\146\ufedc" +
    "\153\ufedc\154\ufedc\156\ufedc\157\ufedc\162\ufedc\164\ufedc\165" +
    "\ufedc\166\ufedc\167\ufedc\170\ufedc\171\ufedc\172\ufedc\173\ufedc" +
    "\174\ufedc\175\ufedc\233\ufedc\234\ufedc\235\ufedc\237\ufedc\240" +
    "\ufedc\242\ufedc\243\ufedc\244\ufedc\245\ufedc\246\ufedc\247\ufedc" +
    "\250\ufedc\251\ufedc\252\ufedc\253\ufedc\254\ufedc\255\ufedc\256" +
    "\ufedc\001\002\000\166\031\ufed8\036\ufed8\037\ufed8\040\ufed8" +
    "\041\ufed8\042\ufed8\043\ufed8\044\ufed8\045\ufed8\046\ufed8\051" +
    "\ufed8\114\ufed8\115\ufed8\116\ufed8\117\ufed8\127\ufed8\130\ufed8" +
    "\131\ufed8\132\ufed8\133\ufed8\135\ufed8\137\ufed8\141\ufed8\145" +
    "\ufed8\146\ufed8\153\ufed8\154\ufed8\156\ufed8\157\ufed8\162\ufed8" +
    "\164\ufed8\165\ufed8\166\ufed8\167\ufed8\170\ufed8\171\ufed8\172" +
    "\ufed8\173\ufed8\174\ufed8\175\ufed8\233\ufed8\234\ufed8\235\ufed8" +
    "\237\ufed8\240\ufed8\242\ufed8\243\ufed8\244\ufed8\245\ufed8\246" +
    "\ufed8\247\ufed8\250\ufed8\251\ufed8\252\ufed8\253\ufed8\254\ufed8" +
    "\255\ufed8\256\ufed8\001\002\000\166\031\ufede\036\ufede\037" +
    "\ufede\040\ufede\041\ufede\042\ufede\043\ufede\044\ufede\045\ufede" +
    "\046\ufede\051\ufede\114\ufede\115\ufede\116\ufede\117\ufede\127" +
    "\ufede\130\ufede\131\ufede\132\ufede\133\ufede\135\ufede\137\ufede" +
    "\141\ufede\145\ufede\146\ufede\153\ufede\154\253\156\ufede\157" +
    "\ufede\162\254\164\ufede\165\ufede\166\ufede\167\ufede\170\ufede" +
    "\171\ufede\172\ufede\173\ufede\174\ufede\175\ufede\233\ufede\234" +
    "\ufede\235\ufede\237\ufede\240\ufede\242\ufede\243\ufede\244\ufede" +
    "\245\ufede\246\ufede\247\ufede\250\ufede\251\ufede\252\ufede\253" +
    "\ufede\254\ufede\255\ufede\256\ufede\001\002\000\126\031\045" +
    "\036\064\037\102\040\046\041\062\042\055\043\052\044" +
    "\150\045\164\114\056\115\065\116\074\117\107\127\054" +
    "\130\106\131\063\132\112\133\110\135\077\137\051\145" +
    "\105\153\153\174\126\175\141\233\066\234\111\235\075" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\166\031\ufee5\036\ufee5\037" +
    "\ufee5\040\ufee5\041\ufee5\042\ufee5\043\ufee5\044\ufee5\045\ufee5" +
    "\046\ufee5\051\ufee5\114\ufee5\115\ufee5\116\ufee5\117\ufee5\127" +
    "\ufee5\130\ufee5\131\ufee5\132\ufee5\133\ufee5\135\ufee5\137\ufee5" +
    "\141\ufee5\145\ufee5\146\ufee5\153\ufee5\154\ufee5\156\ufee5\157" +
    "\ufee5\162\ufee5\164\ufee5\165\ufee5\166\ufee5\167\ufee5\170\ufee5" +
    "\171\ufee5\172\ufee5\173\ufee5\174\ufee5\175\ufee5\233\ufee5\234" +
    "\ufee5\235\ufee5\237\ufee5\240\ufee5\242\ufee5\243\ufee5\244\ufee5" +
    "\245\ufee5\246\ufee5\247\ufee5\250\ufee5\251\ufee5\252\ufee5\253" +
    "\ufee5\254\ufee5\255\ufee5\256\ufee5\001\002\000\166\031\ufee6" +
    "\036\ufee6\037\ufee6\040\ufee6\041\ufee6\042\ufee6\043\ufee6\044" +
    "\ufee6\045\ufee6\046\ufee6\051\ufee6\114\ufee6\115\ufee6\116\ufee6" +
    "\117\ufee6\127\ufee6\130\ufee6\131\ufee6\132\ufee6\133\ufee6\135" +
    "\ufee6\137\ufee6\141\ufee6\145\ufee6\146\ufee6\153\ufee6\154\ufee6" +
    "\156\ufee6\157\ufee6\162\ufee6\164\ufee6\165\ufee6\166\ufee6\167" +
    "\ufee6\170\ufee6\171\ufee6\172\ufee6\173\ufee6\174\ufee6\175\ufee6" +
    "\233\ufee6\234\ufee6\235\ufee6\237\ufee6\240\ufee6\242\ufee6\243" +
    "\ufee6\244\ufee6\245\ufee6\246\ufee6\247\ufee6\250\ufee6\251\ufee6" +
    "\252\ufee6\253\ufee6\254\ufee6\255\ufee6\256\ufee6\001\002\000" +
    "\166\031\ufee4\036\ufee4\037\ufee4\040\ufee4\041\ufee4\042\ufee4" +
    "\043\ufee4\044\ufee4\045\ufee4\046\ufee4\051\ufee4\114\ufee4\115" +
    "\ufee4\116\ufee4\117\ufee4\127\ufee4\130\ufee4\131\ufee4\132\ufee4" +
    "\133\ufee4\135\ufee4\137\ufee4\141\ufee4\145\ufee4\146\ufee4\153" +
    "\ufee4\154\ufee4\156\ufee4\157\ufee4\162\ufee4\164\ufee4\165\ufee4" +
    "\166\ufee4\167\ufee4\170\ufee4\171\ufee4\172\ufee4\173\ufee4\174" +
    "\ufee4\175\ufee4\233\ufee4\234\ufee4\235\ufee4\237\ufee4\240\ufee4" +
    "\242\ufee4\243\ufee4\244\ufee4\245\ufee4\246\ufee4\247\ufee4\250" +
    "\ufee4\251\ufee4\252\ufee4\253\ufee4\254\ufee4\255\ufee4\256\ufee4" +
    "\001\002\000\126\031\045\036\064\037\102\040\046\041" +
    "\062\042\055\043\052\044\150\045\164\114\056\115\065" +
    "\116\074\117\107\127\054\130\106\131\063\132\112\133" +
    "\110\135\077\137\051\145\105\153\153\174\126\175\141" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\001\002\000" +
    "\166\031\ufee0\036\ufee0\037\ufee0\040\ufee0\041\ufee0\042\ufee0" +
    "\043\ufee0\044\ufee0\045\ufee0\046\ufee0\051\ufee0\114\ufee0\115" +
    "\ufee0\116\ufee0\117\ufee0\127\ufee0\130\ufee0\131\ufee0\132\ufee0" +
    "\133\ufee0\135\ufee0\137\ufee0\141\ufee0\145\ufee0\146\ufee0\153" +
    "\ufee0\154\236\156\ufee0\157\ufee0\162\237\164\ufee0\165\ufee0" +
    "\166\ufee0\167\ufee0\170\ufee0\171\ufee0\172\ufee0\173\ufee0\174" +
    "\ufee0\175\ufee0\233\ufee0\234\ufee0\235\ufee0\237\ufee0\240\ufee0" +
    "\242\ufee0\243\ufee0\244\ufee0\245\ufee0\246\ufee0\247\ufee0\250" +
    "\ufee0\251\ufee0\252\ufee0\253\ufee0\254\ufee0\255\ufee0\256\ufee0" +
    "\001\002\000\166\031\ufedf\036\ufedf\037\ufedf\040\ufedf\041" +
    "\ufedf\042\ufedf\043\ufedf\044\ufedf\045\ufedf\046\ufedf\051\ufedf" +
    "\114\ufedf\115\ufedf\116\ufedf\117\ufedf\127\ufedf\130\ufedf\131" +
    "\ufedf\132\ufedf\133\ufedf\135\ufedf\137\ufedf\141\ufedf\145\ufedf" +
    "\146\ufedf\153\ufedf\154\236\156\ufedf\157\ufedf\162\237\164" +
    "\ufedf\165\ufedf\166\ufedf\167\ufedf\170\ufedf\171\ufedf\172\ufedf" +
    "\173\ufedf\174\ufedf\175\ufedf\233\ufedf\234\ufedf\235\ufedf\237" +
    "\ufedf\240\ufedf\242\ufedf\243\ufedf\244\ufedf\245\ufedf\246\ufedf" +
    "\247\ufedf\250\ufedf\251\ufedf\252\ufedf\253\ufedf\254\ufedf\255" +
    "\ufedf\256\ufedf\001\002\000\126\031\045\036\064\037\102" +
    "\040\046\041\062\042\055\043\052\044\150\045\164\114" +
    "\056\115\065\116\074\117\107\127\054\130\106\131\063" +
    "\132\112\133\110\135\077\137\051\145\105\153\153\174" +
    "\126\175\141\233\066\234\111\235\075\237\070\240\067" +
    "\242\130\243\144\244\127\245\163\246\133\247\162\250" +
    "\156\251\123\252\154\253\147\254\146\255\125\256\124" +
    "\001\002\000\126\031\045\036\064\037\102\040\046\041" +
    "\062\042\055\043\052\044\150\045\164\114\056\115\065" +
    "\116\074\117\107\127\054\130\106\131\063\132\112\133" +
    "\110\135\077\137\051\145\105\153\153\174\126\175\141" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\001\002\000" +
    "\166\031\ufee2\036\ufee2\037\ufee2\040\ufee2\041\ufee2\042\ufee2" +
    "\043\ufee2\044\ufee2\045\ufee2\046\ufee2\051\ufee2\114\ufee2\115" +
    "\ufee2\116\ufee2\117\ufee2\127\ufee2\130\ufee2\131\ufee2\132\ufee2" +
    "\133\ufee2\135\ufee2\137\ufee2\141\ufee2\145\ufee2\146\ufee2\153" +
    "\ufee2\154\ufee2\156\ufee2\157\ufee2\162\ufee2\164\ufee2\165\ufee2" +
    "\166\ufee2\167\ufee2\170\ufee2\171\ufee2\172\ufee2\173\ufee2\174" +
    "\ufee2\175\ufee2\233\ufee2\234\ufee2\235\ufee2\237\ufee2\240\ufee2" +
    "\242\ufee2\243\ufee2\244\ufee2\245\ufee2\246\ufee2\247\ufee2\250" +
    "\ufee2\251\ufee2\252\ufee2\253\ufee2\254\ufee2\255\ufee2\256\ufee2" +
    "\001\002\000\166\031\ufee3\036\ufee3\037\ufee3\040\ufee3\041" +
    "\ufee3\042\ufee3\043\ufee3\044\ufee3\045\ufee3\046\ufee3\051\ufee3" +
    "\114\ufee3\115\ufee3\116\ufee3\117\ufee3\127\ufee3\130\ufee3\131" +
    "\ufee3\132\ufee3\133\ufee3\135\ufee3\137\ufee3\141\ufee3\145\ufee3" +
    "\146\ufee3\153\ufee3\154\ufee3\156\ufee3\157\ufee3\162\ufee3\164" +
    "\ufee3\165\ufee3\166\ufee3\167\ufee3\170\ufee3\171\ufee3\172\ufee3" +
    "\173\ufee3\174\ufee3\175\ufee3\233\ufee3\234\ufee3\235\ufee3\237" +
    "\ufee3\240\ufee3\242\ufee3\243\ufee3\244\ufee3\245\ufee3\246\ufee3" +
    "\247\ufee3\250\ufee3\251\ufee3\252\ufee3\253\ufee3\254\ufee3\255" +
    "\ufee3\256\ufee3\001\002\000\006\145\203\257\205\001\002" +
    "\000\144\031\ufee8\036\ufee8\037\ufee8\040\ufee8\041\ufee8\042" +
    "\ufee8\043\ufee8\044\ufee8\045\ufee8\046\ufee8\051\ufee8\114\ufee8" +
    "\115\ufee8\116\ufee8\117\ufee8\127\ufee8\130\ufee8\131\ufee8\132" +
    "\ufee8\133\ufee8\135\ufee8\137\ufee8\145\ufee8\146\ufee8\153\ufee8" +
    "\156\ufee8\157\ufee8\164\ufee8\165\ufee8\174\ufee8\175\ufee8\233" +
    "\ufee8\234\ufee8\235\ufee8\237\ufee8\240\ufee8\242\ufee8\243\ufee8" +
    "\244\ufee8\245\ufee8\246\ufee8\247\ufee8\250\ufee8\251\ufee8\252" +
    "\ufee8\253\ufee8\254\ufee8\255\ufee8\256\ufee8\001\002\000\166" +
    "\031\ufed9\036\ufed9\037\ufed9\040\ufed9\041\ufed9\042\ufed9\043" +
    "\ufed9\044\ufed9\045\ufed9\046\ufed9\051\ufed9\114\ufed9\115\ufed9" +
    "\116\ufed9\117\ufed9\127\ufed9\130\ufed9\131\ufed9\132\ufed9\133" +
    "\ufed9\135\ufed9\137\ufed9\141\ufed9\145\ufed9\146\ufed9\153\ufed9" +
    "\154\ufed9\156\ufed9\157\ufed9\162\ufed9\164\ufed9\165\ufed9\166" +
    "\ufed9\167\ufed9\170\ufed9\171\ufed9\172\ufed9\173\ufed9\174\ufed9" +
    "\175\ufed9\233\ufed9\234\ufed9\235\ufed9\237\ufed9\240\ufed9\242" +
    "\ufed9\243\ufed9\244\ufed9\245\ufed9\246\ufed9\247\ufed9\250\ufed9" +
    "\251\ufed9\252\ufed9\253\ufed9\254\ufed9\255\ufed9\256\ufed9\001" +
    "\002\000\004\164\267\001\002\000\012\051\ufefc\146\ufefc" +
    "\156\ufefc\157\ufefc\001\002\000\130\031\045\036\064\037" +
    "\102\040\046\041\062\042\055\043\052\044\150\045\164" +
    "\046\135\114\056\115\065\116\074\117\107\127\054\130" +
    "\106\131\063\132\112\133\110\135\077\137\051\145\105" +
    "\153\153\174\126\175\141\233\066\234\111\235\075\237" +
    "\070\240\067\242\130\243\144\244\127\245\163\246\133" +
    "\247\162\250\156\251\123\252\154\253\147\254\146\255" +
    "\125\256\124\001\002\000\012\051\ufefd\146\ufefd\156\ufefd" +
    "\157\ufefd\001\002\000\012\051\ufefa\146\ufefa\156\ufefa\157" +
    "\ufefa\001\002\000\132\031\045\036\064\037\102\040\046" +
    "\041\062\042\055\043\052\044\150\045\164\046\135\114" +
    "\056\115\065\116\074\117\107\127\054\130\106\131\063" +
    "\132\112\133\110\135\077\137\051\145\105\153\153\164" +
    "\264\174\126\175\141\233\066\234\111\235\075\237\070" +
    "\240\067\242\130\243\144\244\127\245\163\246\133\247" +
    "\162\250\156\251\123\252\154\253\147\254\146\255\125" +
    "\256\124\001\002\000\012\051\ufef9\146\ufef9\156\ufef9\157" +
    "\ufef9\001\002\000\132\003\275\031\045\036\064\037\102" +
    "\040\046\041\062\042\055\043\052\044\150\045\164\046" +
    "\135\114\056\115\065\116\074\117\107\127\054\130\106" +
    "\131\063\132\112\133\110\135\077\137\051\145\105\153" +
    "\153\174\126\175\141\233\066\234\111\235\075\237\070" +
    "\240\067\242\130\243\144\244\127\245\163\246\133\247" +
    "\162\250\156\251\123\252\154\253\147\254\146\255\125" +
    "\256\124\001\002\000\142\031\ufef8\036\ufef8\037\ufef8\040" +
    "\ufef8\041\ufef8\042\ufef8\043\ufef8\044\ufef8\045\ufef8\046\ufef8" +
    "\051\ufef8\114\ufef8\115\ufef8\116\ufef8\117\ufef8\127\ufef8\130" +
    "\ufef8\131\ufef8\132\ufef8\133\ufef8\135\ufef8\137\ufef8\145\ufef8" +
    "\146\ufef8\153\ufef8\156\ufef8\157\ufef8\164\ufef8\174\ufef8\175" +
    "\ufef8\233\ufef8\234\ufef8\235\ufef8\237\ufef8\240\ufef8\242\ufef8" +
    "\243\ufef8\244\ufef8\245\ufef8\246\ufef8\247\ufef8\250\ufef8\251" +
    "\ufef8\252\ufef8\253\ufef8\254\ufef8\255\ufef8\256\ufef8\001\002" +
    "\000\142\031\ufef7\036\ufef7\037\ufef7\040\ufef7\041\ufef7\042" +
    "\ufef7\043\ufef7\044\ufef7\045\ufef7\046\ufef7\051\ufef7\114\ufef7" +
    "\115\ufef7\116\ufef7\117\ufef7\127\ufef7\130\ufef7\131\ufef7\132" +
    "\ufef7\133\ufef7\135\ufef7\137\ufef7\145\ufef7\146\ufef7\153\ufef7" +
    "\156\ufef7\157\ufef7\164\ufef7\174\ufef7\175\ufef7\233\ufef7\234" +
    "\ufef7\235\ufef7\237\ufef7\240\ufef7\242\ufef7\243\ufef7\244\ufef7" +
    "\245\ufef7\246\ufef7\247\ufef7\250\ufef7\251\ufef7\252\ufef7\253" +
    "\ufef7\254\ufef7\255\ufef7\256\ufef7\001\002\000\144\031\ufef5" +
    "\036\ufef5\037\ufef5\040\ufef5\041\ufef5\042\ufef5\043\ufef5\044" +
    "\ufef5\045\ufef5\046\ufef5\051\ufef5\114\ufef5\115\ufef5\116\ufef5" +
    "\117\ufef5\127\ufef5\130\ufef5\131\ufef5\132\ufef5\133\ufef5\135" +
    "\ufef5\137\ufef5\145\ufef5\146\ufef5\153\ufef5\156\ufef5\157\ufef5" +
    "\164\ufef5\165\271\174\ufef5\175\ufef5\233\ufef5\234\ufef5\235" +
    "\ufef5\237\ufef5\240\ufef5\242\ufef5\243\ufef5\244\ufef5\245\ufef5" +
    "\246\ufef5\247\ufef5\250\ufef5\251\ufef5\252\ufef5\253\ufef5\254" +
    "\ufef5\255\ufef5\256\ufef5\001\002\000\144\031\ufef3\036\ufef3" +
    "\037\ufef3\040\ufef3\041\ufef3\042\ufef3\043\ufef3\044\ufef3\045" +
    "\ufef3\046\ufef3\051\ufef3\114\ufef3\115\ufef3\116\ufef3\117\ufef3" +
    "\127\ufef3\130\ufef3\131\ufef3\132\ufef3\133\ufef3\135\ufef3\137" +
    "\ufef3\145\ufef3\146\ufef3\153\ufef3\156\ufef3\157\ufef3\164\ufef3" +
    "\165\271\174\ufef3\175\ufef3\233\ufef3\234\ufef3\235\ufef3\237" +
    "\ufef3\240\ufef3\242\ufef3\243\ufef3\244\ufef3\245\ufef3\246\ufef3" +
    "\247\ufef3\250\ufef3\251\ufef3\252\ufef3\253\ufef3\254\ufef3\255" +
    "\ufef3\256\ufef3\001\002\000\142\031\ufef2\036\ufef2\037\ufef2" +
    "\040\ufef2\041\ufef2\042\ufef2\043\ufef2\044\ufef2\045\ufef2\046" +
    "\ufef2\051\ufef2\114\ufef2\115\ufef2\116\ufef2\117\ufef2\127\ufef2" +
    "\130\ufef2\131\ufef2\132\ufef2\133\ufef2\135\ufef2\137\ufef2\145" +
    "\ufef2\146\ufef2\153\ufef2\156\ufef2\157\ufef2\164\ufef2\174\ufef2" +
    "\175\ufef2\233\ufef2\234\ufef2\235\ufef2\237\ufef2\240\ufef2\242" +
    "\ufef2\243\ufef2\244\ufef2\245\ufef2\246\ufef2\247\ufef2\250\ufef2" +
    "\251\ufef2\252\ufef2\253\ufef2\254\ufef2\255\ufef2\256\ufef2\001" +
    "\002\000\142\031\ufef4\036\ufef4\037\ufef4\040\ufef4\041\ufef4" +
    "\042\ufef4\043\ufef4\044\ufef4\045\ufef4\046\ufef4\051\ufef4\114" +
    "\ufef4\115\ufef4\116\ufef4\117\ufef4\127\ufef4\130\ufef4\131\ufef4" +
    "\132\ufef4\133\ufef4\135\ufef4\137\ufef4\145\ufef4\146\ufef4\153" +
    "\ufef4\156\ufef4\157\ufef4\164\ufef4\174\ufef4\175\ufef4\233\ufef4" +
    "\234\ufef4\235\ufef4\237\ufef4\240\ufef4\242\ufef4\243\ufef4\244" +
    "\ufef4\245\ufef4\246\ufef4\247\ufef4\250\ufef4\251\ufef4\252\ufef4" +
    "\253\ufef4\254\ufef4\255\ufef4\256\ufef4\001\002\000\134\017" +
    "\114\031\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\114\uff92\115\uff92\116" +
    "\uff92\117\uff92\127\uff92\130\uff92\131\uff92\132\uff92\133\uff92" +
    "\135\uff92\137\uff92\145\uff92\153\uff92\154\uff92\174\uff92\175" +
    "\uff92\233\uff92\234\uff92\235\uff92\237\uff92\240\uff92\242\uff92" +
    "\243\uff92\244\uff92\245\uff92\246\uff92\247\uff92\250\uff92\251" +
    "\uff92\252\uff92\253\uff92\254\uff92\255\uff92\256\uff92\001\002" +
    "\000\132\031\045\036\064\037\102\040\046\041\062\042" +
    "\055\043\052\044\150\045\164\046\135\114\056\115\065" +
    "\116\074\117\107\127\054\130\106\131\063\132\112\133" +
    "\110\135\077\137\051\145\105\153\153\154\302\174\126" +
    "\175\141\233\066\234\111\235\075\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\001" +
    "\002\000\004\146\305\001\002\000\004\146\304\001\002" +
    "\000\212\002\ufeba\003\ufeba\014\ufeba\015\ufeba\016\ufeba\031" +
    "\ufeba\036\ufeba\037\ufeba\040\ufeba\041\ufeba\042\ufeba\043\ufeba" +
    "\044\ufeba\045\ufeba\046\ufeba\051\ufeba\114\ufeba\115\ufeba\116" +
    "\ufeba\117\ufeba\127\ufeba\130\ufeba\131\ufeba\132\ufeba\133\ufeba" +
    "\135\ufeba\137\ufeba\141\ufeba\143\ufeba\145\ufeba\146\ufeba\147" +
    "\ufeba\152\ufeba\153\ufeba\154\ufeba\155\ufeba\156\ufeba\157\ufeba" +
    "\162\ufeba\164\ufeba\165\ufeba\166\ufeba\167\ufeba\170\ufeba\171" +
    "\ufeba\172\ufeba\173\ufeba\174\ufeba\175\ufeba\233\ufeba\234\ufeba" +
    "\235\ufeba\237\ufeba\240\ufeba\242\ufeba\243\ufeba\244\ufeba\245" +
    "\ufeba\246\ufeba\247\ufeba\250\ufeba\251\ufeba\252\ufeba\253\ufeba" +
    "\254\ufeba\255\ufeba\256\ufeba\257\ufeba\001\002\000\212\002" +
    "\ufebb\003\ufebb\014\ufebb\015\ufebb\016\ufebb\031\ufebb\036\ufebb" +
    "\037\ufebb\040\ufebb\041\ufebb\042\ufebb\043\ufebb\044\ufebb\045" +
    "\ufebb\046\ufebb\051\ufebb\114\ufebb\115\ufebb\116\ufebb\117\ufebb" +
    "\127\ufebb\130\ufebb\131\ufebb\132\ufebb\133\ufebb\135\ufebb\137" +
    "\ufebb\141\ufebb\143\ufebb\145\ufebb\146\ufebb\147\ufebb\152\ufebb" +
    "\153\ufebb\154\ufebb\155\ufebb\156\ufebb\157\ufebb\162\ufebb\164" +
    "\ufebb\165\ufebb\166\ufebb\167\ufebb\170\ufebb\171\ufebb\172\ufebb" +
    "\173\ufebb\174\ufebb\175\ufebb\233\ufebb\234\ufebb\235\ufebb\237" +
    "\ufebb\240\ufebb\242\ufebb\243\ufebb\244\ufebb\245\ufebb\246\ufebb" +
    "\247\ufebb\250\ufebb\251\ufebb\252\ufebb\253\ufebb\254\ufebb\255" +
    "\ufebb\256\ufebb\257\ufebb\001\002\000\130\031\045\036\064" +
    "\037\102\040\046\041\062\042\055\043\052\044\150\045" +
    "\164\046\135\114\056\115\065\116\074\117\107\127\054" +
    "\130\106\131\063\132\112\133\110\135\077\137\051\145" +
    "\105\153\153\174\126\175\141\233\066\234\111\235\075" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\004\146\310\001\002\000" +
    "\212\002\ufec3\003\ufec3\014\ufec3\015\ufec3\016\ufec3\031\ufec3" +
    "\036\ufec3\037\ufec3\040\ufec3\041\ufec3\042\ufec3\043\ufec3\044" +
    "\ufec3\045\ufec3\046\ufec3\051\ufec3\114\ufec3\115\ufec3\116\ufec3" +
    "\117\ufec3\127\ufec3\130\ufec3\131\ufec3\132\ufec3\133\ufec3\135" +
    "\ufec3\137\ufec3\141\ufec3\143\ufec3\145\ufec3\146\ufec3\147\ufec3" +
    "\152\ufec3\153\ufec3\154\ufec3\155\ufec3\156\ufec3\157\ufec3\162" +
    "\ufec3\164\ufec3\165\ufec3\166\ufec3\167\ufec3\170\ufec3\171\ufec3" +
    "\172\ufec3\173\ufec3\174\ufec3\175\ufec3\233\ufec3\234\ufec3\235" +
    "\ufec3\237\ufec3\240\ufec3\242\ufec3\243\ufec3\244\ufec3\245\ufec3" +
    "\246\ufec3\247\ufec3\250\ufec3\251\ufec3\252\ufec3\253\ufec3\254" +
    "\ufec3\255\ufec3\256\ufec3\257\ufec3\001\002\000\132\017\114" +
    "\031\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\114\uff92\115\uff92\116\uff92" +
    "\117\uff92\127\uff92\130\uff92\131\uff92\132\uff92\133\uff92\135" +
    "\uff92\137\uff92\145\uff92\153\uff92\174\uff92\175\uff92\233\uff92" +
    "\234\uff92\235\uff92\237\uff92\240\uff92\242\uff92\243\uff92\244" +
    "\uff92\245\uff92\246\uff92\247\uff92\250\uff92\251\uff92\252\uff92" +
    "\253\uff92\254\uff92\255\uff92\256\uff92\001\002\000\130\031" +
    "\045\036\064\037\102\040\046\041\062\042\055\043\052" +
    "\044\150\045\164\046\135\114\056\115\065\116\074\117" +
    "\107\127\054\130\106\131\063\132\112\133\110\135\077" +
    "\137\051\145\105\153\153\174\126\175\141\233\066\234" +
    "\111\235\075\237\070\240\067\242\130\243\144\244\127" +
    "\245\163\246\133\247\162\250\156\251\123\252\154\253" +
    "\147\254\146\255\125\256\124\001\002\000\004\146\314" +
    "\001\002\000\212\002\ufeb9\003\ufeb9\014\ufeb9\015\ufeb9\016" +
    "\ufeb9\031\ufeb9\036\ufeb9\037\ufeb9\040\ufeb9\041\ufeb9\042\ufeb9" +
    "\043\ufeb9\044\ufeb9\045\ufeb9\046\ufeb9\051\ufeb9\114\ufeb9\115" +
    "\ufeb9\116\ufeb9\117\ufeb9\127\ufeb9\130\ufeb9\131\ufeb9\132\ufeb9" +
    "\133\ufeb9\135\ufeb9\137\ufeb9\141\ufeb9\143\ufeb9\145\ufeb9\146" +
    "\ufeb9\147\ufeb9\152\ufeb9\153\ufeb9\154\ufeb9\155\ufeb9\156\ufeb9" +
    "\157\ufeb9\162\ufeb9\164\ufeb9\165\ufeb9\166\ufeb9\167\ufeb9\170" +
    "\ufeb9\171\ufeb9\172\ufeb9\173\ufeb9\174\ufeb9\175\ufeb9\233\ufeb9" +
    "\234\ufeb9\235\ufeb9\237\ufeb9\240\ufeb9\242\ufeb9\243\ufeb9\244" +
    "\ufeb9\245\ufeb9\246\ufeb9\247\ufeb9\250\ufeb9\251\ufeb9\252\ufeb9" +
    "\253\ufeb9\254\ufeb9\255\ufeb9\256\ufeb9\257\ufeb9\001\002\000" +
    "\004\146\316\001\002\000\212\002\ufecf\003\ufecf\014\ufecf" +
    "\015\ufecf\016\ufecf\031\ufecf\036\ufecf\037\ufecf\040\ufecf\041" +
    "\ufecf\042\ufecf\043\ufecf\044\ufecf\045\ufecf\046\ufecf\051\ufecf" +
    "\114\ufecf\115\ufecf\116\ufecf\117\ufecf\127\ufecf\130\ufecf\131" +
    "\ufecf\132\ufecf\133\ufecf\135\ufecf\137\ufecf\141\ufecf\143\ufecf" +
    "\145\ufecf\146\ufecf\147\ufecf\152\ufecf\153\ufecf\154\ufecf\155" +
    "\ufecf\156\ufecf\157\ufecf\162\ufecf\164\ufecf\165\ufecf\166\ufecf" +
    "\167\ufecf\170\ufecf\171\ufecf\172\ufecf\173\ufecf\174\ufecf\175" +
    "\ufecf\233\ufecf\234\ufecf\235\ufecf\237\ufecf\240\ufecf\242\ufecf" +
    "\243\ufecf\244\ufecf\245\ufecf\246\ufecf\247\ufecf\250\ufecf\251" +
    "\ufecf\252\ufecf\253\ufecf\254\ufecf\255\ufecf\256\ufecf\257\ufecf" +
    "\001\002\000\130\031\045\036\064\037\102\040\046\041" +
    "\062\042\055\043\052\044\150\045\164\046\135\114\056" +
    "\115\065\116\074\117\107\127\054\130\106\131\063\132" +
    "\112\133\110\135\077\137\051\145\105\153\153\174\126" +
    "\175\141\233\066\234\111\235\075\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\001" +
    "\002\000\004\146\321\001\002\000\212\002\ufec6\003\ufec6" +
    "\014\ufec6\015\ufec6\016\ufec6\031\ufec6\036\ufec6\037\ufec6\040" +
    "\ufec6\041\ufec6\042\ufec6\043\ufec6\044\ufec6\045\ufec6\046\ufec6" +
    "\051\ufec6\114\ufec6\115\ufec6\116\ufec6\117\ufec6\127\ufec6\130" +
    "\ufec6\131\ufec6\132\ufec6\133\ufec6\135\ufec6\137\ufec6\141\ufec6" +
    "\143\ufec6\145\ufec6\146\ufec6\147\ufec6\152\ufec6\153\ufec6\154" +
    "\ufec6\155\ufec6\156\ufec6\157\ufec6\162\ufec6\164\ufec6\165\ufec6" +
    "\166\ufec6\167\ufec6\170\ufec6\171\ufec6\172\ufec6\173\ufec6\174" +
    "\ufec6\175\ufec6\233\ufec6\234\ufec6\235\ufec6\237\ufec6\240\ufec6" +
    "\242\ufec6\243\ufec6\244\ufec6\245\ufec6\246\ufec6\247\ufec6\250" +
    "\ufec6\251\ufec6\252\ufec6\253\ufec6\254\ufec6\255\ufec6\256\ufec6" +
    "\257\ufec6\001\002\000\100\002\uffc2\003\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\031\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\114\uffc2\115\uffc2\116\uffc2\117\uffc2\127" +
    "\uffc2\130\uffc2\131\uffc2\132\uffc2\133\uffc2\135\uffc2\137\uffc2" +
    "\143\uffc2\145\uffc2\152\uffc2\233\uffc2\234\uffc2\235\uffc2\237" +
    "\uffc2\240\uffc2\001\002\000\100\002\uffc6\003\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\031\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6" +
    "\127\uffc6\130\uffc6\131\uffc6\132\uffc6\133\uffc6\135\uffc6\137" +
    "\uffc6\143\uffc6\145\uffc6\152\uffc6\233\uffc6\234\uffc6\235\uffc6" +
    "\237\uffc6\240\uffc6\001\002\000\132\017\114\031\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\114\uff92\115\uff92\116\uff92\117\uff92\127" +
    "\uff92\130\uff92\131\uff92\132\uff92\133\uff92\135\uff92\137\uff92" +
    "\145\uff92\153\uff92\174\uff92\175\uff92\233\uff92\234\uff92\235" +
    "\uff92\237\uff92\240\uff92\242\uff92\243\uff92\244\uff92\245\uff92" +
    "\246\uff92\247\uff92\250\uff92\251\uff92\252\uff92\253\uff92\254" +
    "\uff92\255\uff92\256\uff92\001\002\000\130\031\045\036\064" +
    "\037\102\040\046\041\062\042\055\043\052\044\150\045" +
    "\164\046\135\114\056\115\065\116\074\117\107\127\054" +
    "\130\106\131\063\132\112\133\110\135\077\137\051\145" +
    "\105\153\153\174\126\175\141\233\066\234\111\235\075" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\004\146\327\001\002\000" +
    "\212\002\ufeb6\003\ufeb6\014\ufeb6\015\ufeb6\016\ufeb6\031\ufeb6" +
    "\036\ufeb6\037\ufeb6\040\ufeb6\041\ufeb6\042\ufeb6\043\ufeb6\044" +
    "\ufeb6\045\ufeb6\046\ufeb6\051\ufeb6\114\ufeb6\115\ufeb6\116\ufeb6" +
    "\117\ufeb6\127\ufeb6\130\ufeb6\131\ufeb6\132\ufeb6\133\ufeb6\135" +
    "\ufeb6\137\ufeb6\141\ufeb6\143\ufeb6\145\ufeb6\146\ufeb6\147\ufeb6" +
    "\152\ufeb6\153\ufeb6\154\ufeb6\155\ufeb6\156\ufeb6\157\ufeb6\162" +
    "\ufeb6\164\ufeb6\165\ufeb6\166\ufeb6\167\ufeb6\170\ufeb6\171\ufeb6" +
    "\172\ufeb6\173\ufeb6\174\ufeb6\175\ufeb6\233\ufeb6\234\ufeb6\235" +
    "\ufeb6\237\ufeb6\240\ufeb6\242\ufeb6\243\ufeb6\244\ufeb6\245\ufeb6" +
    "\246\ufeb6\247\ufeb6\250\ufeb6\251\ufeb6\252\ufeb6\253\ufeb6\254" +
    "\ufeb6\255\ufeb6\256\ufeb6\257\ufeb6\001\002\000\014\002\uffc7" +
    "\003\uffc7\015\uffc7\016\uffc7\152\uffc7\001\002\000\130\031" +
    "\045\036\064\037\102\040\046\041\062\042\055\043\052" +
    "\044\150\045\164\046\135\114\056\115\065\116\074\117" +
    "\107\127\054\130\106\131\063\132\112\133\110\135\077" +
    "\137\051\145\105\153\153\174\126\175\141\233\066\234" +
    "\111\235\075\237\070\240\067\242\130\243\144\244\127" +
    "\245\163\246\133\247\162\250\156\251\123\252\154\253" +
    "\147\254\146\255\125\256\124\001\002\000\004\156\333" +
    "\001\002\000\130\031\045\036\064\037\102\040\046\041" +
    "\062\042\055\043\052\044\150\045\164\046\135\114\056" +
    "\115\065\116\074\117\107\127\054\130\106\131\063\132" +
    "\112\133\110\135\077\137\051\145\105\153\153\174\126" +
    "\175\141\233\066\234\111\235\075\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\001" +
    "\002\000\004\146\335\001\002\000\212\002\ufeca\003\ufeca" +
    "\014\ufeca\015\ufeca\016\ufeca\031\ufeca\036\ufeca\037\ufeca\040" +
    "\ufeca\041\ufeca\042\ufeca\043\ufeca\044\ufeca\045\ufeca\046\ufeca" +
    "\051\ufeca\114\ufeca\115\ufeca\116\ufeca\117\ufeca\127\ufeca\130" +
    "\ufeca\131\ufeca\132\ufeca\133\ufeca\135\ufeca\137\ufeca\141\ufeca" +
    "\143\ufeca\145\ufeca\146\ufeca\147\ufeca\152\ufeca\153\ufeca\154" +
    "\ufeca\155\ufeca\156\ufeca\157\ufeca\162\ufeca\164\ufeca\165\ufeca" +
    "\166\ufeca\167\ufeca\170\ufeca\171\ufeca\172\ufeca\173\ufeca\174" +
    "\ufeca\175\ufeca\233\ufeca\234\ufeca\235\ufeca\237\ufeca\240\ufeca" +
    "\242\ufeca\243\ufeca\244\ufeca\245\ufeca\246\ufeca\247\ufeca\250" +
    "\ufeca\251\ufeca\252\ufeca\253\ufeca\254\ufeca\255\ufeca\256\ufeca" +
    "\257\ufeca\001\002\000\144\002\uff96\003\uff96\014\uff96\015" +
    "\uff96\016\uff96\031\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\045\uff96\114\uff96\115\uff96\116" +
    "\uff96\117\uff96\127\uff96\130\uff96\131\uff96\132\uff96\133\uff96" +
    "\135\uff96\137\uff96\143\uff96\145\uff96\147\uff96\152\uff96\155" +
    "\uff96\233\uff96\234\uff96\235\uff96\237\uff96\240\uff96\242\uff96" +
    "\243\uff96\244\uff96\245\uff96\246\uff96\247\uff96\250\uff96\251" +
    "\uff96\252\uff96\253\uff96\254\uff96\255\uff96\256\uff96\257\uff96" +
    "\001\002\000\014\002\uffcd\003\uffcd\015\uffcd\016\uffcd\152" +
    "\uffcd\001\002\000\014\002\uffce\003\uffce\015\uffce\016\uffce" +
    "\152\uffce\001\002\000\130\031\045\036\064\037\102\040" +
    "\046\041\062\042\055\043\052\044\150\045\164\046\135" +
    "\114\056\115\065\116\074\117\107\127\054\130\106\131" +
    "\063\132\112\133\110\135\077\137\051\145\105\153\153" +
    "\174\126\175\141\233\066\234\111\235\075\237\070\240" +
    "\067\242\130\243\144\244\127\245\163\246\133\247\162" +
    "\250\156\251\123\252\154\253\147\254\146\255\125\256" +
    "\124\001\002\000\004\156\343\001\002\000\130\031\045" +
    "\036\064\037\102\040\046\041\062\042\055\043\052\044" +
    "\150\045\164\046\135\114\056\115\065\116\074\117\107" +
    "\127\054\130\106\131\063\132\112\133\110\135\077\137" +
    "\051\145\105\153\153\174\126\175\141\233\066\234\111" +
    "\235\075\237\070\240\067\242\130\243\144\244\127\245" +
    "\163\246\133\247\162\250\156\251\123\252\154\253\147" +
    "\254\146\255\125\256\124\001\002\000\004\156\345\001" +
    "\002\000\130\031\045\036\064\037\102\040\046\041\062" +
    "\042\055\043\052\044\150\045\164\046\135\114\056\115" +
    "\065\116\074\117\107\127\054\130\106\131\063\132\112" +
    "\133\110\135\077\137\051\145\105\153\153\174\126\175" +
    "\141\233\066\234\111\235\075\237\070\240\067\242\130" +
    "\243\144\244\127\245\163\246\133\247\162\250\156\251" +
    "\123\252\154\253\147\254\146\255\125\256\124\001\002" +
    "\000\004\146\347\001\002\000\212\002\ufecb\003\ufecb\014" +
    "\ufecb\015\ufecb\016\ufecb\031\ufecb\036\ufecb\037\ufecb\040\ufecb" +
    "\041\ufecb\042\ufecb\043\ufecb\044\ufecb\045\ufecb\046\ufecb\051" +
    "\ufecb\114\ufecb\115\ufecb\116\ufecb\117\ufecb\127\ufecb\130\ufecb" +
    "\131\ufecb\132\ufecb\133\ufecb\135\ufecb\137\ufecb\141\ufecb\143" +
    "\ufecb\145\ufecb\146\ufecb\147\ufecb\152\ufecb\153\ufecb\154\ufecb" +
    "\155\ufecb\156\ufecb\157\ufecb\162\ufecb\164\ufecb\165\ufecb\166" +
    "\ufecb\167\ufecb\170\ufecb\171\ufecb\172\ufecb\173\ufecb\174\ufecb" +
    "\175\ufecb\233\ufecb\234\ufecb\235\ufecb\237\ufecb\240\ufecb\242" +
    "\ufecb\243\ufecb\244\ufecb\245\ufecb\246\ufecb\247\ufecb\250\ufecb" +
    "\251\ufecb\252\ufecb\253\ufecb\254\ufecb\255\ufecb\256\ufecb\257" +
    "\ufecb\001\002\000\130\031\045\036\064\037\102\040\046" +
    "\041\062\042\055\043\052\044\150\045\164\046\135\114" +
    "\056\115\065\116\074\117\107\127\054\130\106\131\063" +
    "\132\112\133\110\135\077\137\051\145\105\153\153\174" +
    "\126\175\141\233\066\234\111\235\075\237\070\240\067" +
    "\242\130\243\144\244\127\245\163\246\133\247\162\250" +
    "\156\251\123\252\154\253\147\254\146\255\125\256\124" +
    "\001\002\000\004\156\352\001\002\000\130\031\045\036" +
    "\064\037\102\040\046\041\062\042\055\043\052\044\150" +
    "\045\164\046\135\114\056\115\065\116\074\117\107\127" +
    "\054\130\106\131\063\132\112\133\110\135\077\137\051" +
    "\145\105\153\153\174\126\175\141\233\066\234\111\235" +
    "\075\237\070\240\067\242\130\243\144\244\127\245\163" +
    "\246\133\247\162\250\156\251\123\252\154\253\147\254" +
    "\146\255\125\256\124\001\002\000\004\146\354\001\002" +
    "\000\212\002\ufec8\003\ufec8\014\ufec8\015\ufec8\016\ufec8\031" +
    "\ufec8\036\ufec8\037\ufec8\040\ufec8\041\ufec8\042\ufec8\043\ufec8" +
    "\044\ufec8\045\ufec8\046\ufec8\051\ufec8\114\ufec8\115\ufec8\116" +
    "\ufec8\117\ufec8\127\ufec8\130\ufec8\131\ufec8\132\ufec8\133\ufec8" +
    "\135\ufec8\137\ufec8\141\ufec8\143\ufec8\145\ufec8\146\ufec8\147" +
    "\ufec8\152\ufec8\153\ufec8\154\ufec8\155\ufec8\156\ufec8\157\ufec8" +
    "\162\ufec8\164\ufec8\165\ufec8\166\ufec8\167\ufec8\170\ufec8\171" +
    "\ufec8\172\ufec8\173\ufec8\174\ufec8\175\ufec8\233\ufec8\234\ufec8" +
    "\235\ufec8\237\ufec8\240\ufec8\242\ufec8\243\ufec8\244\ufec8\245" +
    "\ufec8\246\ufec8\247\ufec8\250\ufec8\251\ufec8\252\ufec8\253\ufec8" +
    "\254\ufec8\255\ufec8\256\ufec8\257\ufec8\001\002\000\132\017" +
    "\114\031\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\114\uff92\115\uff92\116" +
    "\uff92\117\uff92\127\uff92\130\uff92\131\uff92\132\uff92\133\uff92" +
    "\135\uff92\137\uff92\145\uff92\153\uff92\174\uff92\175\uff92\233" +
    "\uff92\234\uff92\235\uff92\237\uff92\240\uff92\242\uff92\243\uff92" +
    "\244\uff92\245\uff92\246\uff92\247\uff92\250\uff92\251\uff92\252" +
    "\uff92\253\uff92\254\uff92\255\uff92\256\uff92\001\002\000\130" +
    "\031\045\036\064\037\102\040\046\041\062\042\055\043" +
    "\052\044\150\045\164\046\135\114\056\115\065\116\074" +
    "\117\107\127\054\130\106\131\063\132\112\133\110\135" +
    "\077\137\051\145\105\153\153\174\126\175\141\233\066" +
    "\234\111\235\075\237\070\240\067\242\130\243\144\244" +
    "\127\245\163\246\133\247\162\250\156\251\123\252\154" +
    "\253\147\254\146\255\125\256\124\001\002\000\004\146" +
    "\360\001\002\000\212\002\ufeb8\003\ufeb8\014\ufeb8\015\ufeb8" +
    "\016\ufeb8\031\ufeb8\036\ufeb8\037\ufeb8\040\ufeb8\041\ufeb8\042" +
    "\ufeb8\043\ufeb8\044\ufeb8\045\ufeb8\046\ufeb8\051\ufeb8\114\ufeb8" +
    "\115\ufeb8\116\ufeb8\117\ufeb8\127\ufeb8\130\ufeb8\131\ufeb8\132" +
    "\ufeb8\133\ufeb8\135\ufeb8\137\ufeb8\141\ufeb8\143\ufeb8\145\ufeb8" +
    "\146\ufeb8\147\ufeb8\152\ufeb8\153\ufeb8\154\ufeb8\155\ufeb8\156" +
    "\ufeb8\157\ufeb8\162\ufeb8\164\ufeb8\165\ufeb8\166\ufeb8\167\ufeb8" +
    "\170\ufeb8\171\ufeb8\172\ufeb8\173\ufeb8\174\ufeb8\175\ufeb8\233" +
    "\ufeb8\234\ufeb8\235\ufeb8\237\ufeb8\240\ufeb8\242\ufeb8\243\ufeb8" +
    "\244\ufeb8\245\ufeb8\246\ufeb8\247\ufeb8\250\ufeb8\251\ufeb8\252" +
    "\ufeb8\253\ufeb8\254\ufeb8\255\ufeb8\256\ufeb8\257\ufeb8\001\002" +
    "\000\130\031\045\036\064\037\102\040\046\041\062\042" +
    "\055\043\052\044\150\045\164\046\135\114\056\115\065" +
    "\116\074\117\107\127\054\130\106\131\063\132\112\133" +
    "\110\135\077\137\051\145\105\153\153\174\126\175\141" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\001\002\000" +
    "\004\146\363\001\002\000\212\002\ufec5\003\ufec5\014\ufec5" +
    "\015\ufec5\016\ufec5\031\ufec5\036\ufec5\037\ufec5\040\ufec5\041" +
    "\ufec5\042\ufec5\043\ufec5\044\ufec5\045\ufec5\046\ufec5\051\ufec5" +
    "\114\ufec5\115\ufec5\116\ufec5\117\ufec5\127\ufec5\130\ufec5\131" +
    "\ufec5\132\ufec5\133\ufec5\135\ufec5\137\ufec5\141\ufec5\143\ufec5" +
    "\145\ufec5\146\ufec5\147\ufec5\152\ufec5\153\ufec5\154\ufec5\155" +
    "\ufec5\156\ufec5\157\ufec5\162\ufec5\164\ufec5\165\ufec5\166\ufec5" +
    "\167\ufec5\170\ufec5\171\ufec5\172\ufec5\173\ufec5\174\ufec5\175" +
    "\ufec5\233\ufec5\234\ufec5\235\ufec5\237\ufec5\240\ufec5\242\ufec5" +
    "\243\ufec5\244\ufec5\245\ufec5\246\ufec5\247\ufec5\250\ufec5\251" +
    "\ufec5\252\ufec5\253\ufec5\254\ufec5\255\ufec5\256\ufec5\257\ufec5" +
    "\001\002\000\212\002\ufecc\003\ufecc\014\ufecc\015\ufecc\016" +
    "\ufecc\031\ufecc\036\ufecc\037\ufecc\040\ufecc\041\ufecc\042\ufecc" +
    "\043\ufecc\044\ufecc\045\ufecc\046\ufecc\051\ufecc\114\ufecc\115" +
    "\ufecc\116\ufecc\117\ufecc\127\ufecc\130\ufecc\131\ufecc\132\ufecc" +
    "\133\ufecc\135\ufecc\137\ufecc\141\ufecc\143\ufecc\145\ufecc\146" +
    "\ufecc\147\ufecc\152\ufecc\153\ufecc\154\ufecc\155\ufecc\156\ufecc" +
    "\157\ufecc\162\ufecc\164\ufecc\165\ufecc\166\ufecc\167\ufecc\170" +
    "\ufecc\171\ufecc\172\ufecc\173\ufecc\174\ufecc\175\ufecc\233\ufecc" +
    "\234\ufecc\235\ufecc\237\ufecc\240\ufecc\242\ufecc\243\ufecc\244" +
    "\ufecc\245\ufecc\246\ufecc\247\ufecc\250\ufecc\251\ufecc\252\ufecc" +
    "\253\ufecc\254\ufecc\255\ufecc\256\ufecc\257\ufecc\001\002\000" +
    "\130\031\045\036\064\037\102\040\046\041\062\042\055" +
    "\043\052\044\150\045\164\046\135\114\056\115\065\116" +
    "\074\117\107\127\054\130\106\131\063\132\112\133\110" +
    "\135\077\137\051\145\105\153\153\174\126\175\141\233" +
    "\066\234\111\235\075\237\070\240\067\242\130\243\144" +
    "\244\127\245\163\246\133\247\162\250\156\251\123\252" +
    "\154\253\147\254\146\255\125\256\124\001\002\000\004" +
    "\146\367\001\002\000\212\002\ufec4\003\ufec4\014\ufec4\015" +
    "\ufec4\016\ufec4\031\ufec4\036\ufec4\037\ufec4\040\ufec4\041\ufec4" +
    "\042\ufec4\043\ufec4\044\ufec4\045\ufec4\046\ufec4\051\ufec4\114" +
    "\ufec4\115\ufec4\116\ufec4\117\ufec4\127\ufec4\130\ufec4\131\ufec4" +
    "\132\ufec4\133\ufec4\135\ufec4\137\ufec4\141\ufec4\143\ufec4\145" +
    "\ufec4\146\ufec4\147\ufec4\152\ufec4\153\ufec4\154\ufec4\155\ufec4" +
    "\156\ufec4\157\ufec4\162\ufec4\164\ufec4\165\ufec4\166\ufec4\167" +
    "\ufec4\170\ufec4\171\ufec4\172\ufec4\173\ufec4\174\ufec4\175\ufec4" +
    "\233\ufec4\234\ufec4\235\ufec4\237\ufec4\240\ufec4\242\ufec4\243" +
    "\ufec4\244\ufec4\245\ufec4\246\ufec4\247\ufec4\250\ufec4\251\ufec4" +
    "\252\ufec4\253\ufec4\254\ufec4\255\ufec4\256\ufec4\257\ufec4\001" +
    "\002\000\132\017\114\031\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\114" +
    "\uff92\115\uff92\116\uff92\117\uff92\127\uff92\130\uff92\131\uff92" +
    "\132\uff92\133\uff92\135\uff92\137\uff92\145\uff92\153\uff92\174" +
    "\uff92\175\uff92\233\uff92\234\uff92\235\uff92\237\uff92\240\uff92" +
    "\242\uff92\243\uff92\244\uff92\245\uff92\246\uff92\247\uff92\250" +
    "\uff92\251\uff92\252\uff92\253\uff92\254\uff92\255\uff92\256\uff92" +
    "\001\002\000\130\031\045\036\064\037\102\040\046\041" +
    "\062\042\055\043\052\044\150\045\164\046\135\114\056" +
    "\115\065\116\074\117\107\127\054\130\106\131\063\132" +
    "\112\133\110\135\077\137\051\145\105\153\153\174\126" +
    "\175\141\233\066\234\111\235\075\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\001" +
    "\002\000\006\146\374\157\373\001\002\000\004\136\375" +
    "\001\002\000\212\002\ufeb4\003\ufeb4\014\ufeb4\015\ufeb4\016" +
    "\ufeb4\031\ufeb4\036\ufeb4\037\ufeb4\040\ufeb4\041\ufeb4\042\ufeb4" +
    "\043\ufeb4\044\ufeb4\045\ufeb4\046\ufeb4\051\ufeb4\114\ufeb4\115" +
    "\ufeb4\116\ufeb4\117\ufeb4\127\ufeb4\130\ufeb4\131\ufeb4\132\ufeb4" +
    "\133\ufeb4\135\ufeb4\137\ufeb4\141\ufeb4\143\ufeb4\145\ufeb4\146" +
    "\ufeb4\147\ufeb4\152\ufeb4\153\ufeb4\154\ufeb4\155\ufeb4\156\ufeb4" +
    "\157\ufeb4\162\ufeb4\164\ufeb4\165\ufeb4\166\ufeb4\167\ufeb4\170" +
    "\ufeb4\171\ufeb4\172\ufeb4\173\ufeb4\174\ufeb4\175\ufeb4\233\ufeb4" +
    "\234\ufeb4\235\ufeb4\237\ufeb4\240\ufeb4\242\ufeb4\243\ufeb4\244" +
    "\ufeb4\245\ufeb4\246\ufeb4\247\ufeb4\250\ufeb4\251\ufeb4\252\ufeb4" +
    "\253\ufeb4\254\ufeb4\255\ufeb4\256\ufeb4\257\ufeb4\001\002\000" +
    "\004\166\376\001\002\000\012\253\147\254\146\255\125" +
    "\256\124\001\002\000\004\146\u0100\001\002\000\212\002" +
    "\ufeb5\003\ufeb5\014\ufeb5\015\ufeb5\016\ufeb5\031\ufeb5\036\ufeb5" +
    "\037\ufeb5\040\ufeb5\041\ufeb5\042\ufeb5\043\ufeb5\044\ufeb5\045" +
    "\ufeb5\046\ufeb5\051\ufeb5\114\ufeb5\115\ufeb5\116\ufeb5\117\ufeb5" +
    "\127\ufeb5\130\ufeb5\131\ufeb5\132\ufeb5\133\ufeb5\135\ufeb5\137" +
    "\ufeb5\141\ufeb5\143\ufeb5\145\ufeb5\146\ufeb5\147\ufeb5\152\ufeb5" +
    "\153\ufeb5\154\ufeb5\155\ufeb5\156\ufeb5\157\ufeb5\162\ufeb5\164" +
    "\ufeb5\165\ufeb5\166\ufeb5\167\ufeb5\170\ufeb5\171\ufeb5\172\ufeb5" +
    "\173\ufeb5\174\ufeb5\175\ufeb5\233\ufeb5\234\ufeb5\235\ufeb5\237" +
    "\ufeb5\240\ufeb5\242\ufeb5\243\ufeb5\244\ufeb5\245\ufeb5\246\ufeb5" +
    "\247\ufeb5\250\ufeb5\251\ufeb5\252\ufeb5\253\ufeb5\254\ufeb5\255" +
    "\ufeb5\256\ufeb5\257\ufeb5\001\002\000\130\031\045\036\064" +
    "\037\102\040\046\041\062\042\055\043\052\044\150\045" +
    "\164\046\135\114\056\115\065\116\074\117\107\127\054" +
    "\130\106\131\063\132\112\133\110\135\077\137\051\145" +
    "\105\153\153\174\126\175\141\233\066\234\111\235\075" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\004\156\u0103\001\002\000" +
    "\130\031\045\036\064\037\102\040\046\041\062\042\055" +
    "\043\052\044\150\045\164\046\135\114\056\115\065\116" +
    "\074\117\107\127\054\130\106\131\063\132\112\133\110" +
    "\135\077\137\051\145\105\153\153\174\126\175\141\233" +
    "\066\234\111\235\075\237\070\240\067\242\130\243\144" +
    "\244\127\245\163\246\133\247\162\250\156\251\123\252" +
    "\154\253\147\254\146\255\125\256\124\001\002\000\006" +
    "\146\u0106\156\u0105\001\002\000\130\031\045\036\064\037" +
    "\102\040\046\041\062\042\055\043\052\044\150\045\164" +
    "\046\135\114\056\115\065\116\074\117\107\127\054\130" +
    "\106\131\063\132\112\133\110\135\077\137\051\145\105" +
    "\153\153\174\126\175\141\233\066\234\111\235\075\237" +
    "\070\240\067\242\130\243\144\244\127\245\163\246\133" +
    "\247\162\250\156\251\123\252\154\253\147\254\146\255" +
    "\125\256\124\001\002\000\212\002\ufec0\003\ufec0\014\ufec0" +
    "\015\ufec0\016\ufec0\031\ufec0\036\ufec0\037\ufec0\040\ufec0\041" +
    "\ufec0\042\ufec0\043\ufec0\044\ufec0\045\ufec0\046\ufec0\051\ufec0" +
    "\114\ufec0\115\ufec0\116\ufec0\117\ufec0\127\ufec0\130\ufec0\131" +
    "\ufec0\132\ufec0\133\ufec0\135\ufec0\137\ufec0\141\ufec0\143\ufec0" +
    "\145\ufec0\146\ufec0\147\ufec0\152\ufec0\153\ufec0\154\ufec0\155" +
    "\ufec0\156\ufec0\157\ufec0\162\ufec0\164\ufec0\165\ufec0\166\ufec0" +
    "\167\ufec0\170\ufec0\171\ufec0\172\ufec0\173\ufec0\174\ufec0\175" +
    "\ufec0\233\ufec0\234\ufec0\235\ufec0\237\ufec0\240\ufec0\242\ufec0" +
    "\243\ufec0\244\ufec0\245\ufec0\246\ufec0\247\ufec0\250\ufec0\251" +
    "\ufec0\252\ufec0\253\ufec0\254\ufec0\255\ufec0\256\ufec0\257\ufec0" +
    "\001\002\000\004\146\u0108\001\002\000\212\002\ufec1\003" +
    "\ufec1\014\ufec1\015\ufec1\016\ufec1\031\ufec1\036\ufec1\037\ufec1" +
    "\040\ufec1\041\ufec1\042\ufec1\043\ufec1\044\ufec1\045\ufec1\046" +
    "\ufec1\051\ufec1\114\ufec1\115\ufec1\116\ufec1\117\ufec1\127\ufec1" +
    "\130\ufec1\131\ufec1\132\ufec1\133\ufec1\135\ufec1\137\ufec1\141" +
    "\ufec1\143\ufec1\145\ufec1\146\ufec1\147\ufec1\152\ufec1\153\ufec1" +
    "\154\ufec1\155\ufec1\156\ufec1\157\ufec1\162\ufec1\164\ufec1\165" +
    "\ufec1\166\ufec1\167\ufec1\170\ufec1\171\ufec1\172\ufec1\173\ufec1" +
    "\174\ufec1\175\ufec1\233\ufec1\234\ufec1\235\ufec1\237\ufec1\240" +
    "\ufec1\242\ufec1\243\ufec1\244\ufec1\245\ufec1\246\ufec1\247\ufec1" +
    "\250\ufec1\251\ufec1\252\ufec1\253\ufec1\254\ufec1\255\ufec1\256" +
    "\ufec1\257\ufec1\001\002\000\130\031\045\036\064\037\102" +
    "\040\046\041\062\042\055\043\052\044\150\045\164\046" +
    "\135\114\056\115\065\116\074\117\107\127\054\130\106" +
    "\131\063\132\112\133\110\135\077\137\051\145\105\153" +
    "\153\174\126\175\141\233\066\234\111\235\075\237\070" +
    "\240\067\242\130\243\144\244\127\245\163\246\133\247" +
    "\162\250\156\251\123\252\154\253\147\254\146\255\125" +
    "\256\124\001\002\000\004\156\u010b\001\002\000\130\031" +
    "\045\036\064\037\102\040\046\041\062\042\055\043\052" +
    "\044\150\045\164\046\135\114\056\115\065\116\074\117" +
    "\107\127\054\130\106\131\063\132\112\133\110\135\077" +
    "\137\051\145\105\153\153\174\126\175\141\233\066\234" +
    "\111\235\075\237\070\240\067\242\130\243\144\244\127" +
    "\245\163\246\133\247\162\250\156\251\123\252\154\253" +
    "\147\254\146\255\125\256\124\001\002\000\004\146\u010d" +
    "\001\002\000\212\002\ufec9\003\ufec9\014\ufec9\015\ufec9\016" +
    "\ufec9\031\ufec9\036\ufec9\037\ufec9\040\ufec9\041\ufec9\042\ufec9" +
    "\043\ufec9\044\ufec9\045\ufec9\046\ufec9\051\ufec9\114\ufec9\115" +
    "\ufec9\116\ufec9\117\ufec9\127\ufec9\130\ufec9\131\ufec9\132\ufec9" +
    "\133\ufec9\135\ufec9\137\ufec9\141\ufec9\143\ufec9\145\ufec9\146" +
    "\ufec9\147\ufec9\152\ufec9\153\ufec9\154\ufec9\155\ufec9\156\ufec9" +
    "\157\ufec9\162\ufec9\164\ufec9\165\ufec9\166\ufec9\167\ufec9\170" +
    "\ufec9\171\ufec9\172\ufec9\173\ufec9\174\ufec9\175\ufec9\233\ufec9" +
    "\234\ufec9\235\ufec9\237\ufec9\240\ufec9\242\ufec9\243\ufec9\244" +
    "\ufec9\245\ufec9\246\ufec9\247\ufec9\250\ufec9\251\ufec9\252\ufec9" +
    "\253\ufec9\254\ufec9\255\ufec9\256\ufec9\257\ufec9\001\002\000" +
    "\100\002\uffc1\003\uffc1\014\uffc1\015\uffc1\016\uffc1\031\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\114" +
    "\uffc1\115\uffc1\116\uffc1\117\uffc1\127\uffc1\130\uffc1\131\uffc1" +
    "\132\uffc1\133\uffc1\135\uffc1\137\uffc1\143\uffc1\145\uffc1\152" +
    "\uffc1\233\uffc1\234\uffc1\235\uffc1\237\uffc1\240\uffc1\001\002" +
    "\000\100\002\uffc5\003\uffc5\014\uffc5\015\uffc5\016\uffc5\031" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\114\uffc5\115\uffc5\116\uffc5\117\uffc5\127\uffc5\130\uffc5\131" +
    "\uffc5\132\uffc5\133\uffc5\135\uffc5\137\uffc5\143\uffc5\145\uffc5" +
    "\152\uffc5\233\uffc5\234\uffc5\235\uffc5\237\uffc5\240\uffc5\001" +
    "\002\000\130\031\045\036\064\037\102\040\046\041\062" +
    "\042\055\043\052\044\150\045\164\046\135\114\056\115" +
    "\065\116\074\117\107\127\054\130\106\131\063\132\112" +
    "\133\110\135\077\137\051\145\105\153\153\174\126\175" +
    "\141\233\066\234\111\235\075\237\070\240\067\242\130" +
    "\243\144\244\127\245\163\246\133\247\162\250\156\251" +
    "\123\252\154\253\147\254\146\255\125\256\124\001\002" +
    "\000\004\146\u0112\001\002\000\212\002\ufec7\003\ufec7\014" +
    "\ufec7\015\ufec7\016\ufec7\031\ufec7\036\ufec7\037\ufec7\040\ufec7" +
    "\041\ufec7\042\ufec7\043\ufec7\044\ufec7\045\ufec7\046\ufec7\051" +
    "\ufec7\114\ufec7\115\ufec7\116\ufec7\117\ufec7\127\ufec7\130\ufec7" +
    "\131\ufec7\132\ufec7\133\ufec7\135\ufec7\137\ufec7\141\ufec7\143" +
    "\ufec7\145\ufec7\146\ufec7\147\ufec7\152\ufec7\153\ufec7\154\ufec7" +
    "\155\ufec7\156\ufec7\157\ufec7\162\ufec7\164\ufec7\165\ufec7\166" +
    "\ufec7\167\ufec7\170\ufec7\171\ufec7\172\ufec7\173\ufec7\174\ufec7" +
    "\175\ufec7\233\ufec7\234\ufec7\235\ufec7\237\ufec7\240\ufec7\242" +
    "\ufec7\243\ufec7\244\ufec7\245\ufec7\246\ufec7\247\ufec7\250\ufec7" +
    "\251\ufec7\252\ufec7\253\ufec7\254\ufec7\255\ufec7\256\ufec7\257" +
    "\ufec7\001\002\000\130\031\045\036\064\037\102\040\046" +
    "\041\062\042\055\043\052\044\150\045\164\046\135\114" +
    "\056\115\065\116\074\117\107\127\054\130\106\131\063" +
    "\132\112\133\110\135\077\137\051\145\105\153\153\174" +
    "\126\175\141\233\066\234\111\235\075\237\070\240\067" +
    "\242\130\243\144\244\127\245\163\246\133\247\162\250" +
    "\156\251\123\252\154\253\147\254\146\255\125\256\124" +
    "\001\002\000\004\146\u0115\001\002\000\212\002\ufecd\003" +
    "\ufecd\014\ufecd\015\ufecd\016\ufecd\031\ufecd\036\ufecd\037\ufecd" +
    "\040\ufecd\041\ufecd\042\ufecd\043\ufecd\044\ufecd\045\ufecd\046" +
    "\ufecd\051\ufecd\114\ufecd\115\ufecd\116\ufecd\117\ufecd\127\ufecd" +
    "\130\ufecd\131\ufecd\132\ufecd\133\ufecd\135\ufecd\137\ufecd\141" +
    "\ufecd\143\ufecd\145\ufecd\146\ufecd\147\ufecd\152\ufecd\153\ufecd" +
    "\154\ufecd\155\ufecd\156\ufecd\157\ufecd\162\ufecd\164\ufecd\165" +
    "\ufecd\166\ufecd\167\ufecd\170\ufecd\171\ufecd\172\ufecd\173\ufecd" +
    "\174\ufecd\175\ufecd\233\ufecd\234\ufecd\235\ufecd\237\ufecd\240" +
    "\ufecd\242\ufecd\243\ufecd\244\ufecd\245\ufecd\246\ufecd\247\ufecd" +
    "\250\ufecd\251\ufecd\252\ufecd\253\ufecd\254\ufecd\255\ufecd\256" +
    "\ufecd\257\ufecd\001\002\000\066\014\047\031\045\036\064" +
    "\037\102\040\046\041\062\042\055\043\052\114\056\115" +
    "\065\116\074\117\107\127\054\130\106\131\063\132\112" +
    "\133\110\135\077\137\051\143\101\145\105\233\066\234" +
    "\111\235\075\237\070\240\067\001\002\000\014\002\uffc9" +
    "\003\uffc9\015\uffc9\016\uffc9\152\uffc9\001\002\000\006\002" +
    "\uffbd\152\uffbd\001\002\000\006\002\uffbf\152\uffbf\001\002" +
    "\000\010\002\uffb4\015\uffb4\152\uffb4\001\002\000\010\002" +
    "\uffb3\015\uffb3\152\uffb3\001\002\000\014\002\uffca\003\uffca" +
    "\015\uffca\016\uffca\152\uffca\001\002\000\004\242\u011f\001" +
    "\002\000\010\002\uffb5\016\uffb5\152\uffb5\001\002\000\010" +
    "\002\uffb7\016\uffb7\152\uffb7\001\002\000\006\002\uffd6\152" +
    "\uffd6\001\002\000\006\002\uffd3\152\uffd3\001\002\000\004" +
    "\002\uffef\001\002\000\006\002\uffee\013\u0116\001\002\000" +
    "\062\044\150\045\164\145\u013d\147\u0131\155\u01e9\233\066" +
    "\234\111\235\075\237\070\240\067\242\130\243\144\244" +
    "\127\245\163\246\133\247\162\250\156\251\123\252\154" +
    "\253\147\254\146\255\125\256\124\257\u012e\001\002\000" +
    "\006\023\004\151\022\001\002\000\110\003\uff02\027\uff02" +
    "\030\uff02\044\uff02\045\uff02\142\uff02\145\uff02\146\uff02\147" +
    "\uff02\150\uff02\151\uff02\152\uff02\153\uff02\155\uff02\156\uff02" +
    "\157\uff02\233\uff02\234\uff02\235\uff02\237\uff02\240\uff02\242" +
    "\uff02\243\uff02\244\uff02\245\uff02\246\uff02\247\uff02\250\uff02" +
    "\251\uff02\252\uff02\253\uff02\254\uff02\255\uff02\256\uff02\257" +
    "\uff02\001\002\000\004\152\uffb1\001\002\000\062\044\uff9c" +
    "\045\uff9c\145\uff9c\147\uff9c\155\uff9c\233\uff9c\234\uff9c\235" +
    "\uff9c\237\uff9c\240\uff9c\242\uff9c\243\uff9c\244\uff9c\245\uff9c" +
    "\246\uff9c\247\uff9c\250\uff9c\251\uff9c\252\uff9c\253\uff9c\254" +
    "\uff9c\255\uff9c\256\uff9c\257\uff9c\001\002\000\110\003\uff0a" +
    "\027\uff0a\030\uff0a\044\uff0a\045\uff0a\142\uff0a\145\uff0a\146" +
    "\uff0a\147\uff0a\150\uff0a\151\uff0a\152\uff0a\153\uff0a\155\uff0a" +
    "\156\uff0a\157\uff0a\233\uff0a\234\uff0a\235\uff0a\237\uff0a\240" +
    "\uff0a\242\uff0a\243\uff0a\244\uff0a\245\uff0a\246\uff0a\247\uff0a" +
    "\250\uff0a\251\uff0a\252\uff0a\253\uff0a\254\uff0a\255\uff0a\256" +
    "\uff0a\257\uff0a\001\002\000\110\003\uff09\027\uff09\030\uff09" +
    "\044\uff09\045\uff09\142\uff09\145\uff09\146\uff09\147\uff09\150" +
    "\uff09\151\uff09\152\uff09\153\uff09\155\uff09\156\uff09\157\uff09" +
    "\233\uff09\234\uff09\235\uff09\237\uff09\240\uff09\242\uff09\243" +
    "\uff09\244\uff09\245\uff09\246\uff09\247\uff09\250\uff09\251\uff09" +
    "\252\uff09\253\uff09\254\uff09\255\uff09\256\uff09\257\uff09\001" +
    "\002\000\056\031\045\036\064\037\102\040\046\041\062" +
    "\042\055\043\052\114\056\115\065\116\074\117\107\127" +
    "\054\130\106\131\063\132\112\133\110\135\077\137\051" +
    "\145\105\233\066\234\111\235\075\001\002\000\004\152" +
    "\uffaf\001\002\000\110\003\uff16\027\uff16\030\uff16\044\uff16" +
    "\045\uff16\142\uff16\145\uff16\146\uff16\147\uff16\150\uff16\151" +
    "\uff16\152\uff16\153\uff16\155\uff16\156\uff16\157\uff16\233\uff16" +
    "\234\uff16\235\uff16\237\uff16\240\uff16\242\uff16\243\uff16\244" +
    "\uff16\245\uff16\246\uff16\247\uff16\250\uff16\251\uff16\252\uff16" +
    "\253\uff16\254\uff16\255\uff16\256\uff16\257\uff16\001\002\000" +
    "\110\003\ufeff\027\ufeff\030\ufeff\044\ufeff\045\ufeff\142\ufeff" +
    "\145\ufeff\146\ufeff\147\ufeff\150\ufeff\151\ufeff\152\ufeff\153" +
    "\ufeff\155\ufeff\156\ufeff\157\ufeff\233\ufeff\234\ufeff\235\ufeff" +
    "\237\ufeff\240\ufeff\242\ufeff\243\ufeff\244\ufeff\245\ufeff\246" +
    "\ufeff\247\ufeff\250\ufeff\251\ufeff\252\ufeff\253\ufeff\254\ufeff" +
    "\255\ufeff\256\ufeff\257\ufeff\001\002\000\110\003\uff17\027" +
    "\uff17\030\uff17\044\uff17\045\uff17\142\uff17\145\uff17\146\uff17" +
    "\147\uff17\150\uff17\151\uff17\152\uff17\153\uff17\155\uff17\156" +
    "\uff17\157\uff17\233\uff17\234\uff17\235\uff17\237\uff17\240\uff17" +
    "\242\uff17\243\uff17\244\uff17\245\uff17\246\uff17\247\uff17\250" +
    "\uff17\251\uff17\252\uff17\253\uff17\254\uff17\255\uff17\256\uff17" +
    "\257\uff17\001\002\000\062\044\uff9b\045\uff9b\145\uff9b\147" +
    "\uff9b\155\uff9b\233\uff9b\234\uff9b\235\uff9b\237\uff9b\240\uff9b" +
    "\242\uff9b\243\uff9b\244\uff9b\245\uff9b\246\uff9b\247\uff9b\250" +
    "\uff9b\251\uff9b\252\uff9b\253\uff9b\254\uff9b\255\uff9b\256\uff9b" +
    "\257\uff9b\001\002\000\024\030\u0152\142\u014e\145\u0159\153" +
    "\u0153\233\066\234\111\235\075\237\070\240\067\001\002" +
    "\000\036\003\uff71\027\uff6f\030\uff77\142\uff77\145\uff77\151" +
    "\uff6f\152\uff6f\153\uff77\155\uff6f\233\uff77\234\uff77\235\uff77" +
    "\237\uff77\240\uff77\001\002\000\100\002\uffaa\003\uffaa\012" +
    "\uffaa\013\uffaa\015\uffaa\016\uffaa\044\uffaa\045\uffaa\145\uffaa" +
    "\147\uffaa\152\uffad\155\uffaa\233\uffaa\234\uffaa\235\uffaa\237" +
    "\uffaa\240\uffaa\242\uffaa\243\uffaa\244\uffaa\245\uffaa\246\uffaa" +
    "\247\uffaa\250\uffaa\251\uffaa\252\uffaa\253\uffaa\254\uffaa\255" +
    "\uffaa\256\uffaa\257\uffaa\001\002\000\110\003\uff04\027\uff04" +
    "\030\uff04\044\uff04\045\uff04\142\uff04\145\uff04\146\uff04\147" +
    "\uff04\150\uff04\151\uff04\152\uff04\153\uff04\155\uff04\156\uff04" +
    "\157\uff04\233\uff04\234\uff04\235\uff04\237\uff04\240\uff04\242" +
    "\uff04\243\uff04\244\uff04\245\uff04\246\uff04\247\uff04\250\uff04" +
    "\251\uff04\252\uff04\253\uff04\254\uff04\255\uff04\256\uff04\257" +
    "\uff04\001\002\000\110\003\uff03\027\uff03\030\uff03\044\uff03" +
    "\045\uff03\142\uff03\145\uff03\146\uff03\147\uff03\150\uff03\151" +
    "\uff03\152\uff03\153\uff03\155\uff03\156\uff03\157\uff03\233\uff03" +
    "\234\uff03\235\uff03\237\uff03\240\uff03\242\uff03\243\uff03\244" +
    "\uff03\245\uff03\246\uff03\247\uff03\250\uff03\251\uff03\252\uff03" +
    "\253\uff03\254\uff03\255\uff03\256\uff03\257\uff03\001\002\000" +
    "\010\027\u012b\151\022\152\uffa7\001\002\000\036\003\uff73" +
    "\027\uff75\030\uff75\142\uff75\145\uff75\151\uff75\152\uff75\153" +
    "\uff75\155\uff75\233\uff75\234\uff75\235\uff75\237\uff75\240\uff75" +
    "\001\002\000\010\027\u012b\151\022\152\uffa9\001\002\000" +
    "\012\027\uffa0\151\uffa0\152\uffa0\155\u0145\001\002\000\110" +
    "\003\uff00\027\uff00\030\uff00\044\uff00\045\uff00\142\uff00\145" +
    "\uff00\146\uff00\147\uff00\150\uff00\151\uff00\152\uff00\153\uff00" +
    "\155\uff00\156\uff00\157\uff00\233\uff00\234\uff00\235\uff00\237" +
    "\uff00\240\uff00\242\uff00\243\uff00\244\uff00\245\uff00\246\uff00" +
    "\247\uff00\250\uff00\251\uff00\252\uff00\253\uff00\254\uff00\255" +
    "\uff00\256\uff00\257\uff00\001\002\000\062\044\uff9d\045\uff9d" +
    "\145\uff9d\147\uff9d\155\uff9d\233\uff9d\234\uff9d\235\uff9d\237" +
    "\uff9d\240\uff9d\242\uff9d\243\uff9d\244\uff9d\245\uff9d\246\uff9d" +
    "\247\uff9d\250\uff9d\251\uff9d\252\uff9d\253\uff9d\254\uff9d\255" +
    "\uff9d\256\uff9d\257\uff9d\001\002\000\076\002\uffab\003\uffab" +
    "\012\uffab\013\uffab\015\uffab\016\uffab\044\uffab\045\uffab\145" +
    "\uffab\147\uffab\155\uffab\233\uffab\234\uffab\235\uffab\237\uffab" +
    "\240\uffab\242\uffab\243\uffab\244\uffab\245\uffab\246\uffab\247" +
    "\uffab\250\uffab\251\uffab\252\uffab\253\uffab\254\uffab\255\uffab" +
    "\256\uffab\257\uffab\001\002\000\060\044\150\045\164\145" +
    "\u013d\147\u0131\233\066\234\111\235\075\237\070\240\067" +
    "\242\130\243\144\244\127\245\163\246\133\247\162\250" +
    "\156\251\123\252\154\253\147\254\146\255\125\256\124" +
    "\257\u012e\001\002\000\110\003\uff01\027\uff01\030\uff01\044" +
    "\uff01\045\uff01\142\uff01\145\uff01\146\uff01\147\uff01\150\uff01" +
    "\151\uff01\152\uff01\153\uff01\155\uff01\156\uff01\157\uff01\233" +
    "\uff01\234\uff01\235\uff01\237\uff01\240\uff01\242\uff01\243\uff01" +
    "\244\uff01\245\uff01\246\uff01\247\uff01\250\uff01\251\uff01\252" +
    "\uff01\253\uff01\254\uff01\255\uff01\256\uff01\257\uff01\001\002" +
    "\000\062\044\150\045\164\145\u013d\146\uff10\147\u0131\233" +
    "\066\234\111\235\075\237\070\240\067\242\130\243\144" +
    "\244\127\245\163\246\133\247\162\250\156\251\123\252" +
    "\154\253\147\254\146\255\125\256\124\257\u012e\001\002" +
    "\000\004\146\u0143\001\002\000\100\027\uff0c\044\uff0c\045" +
    "\uff0c\145\uff0c\146\uff0c\147\uff0c\150\uff0c\151\uff0c\152\uff0c" +
    "\155\uff0c\156\uff0c\157\uff0c\233\uff0c\234\uff0c\235\uff0c\237" +
    "\uff0c\240\uff0c\242\uff0c\243\uff0c\244\uff0c\245\uff0c\246\uff0c" +
    "\247\uff0c\250\uff0c\251\uff0c\252\uff0c\253\uff0c\254\uff0c\255" +
    "\uff0c\256\uff0c\257\uff0c\001\002\000\100\027\uff0b\044\uff0b" +
    "\045\uff0b\145\uff0b\146\uff0b\147\uff0b\150\uff0b\151\uff0b\152" +
    "\uff0b\155\uff0b\156\uff0b\157\uff0b\233\uff0b\234\uff0b\235\uff0b" +
    "\237\uff0b\240\uff0b\242\uff0b\243\uff0b\244\uff0b\245\uff0b\246" +
    "\uff0b\247\uff0b\250\uff0b\251\uff0b\252\uff0b\253\uff0b\254\uff0b" +
    "\255\uff0b\256\uff0b\257\uff0b\001\002\000\110\003\uff11\027" +
    "\uff11\030\uff11\044\uff11\045\uff11\142\uff11\145\uff11\146\uff11" +
    "\147\uff11\150\uff11\151\uff11\152\uff11\153\uff11\155\uff11\156" +
    "\uff11\157\uff11\233\uff11\234\uff11\235\uff11\237\uff11\240\uff11" +
    "\242\uff11\243\uff11\244\uff11\245\uff11\246\uff11\247\uff11\250" +
    "\uff11\251\uff11\252\uff11\253\uff11\254\uff11\255\uff11\256\uff11" +
    "\257\uff11\001\002\000\004\146\uff0f\001\002\000\066\027" +
    "\uff9f\044\150\045\164\145\u013d\147\u0131\151\uff9f\152\uff9f" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\257\u012e\001" +
    "\002\000\010\027\uff9e\151\uff9e\152\uff9e\001\002\000\062" +
    "\044\150\045\164\145\u013d\147\u0131\155\u0148\233\066\234" +
    "\111\235\075\237\070\240\067\242\130\243\144\244\127" +
    "\245\163\246\133\247\162\250\156\251\123\252\154\253" +
    "\147\254\146\255\125\256\124\257\u012e\001\002\000\060" +
    "\044\150\045\164\145\u013d\147\u0131\233\066\234\111\235" +
    "\075\237\070\240\067\242\130\243\144\244\127\245\163" +
    "\246\133\247\162\250\156\251\123\252\154\253\147\254" +
    "\146\255\125\256\124\257\u012e\001\002\000\010\027\uffa5" +
    "\151\uffa5\152\uffa5\001\002\000\010\027\uffa6\151\uffa6\152" +
    "\uffa6\001\002\000\004\003\u01d8\001\002\000\034\027\uff6c" +
    "\030\u0152\142\u014e\145\u0159\151\uff6c\152\uff6c\153\u0153\155" +
    "\uff6c\233\066\234\111\235\075\237\070\240\067\001\002" +
    "\000\070\003\uff3d\044\uff3d\045\uff3d\145\uff3d\146\uff3d\147" +
    "\uff3d\161\uff3d\162\uff3d\233\uff3d\234\uff3d\235\uff3d\237\uff3d" +
    "\240\uff3d\242\uff3d\243\uff3d\244\uff3d\245\uff3d\246\uff3d\247" +
    "\uff3d\250\uff3d\251\uff3d\252\uff3d\253\uff3d\254\uff3d\255\uff3d" +
    "\256\uff3d\257\uff3d\001\002\000\016\030\u0152\145\u0159\153" +
    "\u0153\233\066\234\111\235\075\001\002\000\012\027\uff74" +
    "\151\uff74\152\uff74\155\uff74\001\002\000\062\003\uff50\044" +
    "\uff50\045\uff50\145\uff50\147\uff50\233\uff50\234\uff50\235\uff50" +
    "\237\uff50\240\uff50\242\uff50\243\uff50\244\uff50\245\uff50\246" +
    "\uff50\247\uff50\250\uff50\251\uff50\252\uff50\253\uff50\254\uff50" +
    "\255\uff50\256\uff50\257\uff50\001\002\000\012\027\uff6d\151" +
    "\uff6d\152\uff6d\155\uff6d\001\002\000\076\003\uff2b\044\uff2b" +
    "\045\uff2b\145\uff2b\146\uff2b\147\uff2b\154\uff2b\161\uff2b\162" +
    "\uff2b\163\uff2b\174\uff2b\233\uff2b\234\uff2b\235\uff2b\237\uff2b" +
    "\240\uff2b\242\uff2b\243\uff2b\244\uff2b\245\uff2b\246\uff2b\247" +
    "\uff2b\250\uff2b\251\uff2b\252\uff2b\253\uff2b\254\uff2b\255\uff2b" +
    "\256\uff2b\257\uff2b\001\002\000\016\030\u01b9\142\u01bb\145" +
    "\u01ba\233\066\234\111\235\075\001\002\000\064\003\uff46" +
    "\044\uff46\045\uff46\145\uff46\146\uff46\147\uff46\233\uff46\234" +
    "\uff46\235\uff46\237\uff46\240\uff46\242\uff46\243\uff46\244\uff46" +
    "\245\uff46\246\uff46\247\uff46\250\uff46\251\uff46\252\uff46\253" +
    "\uff46\254\uff46\255\uff46\256\uff46\257\uff46\001\002\000\066" +
    "\003\uff45\044\uff45\045\uff45\145\uff45\146\uff45\147\uff45\161" +
    "\uff45\233\uff45\234\uff45\235\uff45\237\uff45\240\uff45\242\uff45" +
    "\243\uff45\244\uff45\245\uff45\246\uff45\247\uff45\250\uff45\251" +
    "\uff45\252\uff45\253\uff45\254\uff45\255\uff45\256\uff45\257\uff45" +
    "\001\002\000\062\003\uff52\044\uff52\045\uff52\145\uff52\147" +
    "\uff52\233\uff52\234\uff52\235\uff52\237\uff52\240\uff52\242\uff52" +
    "\243\uff52\244\uff52\245\uff52\246\uff52\247\uff52\250\uff52\251" +
    "\uff52\252\uff52\253\uff52\254\uff52\255\uff52\256\uff52\257\uff52" +
    "\001\002\000\062\003\u016a\044\uff60\045\uff60\145\u0169\147" +
    "\uff60\233\uff60\234\uff60\235\uff60\237\uff60\240\uff60\242\uff60" +
    "\243\uff60\244\uff60\245\uff60\246\uff60\247\uff60\250\uff60\251" +
    "\uff60\252\uff60\253\uff60\254\uff60\255\uff60\256\uff60\257\uff60" +
    "\001\002\000\076\003\uff2c\044\uff2c\045\uff2c\145\uff2c\146" +
    "\uff2c\147\uff2c\154\uff2c\161\uff2c\162\uff2c\163\uff2c\174\uff2c" +
    "\233\uff2c\234\uff2c\235\uff2c\237\uff2c\240\uff2c\242\uff2c\243" +
    "\uff2c\244\uff2c\245\uff2c\246\uff2c\247\uff2c\250\uff2c\251\uff2c" +
    "\252\uff2c\253\uff2c\254\uff2c\255\uff2c\256\uff2c\257\uff2c\001" +
    "\002\000\020\030\u0152\142\u014e\145\u0159\153\u0153\233\066" +
    "\234\111\235\075\001\002\000\070\003\uff31\044\uff31\045" +
    "\uff31\145\uff31\146\uff31\147\uff31\161\uff31\162\uff31\233\uff31" +
    "\234\uff31\235\uff31\237\uff31\240\uff31\242\uff31\243\uff31\244" +
    "\uff31\245\uff31\246\uff31\247\uff31\250\uff31\251\uff31\252\uff31" +
    "\253\uff31\254\uff31\255\uff31\256\uff31\257\uff31\001\002\000" +
    "\062\003\uff53\044\uff53\045\uff53\145\uff53\147\uff53\233\uff53" +
    "\234\uff53\235\uff53\237\uff53\240\uff53\242\uff53\243\uff53\244" +
    "\uff53\245\uff53\246\uff53\247\uff53\250\uff53\251\uff53\252\uff53" +
    "\253\uff53\254\uff53\255\uff53\256\uff53\257\uff53\001\002\000" +
    "\076\003\uff35\044\uff35\045\uff35\145\uff35\146\uff35\147\uff35" +
    "\154\uff35\161\uff35\162\uff35\163\uff35\174\uff35\233\uff35\234" +
    "\uff35\235\uff35\237\uff35\240\uff35\242\uff35\243\uff35\244\uff35" +
    "\245\uff35\246\uff35\247\uff35\250\uff35\251\uff35\252\uff35\253" +
    "\uff35\254\uff35\255\uff35\256\uff35\257\uff35\001\002\000\012" +
    "\027\uff6e\151\uff6e\152\uff6e\155\uff6e\001\002\000\062\003" +
    "\uff51\044\uff51\045\uff51\145\uff51\147\uff51\233\uff51\234\uff51" +
    "\235\uff51\237\uff51\240\uff51\242\uff51\243\uff51\244\uff51\245" +
    "\uff51\246\uff51\247\uff51\250\uff51\251\uff51\252\uff51\253\uff51" +
    "\254\uff51\255\uff51\256\uff51\257\uff51\001\002\000\076\003" +
    "\uff32\044\uff32\045\uff32\145\uff32\146\uff32\147\uff32\154\u0160" +
    "\161\uff32\162\uff32\163\u0161\174\u0162\233\uff32\234\uff32\235" +
    "\uff32\237\uff32\240\uff32\242\uff32\243\uff32\244\uff32\245\uff32" +
    "\246\uff32\247\uff32\250\uff32\251\uff32\252\uff32\253\uff32\254" +
    "\uff32\255\uff32\256\uff32\257\uff32\001\002\000\070\003\uff2e" +
    "\044\uff2e\045\uff2e\145\uff2e\146\uff2e\147\uff2e\161\uff2e\162" +
    "\uff2e\233\uff2e\234\uff2e\235\uff2e\237\uff2e\240\uff2e\242\uff2e" +
    "\243\uff2e\244\uff2e\245\uff2e\246\uff2e\247\uff2e\250\uff2e\251" +
    "\uff2e\252\uff2e\253\uff2e\254\uff2e\255\uff2e\256\uff2e\257\uff2e" +
    "\001\002\000\070\003\uff2f\044\uff2f\045\uff2f\145\uff2f\146" +
    "\uff2f\147\uff2f\161\uff2f\162\uff2f\233\uff2f\234\uff2f\235\uff2f" +
    "\237\uff2f\240\uff2f\242\uff2f\243\uff2f\244\uff2f\245\uff2f\246" +
    "\uff2f\247\uff2f\250\uff2f\251\uff2f\252\uff2f\253\uff2f\254\uff2f" +
    "\255\uff2f\256\uff2f\257\uff2f\001\002\000\070\003\uff2d\044" +
    "\uff2d\045\uff2d\145\uff2d\146\uff2d\147\uff2d\161\uff2d\162\uff2d" +
    "\233\uff2d\234\uff2d\235\uff2d\237\uff2d\240\uff2d\242\uff2d\243" +
    "\uff2d\244\uff2d\245\uff2d\246\uff2d\247\uff2d\250\uff2d\251\uff2d" +
    "\252\uff2d\253\uff2d\254\uff2d\255\uff2d\256\uff2d\257\uff2d\001" +
    "\002\000\070\003\uff33\044\uff33\045\uff33\145\uff33\146\uff33" +
    "\147\uff33\161\uff33\162\uff33\233\uff33\234\uff33\235\uff33\237" +
    "\uff33\240\uff33\242\uff33\243\uff33\244\uff33\245\uff33\246\uff33" +
    "\247\uff33\250\uff33\251\uff33\252\uff33\253\uff33\254\uff33\255" +
    "\uff33\256\uff33\257\uff33\001\002\000\070\003\uff34\044\uff34" +
    "\045\uff34\145\uff34\146\uff34\147\uff34\161\uff34\162\uff34\233" +
    "\uff34\234\uff34\235\uff34\237\uff34\240\uff34\242\uff34\243\uff34" +
    "\244\uff34\245\uff34\246\uff34\247\uff34\250\uff34\251\uff34\252" +
    "\uff34\253\uff34\254\uff34\255\uff34\256\uff34\257\uff34\001\002" +
    "\000\004\146\u0166\001\002\000\076\003\uff29\044\uff29\045" +
    "\uff29\145\uff29\146\uff29\147\uff29\154\uff29\161\uff29\162\uff29" +
    "\163\uff29\174\uff29\233\uff29\234\uff29\235\uff29\237\uff29\240" +
    "\uff29\242\uff29\243\uff29\244\uff29\245\uff29\246\uff29\247\uff29" +
    "\250\uff29\251\uff29\252\uff29\253\uff29\254\uff29\255\uff29\256" +
    "\uff29\257\uff29\001\002\000\060\044\150\045\164\145\u013d" +
    "\147\u0131\233\066\234\111\235\075\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\257" +
    "\u012e\001\002\000\016\027\uff5d\150\uff5d\151\uff5d\152\uff5d" +
    "\155\uff5d\157\uff5d\001\002\000\044\003\u0170\146\uff69\237" +
    "\070\240\067\242\130\243\144\244\127\245\163\246\133" +
    "\247\162\250\156\251\123\252\154\253\147\254\146\255" +
    "\125\256\124\001\002\000\014\027\uff5b\150\uff5b\151\uff5b" +
    "\152\uff5b\155\uff5b\001\002\000\044\003\uff62\146\uff62\237" +
    "\uff62\240\uff62\242\uff62\243\uff62\244\uff62\245\uff62\246\uff62" +
    "\247\uff62\250\uff62\251\uff62\252\uff62\253\uff62\254\uff62\255" +
    "\uff62\256\uff62\001\002\000\044\003\uff67\146\uff68\237\uff67" +
    "\240\uff67\242\uff67\243\uff67\244\uff67\245\uff67\246\uff67\247" +
    "\uff67\250\uff67\251\uff67\252\uff67\253\uff67\254\uff67\255\uff67" +
    "\256\uff67\001\002\000\004\146\u0173\001\002\000\044\003" +
    "\uff63\146\uff63\237\uff63\240\uff63\242\uff63\243\uff63\244\uff63" +
    "\245\uff63\246\uff63\247\uff63\250\uff63\251\uff63\252\uff63\253" +
    "\uff63\254\uff63\255\uff63\256\uff63\001\002\000\004\146\uff6a" +
    "\001\002\000\044\003\u0170\146\uff65\237\070\240\067\242" +
    "\130\243\144\244\127\245\163\246\133\247\162\250\156" +
    "\251\123\252\154\253\147\254\146\255\125\256\124\001" +
    "\002\000\044\003\uff61\146\uff61\237\uff61\240\uff61\242\uff61" +
    "\243\uff61\244\uff61\245\uff61\246\uff61\247\uff61\250\uff61\251" +
    "\uff61\252\uff61\253\uff61\254\uff61\255\uff61\256\uff61\001\002" +
    "\000\004\146\uff64\001\002\000\016\027\uff6b\150\uff6b\151" +
    "\uff6b\152\uff6b\155\uff6b\157\uff6b\001\002\000\042\003\u0170" +
    "\237\070\240\067\242\130\243\144\244\127\245\163\246" +
    "\133\247\162\250\156\251\123\252\154\253\147\254\146" +
    "\255\125\256\124\001\002\000\004\146\uff66\001\002\000" +
    "\016\027\uff59\150\uff59\151\uff59\152\uff59\155\uff59\157\u0177" +
    "\001\002\000\026\003\u017b\030\u0152\142\u014e\145\u0159\153" +
    "\u0153\233\066\234\111\235\075\237\070\240\067\001\002" +
    "\000\014\027\uff5c\150\uff5c\151\uff5c\152\uff5c\155\uff5c\001" +
    "\002\000\014\027\uff5a\150\uff5a\151\uff5a\152\uff5a\155\uff5a" +
    "\001\002\000\060\044\150\045\164\145\u0187\147\u0185\233" +
    "\066\234\111\235\075\237\070\240\067\242\130\243\144" +
    "\244\127\245\163\246\133\247\162\250\156\251\123\252" +
    "\154\253\147\254\146\255\125\256\124\257\u012e\001\002" +
    "\000\016\027\uff56\150\uff56\151\uff56\152\uff56\155\uff56\157" +
    "\u0177\001\002\000\016\027\uff58\150\uff58\151\uff58\152\uff58" +
    "\155\uff58\157\u0177\001\002\000\014\027\uff57\150\uff57\151" +
    "\uff57\152\uff57\155\uff57\001\002\000\014\027\uff55\150\uff55" +
    "\151\uff55\152\uff55\155\uff55\001\002\000\100\027\uff1a\044" +
    "\uff1a\045\uff1a\145\uff1a\146\uff1a\147\uff1a\150\uff1a\151\uff1a" +
    "\152\uff1a\155\uff1a\156\uff1a\157\uff1a\233\uff1a\234\uff1a\235" +
    "\uff1a\237\uff1a\240\uff1a\242\uff1a\243\uff1a\244\uff1a\245\uff1a" +
    "\246\uff1a\247\uff1a\250\uff1a\251\uff1a\252\uff1a\253\uff1a\254" +
    "\uff1a\255\uff1a\256\uff1a\257\uff1a\001\002\000\020\027\uff78" +
    "\150\uff78\151\uff78\152\uff78\155\uff78\156\uff78\157\uff78\001" +
    "\002\000\100\027\uff0d\044\uff0d\045\uff0d\145\uff0d\146\uff0d" +
    "\147\uff0d\150\uff0d\151\uff0d\152\uff0d\155\uff0d\156\uff0d\157" +
    "\uff0d\233\uff0d\234\uff0d\235\uff0d\237\uff0d\240\uff0d\242\uff0d" +
    "\243\uff0d\244\uff0d\245\uff0d\246\uff0d\247\uff0d\250\uff0d\251" +
    "\uff0d\252\uff0d\253\uff0d\254\uff0d\255\uff0d\256\uff0d\257\uff0d" +
    "\001\002\000\020\027\uff7d\150\uff7d\151\uff7d\152\uff7d\155" +
    "\uff7d\156\u019d\157\uff7d\001\002\000\100\027\uff19\044\uff19" +
    "\045\uff19\145\uff19\146\uff19\147\uff19\150\uff19\151\uff19\152" +
    "\uff19\155\uff19\156\uff19\157\uff19\233\uff19\234\uff19\235\uff19" +
    "\237\uff19\240\uff19\242\uff19\243\uff19\244\uff19\245\uff19\246" +
    "\uff19\247\uff19\250\uff19\251\uff19\252\uff19\253\uff19\254\uff19" +
    "\255\uff19\256\uff19\257\uff19\001\002\000\016\027\uff54\150" +
    "\uff54\151\uff54\152\uff54\155\uff54\157\uff54\001\002\000\016" +
    "\030\u018d\233\066\234\111\235\075\237\070\240\067\001" +
    "\002\000\100\027\uff0e\044\uff0e\045\uff0e\145\uff0e\146\uff0e" +
    "\147\uff0e\150\uff0e\151\uff0e\152\uff0e\155\uff0e\156\uff0e\157" +
    "\uff0e\233\uff0e\234\uff0e\235\uff0e\237\uff0e\240\uff0e\242\uff0e" +
    "\243\uff0e\244\uff0e\245\uff0e\246\uff0e\247\uff0e\250\uff0e\251" +
    "\uff0e\252\uff0e\253\uff0e\254\uff0e\255\uff0e\256\uff0e\257\uff0e" +
    "\001\002\000\060\044\150\045\164\145\u0187\147\u0185\233" +
    "\066\234\111\235\075\237\070\240\067\242\130\243\144" +
    "\244\127\245\163\246\133\247\162\250\156\251\123\252" +
    "\154\253\147\254\146\255\125\256\124\257\u012e\001\002" +
    "\000\062\044\150\045\164\145\u0187\146\uff13\147\u0185\233" +
    "\066\234\111\235\075\237\070\240\067\242\130\243\144" +
    "\244\127\245\163\246\133\247\162\250\156\251\123\252" +
    "\154\253\147\254\146\255\125\256\124\257\u012e\001\002" +
    "\000\004\146\u018a\001\002\000\100\027\uff14\044\uff14\045" +
    "\uff14\145\uff14\146\uff14\147\uff14\150\uff14\151\uff14\152\uff14" +
    "\155\uff14\156\uff14\157\uff14\233\uff14\234\uff14\235\uff14\237" +
    "\uff14\240\uff14\242\uff14\243\uff14\244\uff14\245\uff14\246\uff14" +
    "\247\uff14\250\uff14\251\uff14\252\uff14\253\uff14\254\uff14\255" +
    "\uff14\256\uff14\257\uff14\001\002\000\004\146\uff12\001\002" +
    "\000\004\150\u019c\001\002\000\060\044\uff80\045\uff80\145" +
    "\uff80\147\uff80\233\uff80\234\uff80\235\uff80\237\uff80\240\uff80" +
    "\242\uff80\243\uff80\244\uff80\245\uff80\246\uff80\247\uff80\250" +
    "\uff80\251\uff80\252\uff80\253\uff80\254\uff80\255\uff80\256\uff80" +
    "\257\uff80\001\002\000\060\044\uff81\045\uff81\145\uff81\147" +
    "\uff81\233\uff81\234\uff81\235\uff81\237\uff81\240\uff81\242\uff81" +
    "\243\uff81\244\uff81\245\uff81\246\uff81\247\uff81\250\uff81\251" +
    "\uff81\252\uff81\253\uff81\254\uff81\255\uff81\256\uff81\257\uff81" +
    "\001\002\000\060\044\uff07\045\uff07\145\uff07\147\uff07\233" +
    "\uff07\234\uff07\235\uff07\237\uff07\240\uff07\242\uff07\243\uff07" +
    "\244\uff07\245\uff07\246\uff07\247\uff07\250\uff07\251\uff07\252" +
    "\uff07\253\uff07\254\uff07\255\uff07\256\uff07\257\uff07\001\002" +
    "\000\060\044\150\045\164\145\u0187\147\u0185\233\066\234" +
    "\111\235\075\237\070\240\067\242\130\243\144\244\127" +
    "\245\163\246\133\247\162\250\156\251\123\252\154\253" +
    "\147\254\146\255\125\256\124\257\u012e\001\002\000\060" +
    "\044\uff08\045\uff08\145\uff08\147\uff08\233\uff08\234\uff08\235" +
    "\uff08\237\uff08\240\uff08\242\uff08\243\uff08\244\uff08\245\uff08" +
    "\246\uff08\247\uff08\250\uff08\251\uff08\252\uff08\253\uff08\254" +
    "\uff08\255\uff08\256\uff08\257\uff08\001\002\000\006\150\uff89" +
    "\157\u0193\001\002\000\020\003\u0198\030\u018d\233\066\234" +
    "\111\235\075\237\070\240\067\001\002\000\004\150\uff88" +
    "\001\002\000\004\150\uff86\001\002\000\006\150\uff85\157" +
    "\u0193\001\002\000\060\044\150\045\164\145\u0187\147\u0185" +
    "\233\066\234\111\235\075\237\070\240\067\242\130\243" +
    "\144\244\127\245\163\246\133\247\162\250\156\251\123" +
    "\252\154\253\147\254\146\255\125\256\124\257\u012e\001" +
    "\002\000\006\150\uff83\157\u0193\001\002\000\004\150\uff82" +
    "\001\002\000\006\150\uff87\157\uff87\001\002\000\004\150" +
    "\uff84\001\002\000\100\027\uff18\044\uff18\045\uff18\145\uff18" +
    "\146\uff18\147\uff18\150\uff18\151\uff18\152\uff18\155\uff18\156" +
    "\uff18\157\uff18\233\uff18\234\uff18\235\uff18\237\uff18\240\uff18" +
    "\242\uff18\243\uff18\244\uff18\245\uff18\246\uff18\247\uff18\250" +
    "\uff18\251\uff18\252\uff18\253\uff18\254\uff18\255\uff18\256\uff18" +
    "\257\uff18\001\002\000\062\003\u01a1\044\150\045\164\145" +
    "\u0187\147\u0185\233\066\234\111\235\075\237\070\240\067" +
    "\242\130\243\144\244\127\245\163\246\133\247\162\250" +
    "\156\251\123\252\154\253\147\254\146\255\125\256\124" +
    "\257\u012e\001\002\000\016\027\uff7f\150\uff7f\151\uff7f\152" +
    "\uff7f\155\uff7f\157\uff7f\001\002\000\016\027\uff7e\150\uff7e" +
    "\151\uff7e\152\uff7e\155\uff7e\157\uff7e\001\002\000\020\027" +
    "\uff7c\150\uff7c\151\uff7c\152\uff7c\155\uff7c\156\u019d\157\uff7c" +
    "\001\002\000\020\027\uff7a\150\uff7a\151\uff7a\152\uff7a\155" +
    "\uff7a\156\u019d\157\uff7a\001\002\000\016\027\uff79\150\uff79" +
    "\151\uff79\152\uff79\155\uff79\157\uff79\001\002\000\016\027" +
    "\uff7b\150\uff7b\151\uff7b\152\uff7b\155\uff7b\157\uff7b\001\002" +
    "\000\020\027\uff47\150\uff47\151\uff47\152\uff47\155\uff47\156" +
    "\uff47\157\uff47\001\002\000\020\027\uff4f\150\uff4f\151\uff4f" +
    "\152\uff4f\155\uff4f\156\uff4e\157\uff4f\001\002\000\016\027" +
    "\uff5f\150\uff5f\151\uff5f\152\uff5f\155\uff5f\157\uff5f\001\002" +
    "\000\016\027\uff59\150\uff59\151\uff59\152\uff59\155\uff59\157" +
    "\u0177\001\002\000\014\027\uff5e\150\uff5e\151\uff5e\152\uff5e" +
    "\155\uff5e\001\002\000\004\156\u01aa\001\002\000\062\003" +
    "\u01ad\044\150\045\164\145\u013d\147\u0131\233\066\234\111" +
    "\235\075\237\070\240\067\242\130\243\144\244\127\245" +
    "\163\246\133\247\162\250\156\251\123\252\154\253\147" +
    "\254\146\255\125\256\124\257\u012e\001\002\000\016\027" +
    "\uff4d\150\uff4d\151\uff4d\152\uff4d\155\uff4d\157\uff4d\001\002" +
    "\000\016\027\uff4c\150\uff4c\151\uff4c\152\uff4c\155\uff4c\157" +
    "\uff4c\001\002\000\020\027\uff49\150\uff49\151\uff49\152\uff49" +
    "\155\uff49\156\u01aa\157\uff49\001\002\000\020\027\uff4b\150" +
    "\uff4b\151\uff4b\152\uff4b\155\uff4b\156\u01aa\157\uff4b\001\002" +
    "\000\016\027\uff4a\150\uff4a\151\uff4a\152\uff4a\155\uff4a\157" +
    "\uff4a\001\002\000\016\027\uff48\150\uff48\151\uff48\152\uff48" +
    "\155\uff48\157\uff48\001\002\000\066\003\uff42\044\uff42\045" +
    "\uff42\145\uff42\146\uff42\147\uff42\161\u01b3\233\uff42\234\uff42" +
    "\235\uff42\237\uff42\240\uff42\242\uff42\243\uff42\244\uff42\245" +
    "\uff42\246\uff42\247\uff42\250\uff42\251\uff42\252\uff42\253\uff42" +
    "\254\uff42\255\uff42\256\uff42\257\uff42\001\002\000\064\003" +
    "\uff44\044\uff44\045\uff44\145\uff44\146\uff44\147\uff44\233\uff44" +
    "\234\uff44\235\uff44\237\uff44\240\uff44\242\uff44\243\uff44\244" +
    "\uff44\245\uff44\246\uff44\247\uff44\250\uff44\251\uff44\252\uff44" +
    "\253\uff44\254\uff44\255\uff44\256\uff44\257\uff44\001\002\000" +
    "\022\003\u01b6\030\u0152\142\u014e\145\u0159\153\u0153\233\066" +
    "\234\111\235\075\001\002\000\064\003\uff43\044\uff43\045" +
    "\uff43\145\uff43\146\uff43\147\uff43\233\uff43\234\uff43\235\uff43" +
    "\237\uff43\240\uff43\242\uff43\243\uff43\244\uff43\245\uff43\246" +
    "\uff43\247\uff43\250\uff43\251\uff43\252\uff43\253\uff43\254\uff43" +
    "\255\uff43\256\uff43\257\uff43\001\002\000\066\003\uff41\044" +
    "\uff41\045\uff41\145\uff41\146\uff41\147\uff41\161\u01b3\233\uff41" +
    "\234\uff41\235\uff41\237\uff41\240\uff41\242\uff41\243\uff41\244" +
    "\uff41\245\uff41\246\uff41\247\uff41\250\uff41\251\uff41\252\uff41" +
    "\253\uff41\254\uff41\255\uff41\256\uff41\257\uff41\001\002\000" +
    "\066\003\uff3f\044\uff3f\045\uff3f\145\uff3f\146\uff3f\147\uff3f" +
    "\161\u01b3\233\uff3f\234\uff3f\235\uff3f\237\uff3f\240\uff3f\242" +
    "\uff3f\243\uff3f\244\uff3f\245\uff3f\246\uff3f\247\uff3f\250\uff3f" +
    "\251\uff3f\252\uff3f\253\uff3f\254\uff3f\255\uff3f\256\uff3f\257" +
    "\uff3f\001\002\000\064\003\uff3e\044\uff3e\045\uff3e\145\uff3e" +
    "\146\uff3e\147\uff3e\233\uff3e\234\uff3e\235\uff3e\237\uff3e\240" +
    "\uff3e\242\uff3e\243\uff3e\244\uff3e\245\uff3e\246\uff3e\247\uff3e" +
    "\250\uff3e\251\uff3e\252\uff3e\253\uff3e\254\uff3e\255\uff3e\256" +
    "\uff3e\257\uff3e\001\002\000\064\003\uff40\044\uff40\045\uff40" +
    "\145\uff40\146\uff40\147\uff40\233\uff40\234\uff40\235\uff40\237" +
    "\uff40\240\uff40\242\uff40\243\uff40\244\uff40\245\uff40\246\uff40" +
    "\247\uff40\250\uff40\251\uff40\252\uff40\253\uff40\254\uff40\255" +
    "\uff40\256\uff40\257\uff40\001\002\000\012\030\u01cd\233\066" +
    "\234\111\235\075\001\002\000\016\030\u01b9\142\u01bb\146" +
    "\uff25\233\066\234\111\235\075\001\002\000\012\030\u01c1" +
    "\233\066\234\111\235\075\001\002\000\076\003\uff2a\044" +
    "\uff2a\045\uff2a\145\uff2a\146\uff2a\147\uff2a\154\uff2a\161\uff2a" +
    "\162\uff2a\163\uff2a\174\uff2a\233\uff2a\234\uff2a\235\uff2a\237" +
    "\uff2a\240\uff2a\242\uff2a\243\uff2a\244\uff2a\245\uff2a\246\uff2a" +
    "\247\uff2a\250\uff2a\251\uff2a\252\uff2a\253\uff2a\254\uff2a\255" +
    "\uff2a\256\uff2a\257\uff2a\001\002\000\076\003\uff28\044\uff28" +
    "\045\uff28\145\uff28\146\uff28\147\uff28\154\uff28\161\uff28\162" +
    "\uff28\163\uff28\174\uff28\233\uff28\234\uff28\235\uff28\237\uff28" +
    "\240\uff28\242\uff28\243\uff28\244\uff28\245\uff28\246\uff28\247" +
    "\uff28\250\uff28\251\uff28\252\uff28\253\uff28\254\uff28\255\uff28" +
    "\256\uff28\257\uff28\001\002\000\012\030\u01bf\233\066\234" +
    "\111\235\075\001\002\000\102\003\uff1f\030\uff1f\044\uff1f" +
    "\045\uff1f\142\uff1f\145\uff1f\146\uff1f\147\uff1f\154\uff1f\161" +
    "\uff1f\162\uff1f\163\uff1f\174\uff1f\233\uff1f\234\uff1f\235\uff1f" +
    "\237\uff1f\240\uff1f\242\uff1f\243\uff1f\244\uff1f\245\uff1f\246" +
    "\uff1f\247\uff1f\250\uff1f\251\uff1f\252\uff1f\253\uff1f\254\uff1f" +
    "\255\uff1f\256\uff1f\257\uff1f\001\002\000\102\003\uff20\030" +
    "\uff20\044\uff20\045\uff20\142\uff20\145\uff20\146\uff20\147\uff20" +
    "\154\uff20\161\uff20\162\uff20\163\uff20\174\uff20\233\uff20\234" +
    "\uff20\235\uff20\237\uff20\240\uff20\242\uff20\243\uff20\244\uff20" +
    "\245\uff20\246\uff20\247\uff20\250\uff20\251\uff20\252\uff20\253" +
    "\uff20\254\uff20\255\uff20\256\uff20\257\uff20\001\002\000\102" +
    "\003\uff1b\030\uff1b\044\uff1b\045\uff1b\142\uff1b\145\uff1b\146" +
    "\uff1b\147\uff1b\154\uff1b\161\uff1b\162\uff1b\163\uff1b\174\uff1b" +
    "\233\uff1b\234\uff1b\235\uff1b\237\uff1b\240\uff1b\242\uff1b\243" +
    "\uff1b\244\uff1b\245\uff1b\246\uff1b\247\uff1b\250\uff1b\251\uff1b" +
    "\252\uff1b\253\uff1b\254\uff1b\255\uff1b\256\uff1b\257\uff1b\001" +
    "\002\000\102\003\uff1c\030\uff1c\044\uff1c\045\uff1c\142\uff1c" +
    "\145\uff1c\146\uff1c\147\uff1c\154\uff1c\161\uff1c\162\uff1c\163" +
    "\uff1c\174\uff1c\233\uff1c\234\uff1c\235\uff1c\237\uff1c\240\uff1c" +
    "\242\uff1c\243\uff1c\244\uff1c\245\uff1c\246\uff1c\247\uff1c\250" +
    "\uff1c\251\uff1c\252\uff1c\253\uff1c\254\uff1c\255\uff1c\256\uff1c" +
    "\257\uff1c\001\002\000\004\146\u01cc\001\002\000\020\030" +
    "\u01b9\142\u01bb\146\uff23\161\u01c5\233\066\234\111\235\075" +
    "\001\002\000\014\030\u01b9\142\u01bb\233\066\234\111\235" +
    "\075\001\002\000\004\146\uff26\001\002\000\004\161\u01c9" +
    "\001\002\000\004\146\uff24\001\002\000\016\030\u01b9\142" +
    "\u01bb\161\u01c5\233\066\234\111\235\075\001\002\000\004" +
    "\146\uff21\001\002\000\004\146\uff22\001\002\000\076\003" +
    "\uff27\044\uff27\045\uff27\145\uff27\146\uff27\147\uff27\154\uff27" +
    "\161\uff27\162\uff27\163\uff27\174\uff27\233\uff27\234\uff27\235" +
    "\uff27\237\uff27\240\uff27\242\uff27\243\uff27\244\uff27\245\uff27" +
    "\246\uff27\247\uff27\250\uff27\251\uff27\252\uff27\253\uff27\254" +
    "\uff27\255\uff27\256\uff27\257\uff27\001\002\000\102\003\uff1d" +
    "\030\uff1d\044\uff1d\045\uff1d\142\uff1d\145\uff1d\146\uff1d\147" +
    "\uff1d\154\uff1d\161\uff1d\162\uff1d\163\uff1d\174\uff1d\233\uff1d" +
    "\234\uff1d\235\uff1d\237\uff1d\240\uff1d\242\uff1d\243\uff1d\244" +
    "\uff1d\245\uff1d\246\uff1d\247\uff1d\250\uff1d\251\uff1d\252\uff1d" +
    "\253\uff1d\254\uff1d\255\uff1d\256\uff1d\257\uff1d\001\002\000" +
    "\102\003\uff1e\030\uff1e\044\uff1e\045\uff1e\142\uff1e\145\uff1e" +
    "\146\uff1e\147\uff1e\154\uff1e\161\uff1e\162\uff1e\163\uff1e\174" +
    "\uff1e\233\uff1e\234\uff1e\235\uff1e\237\uff1e\240\uff1e\242\uff1e" +
    "\243\uff1e\244\uff1e\245\uff1e\246\uff1e\247\uff1e\250\uff1e\251" +
    "\uff1e\252\uff1e\253\uff1e\254\uff1e\255\uff1e\256\uff1e\257\uff1e" +
    "\001\002\000\070\003\uff30\044\uff30\045\uff30\145\uff30\146" +
    "\uff30\147\uff30\161\uff30\162\uff30\233\uff30\234\uff30\235\uff30" +
    "\237\uff30\240\uff30\242\uff30\243\uff30\244\uff30\245\uff30\246" +
    "\uff30\247\uff30\250\uff30\251\uff30\252\uff30\253\uff30\254\uff30" +
    "\255\uff30\256\uff30\257\uff30\001\002\000\070\003\uff3a\044" +
    "\uff3a\045\uff3a\145\uff3a\146\uff3a\147\uff3a\161\uff3a\162\u01d1" +
    "\233\uff3a\234\uff3a\235\uff3a\237\uff3a\240\uff3a\242\uff3a\243" +
    "\uff3a\244\uff3a\245\uff3a\246\uff3a\247\uff3a\250\uff3a\251\uff3a" +
    "\252\uff3a\253\uff3a\254\uff3a\255\uff3a\256\uff3a\257\uff3a\001" +
    "\002\000\022\003\u01d5\030\u0152\142\u014e\145\u0159\153\u0153" +
    "\233\066\234\111\235\075\001\002\000\066\003\uff3c\044" +
    "\uff3c\045\uff3c\145\uff3c\146\uff3c\147\uff3c\161\uff3c\233\uff3c" +
    "\234\uff3c\235\uff3c\237\uff3c\240\uff3c\242\uff3c\243\uff3c\244" +
    "\uff3c\245\uff3c\246\uff3c\247\uff3c\250\uff3c\251\uff3c\252\uff3c" +
    "\253\uff3c\254\uff3c\255\uff3c\256\uff3c\257\uff3c\001\002\000" +
    "\066\003\uff3b\044\uff3b\045\uff3b\145\uff3b\146\uff3b\147\uff3b" +
    "\161\uff3b\233\uff3b\234\uff3b\235\uff3b\237\uff3b\240\uff3b\242" +
    "\uff3b\243\uff3b\244\uff3b\245\uff3b\246\uff3b\247\uff3b\250\uff3b" +
    "\251\uff3b\252\uff3b\253\uff3b\254\uff3b\255\uff3b\256\uff3b\257" +
    "\uff3b\001\002\000\070\003\uff39\044\uff39\045\uff39\145\uff39" +
    "\146\uff39\147\uff39\161\uff39\162\u01d1\233\uff39\234\uff39\235" +
    "\uff39\237\uff39\240\uff39\242\uff39\243\uff39\244\uff39\245\uff39" +
    "\246\uff39\247\uff39\250\uff39\251\uff39\252\uff39\253\uff39\254" +
    "\uff39\255\uff39\256\uff39\257\uff39\001\002\000\070\003\uff37" +
    "\044\uff37\045\uff37\145\uff37\146\uff37\147\uff37\161\uff37\162" +
    "\u01d1\233\uff37\234\uff37\235\uff37\237\uff37\240\uff37\242\uff37" +
    "\243\uff37\244\uff37\245\uff37\246\uff37\247\uff37\250\uff37\251" +
    "\uff37\252\uff37\253\uff37\254\uff37\255\uff37\256\uff37\257\uff37" +
    "\001\002\000\066\003\uff36\044\uff36\045\uff36\145\uff36\146" +
    "\uff36\147\uff36\161\uff36\233\uff36\234\uff36\235\uff36\237\uff36" +
    "\240\uff36\242\uff36\243\uff36\244\uff36\245\uff36\246\uff36\247" +
    "\uff36\250\uff36\251\uff36\252\uff36\253\uff36\254\uff36\255\uff36" +
    "\256\uff36\257\uff36\001\002\000\066\003\uff38\044\uff38\045" +
    "\uff38\145\uff38\146\uff38\147\uff38\161\uff38\233\uff38\234\uff38" +
    "\235\uff38\237\uff38\240\uff38\242\uff38\243\uff38\244\uff38\245" +
    "\uff38\246\uff38\247\uff38\250\uff38\251\uff38\252\uff38\253\uff38" +
    "\254\uff38\255\uff38\256\uff38\257\uff38\001\002\000\012\027" +
    "\uff72\151\uff72\152\uff72\155\uff72\001\002\000\010\027\u012b" +
    "\151\022\152\uffa8\001\002\000\004\152\u01db\001\002\000" +
    "\076\002\uffac\003\uffac\012\uffac\013\uffac\015\uffac\016\uffac" +
    "\044\uffac\045\uffac\145\uffac\147\uffac\155\uffac\233\uffac\234" +
    "\uffac\235\uffac\237\uffac\240\uffac\242\uffac\243\uffac\244\uffac" +
    "\245\uffac\246\uffac\247\uffac\250\uffac\251\uffac\252\uffac\253" +
    "\uffac\254\uffac\255\uffac\256\uffac\257\uffac\001\002\000\004" +
    "\003\u01df\001\002\000\024\030\u0152\142\u014e\145\u0159\153" +
    "\u0153\233\066\234\111\235\075\237\070\240\067\001\002" +
    "\000\012\027\uff76\151\uff76\152\uff76\155\uff76\001\002\000" +
    "\012\027\uff70\151\uff70\152\uff70\155\uff70\001\002\000\004" +
    "\150\u01e1\001\002\000\110\003\uff15\027\uff15\030\uff15\044" +
    "\uff15\045\uff15\142\uff15\145\uff15\146\uff15\147\uff15\150\uff15" +
    "\151\uff15\152\uff15\153\uff15\155\uff15\156\uff15\157\uff15\233" +
    "\uff15\234\uff15\235\uff15\237\uff15\240\uff15\242\uff15\243\uff15" +
    "\244\uff15\245\uff15\246\uff15\247\uff15\250\uff15\251\uff15\252" +
    "\uff15\253\uff15\254\uff15\255\uff15\256\uff15\257\uff15\001\002" +
    "\000\004\152\u01e3\001\002\000\076\002\uffae\003\uffae\012" +
    "\uffae\013\uffae\015\uffae\016\uffae\044\uffae\045\uffae\145\uffae" +
    "\147\uffae\155\uffae\233\uffae\234\uffae\235\uffae\237\uffae\240" +
    "\uffae\242\uffae\243\uffae\244\uffae\245\uffae\246\uffae\247\uffae" +
    "\250\uffae\251\uffae\252\uffae\253\uffae\254\uffae\255\uffae\256" +
    "\uffae\257\uffae\001\002\000\062\044\uff9a\045\uff9a\145\uff9a" +
    "\147\uff9a\155\uff9a\233\uff9a\234\uff9a\235\uff9a\237\uff9a\240" +
    "\uff9a\242\uff9a\243\uff9a\244\uff9a\245\uff9a\246\uff9a\247\uff9a" +
    "\250\uff9a\251\uff9a\252\uff9a\253\uff9a\254\uff9a\255\uff9a\256" +
    "\uff9a\257\uff9a\001\002\000\004\152\u01e6\001\002\000\076" +
    "\002\uffb0\003\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\044" +
    "\uffb0\045\uffb0\145\uffb0\147\uffb0\155\uffb0\233\uffb0\234\uffb0" +
    "\235\uffb0\237\uffb0\240\uffb0\242\uffb0\243\uffb0\244\uffb0\245" +
    "\uffb0\246\uffb0\247\uffb0\250\uffb0\251\uffb0\252\uffb0\253\uffb0" +
    "\254\uffb0\255\uffb0\256\uffb0\257\uffb0\001\002\000\014\003" +
    "\042\012\043\013\034\015\033\016\036\001\002\000\004" +
    "\152\uffe5\001\002\000\060\044\150\045\164\145\u013d\147" +
    "\u0131\233\066\234\111\235\075\237\070\240\067\242\130" +
    "\243\144\244\127\245\163\246\133\247\162\250\156\251" +
    "\123\252\154\253\147\254\146\255\125\256\124\257\u012e" +
    "\001\002\000\010\027\uffa3\151\uffa3\152\uffa3\001\002\000" +
    "\010\027\uffa4\151\uffa4\152\uffa4\001\002\000\004\002\001" +
    "\001\002\000\020\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\023\ufff3\151\ufff3\001\002\000\020\002\ufff4\003\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\023\ufff4\151\ufff4\001\002\000" +
    "\004\002\uffe9\001\002\000\006\002\uffea\013\u0116\001\002" +
    "\000\020\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\023" +
    "\ufff1\151\ufff1\001\002\000\006\003\u01f3\233\u01f4\001\002" +
    "\000\020\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\023" +
    "\ufff0\151\ufff0\001\002\000\020\002\ufff2\003\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\023\ufff2\151\ufff2\001\002\000\012\002" +
    "\uffde\003\uffde\023\uffde\151\uffde\001\002\000\130\031\045" +
    "\036\064\037\102\040\046\041\062\042\055\043\052\044" +
    "\150\045\164\046\135\114\056\115\065\116\074\117\107" +
    "\127\054\130\106\131\063\132\112\133\110\135\077\137" +
    "\051\145\105\153\153\174\126\175\141\233\066\234\111" +
    "\235\075\237\070\240\067\242\130\243\144\244\127\245" +
    "\163\246\133\247\162\250\156\251\123\252\154\253\147" +
    "\254\146\255\125\256\124\001\002\000\012\002\uffdd\003" +
    "\uffdd\023\uffdd\151\uffdd\001\002\000\012\145\u01f6\154\u01fd" +
    "\237\070\240\067\001\002\000\020\002\uffe3\003\uffe3\023" +
    "\uffe3\145\u01f6\151\uffe3\237\070\240\067\001\002\000\012" +
    "\002\uffdc\003\uffdc\023\uffdc\151\uffdc\001\002\000\020\002" +
    "\uffe1\003\uffe1\023\uffe1\145\uffe1\151\uffe1\237\uffe1\240\uffe1" +
    "\001\002\000\012\002\uffe2\003\uffe2\023\uffe2\151\uffe2\001" +
    "\002\000\012\002\uffdf\003\uffdf\023\uffdf\151\uffdf\001\002" +
    "\000\012\002\uffe4\003\uffe4\023\uffe4\151\uffe4\001\002\000" +
    "\004\051\u0200\001\002\000\006\237\070\240\067\001\002" +
    "\000\004\146\u0202\001\002\000\020\002\uffe0\003\uffe0\023" +
    "\uffe0\145\uffe0\151\uffe0\237\uffe0\240\uffe0\001\002\000\004" +
    "\002\ufffe\001\002\000\016\002\uffd9\003\uffd9\012\uffd9\013" +
    "\uffd9\015\uffd9\016\uffd9\001\002\000\016\002\uffdb\003\uffdb" +
    "\012\uffdb\013\uffdb\015\uffdb\016\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0203\000\032\005\004\006\013\007\015\010\022\011" +
    "\006\012\024\013\017\015\010\024\011\213\023\214\020" +
    "\215\012\001\001\000\004\024\u0204\001\001\000\012\013" +
    "\u0202\015\010\024\011\213\023\001\001\000\010\124\u01f8" +
    "\204\u01fa\212\u01f4\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\u01ee\017\031\021\036\022\037\023\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\u0137\014" +
    "\u0126\024\u012f\025\u012b\026\u0123\027\u013a\030\u0127\057\u0136" +
    "\060\u012c\062\u012e\066\u0129\112\u0134\113\u0125\114\133\115" +
    "\131\116\117\117\u013d\120\154\121\u0133\122\102\123\u0139" +
    "\202\u0138\203\u0135\204\u0128\205\u0131\213\u0124\001\001\000" +
    "\002\001\001\000\006\015\026\024\011\001\001\000\012" +
    "\006\013\007\015\011\025\012\024\001\001\000\002\001" +
    "\001\000\014\016\u0121\017\031\021\036\022\037\023\040" +
    "\001\001\000\004\221\030\001\001\000\014\016\034\017" +
    "\031\021\036\022\037\023\040\001\001\000\010\021\u011f" +
    "\022\037\023\040\001\001\000\004\222\u011c\001\001\000" +
    "\030\020\075\031\056\032\052\103\060\104\043\105\077" +
    "\110\057\121\072\122\102\130\u011b\204\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0118\001\001\000\004\022\u0117\001\001\000\002\001" +
    "\001\000\030\020\075\031\056\032\052\103\060\104\043" +
    "\105\077\110\057\121\072\122\102\130\103\204\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\u010e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\020\075\031\056\032\052\103\060\104\043\105\077\110" +
    "\057\121\072\122\102\130\337\204\047\001\001\000\002" +
    "\001\001\000\004\033\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\020\075\031\056\032\052\103\060" +
    "\104\043\105\077\110\057\121\072\122\102\130\327\204" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\067\314\070\160\071\120\072\116" +
    "\073\165\074\156\075\136\076\144\101\135\102\142\103" +
    "\141\104\121\105\077\110\057\111\137\112\151\113\115" +
    "\114\133\115\131\116\117\117\164\120\154\121\150\122" +
    "\102\204\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\133\114\001\001\000\002\001\001\000\064\067\157" +
    "\070\160\071\120\072\116\073\165\074\156\075\136\076" +
    "\144\101\135\102\142\103\141\104\121\105\077\110\057" +
    "\111\137\112\151\113\115\114\133\115\131\116\117\117" +
    "\164\120\154\121\150\122\102\204\130\001\001\000\002" +
    "\001\001\000\006\165\271\166\272\001\001\000\002\001" +
    "\001\000\064\071\261\072\116\073\165\074\156\075\136" +
    "\076\144\101\135\102\142\103\141\104\121\105\077\110" +
    "\057\111\137\112\151\113\115\114\133\115\131\116\117" +
    "\117\164\120\154\121\150\122\102\163\264\164\262\204" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\102\260\103\141\104" +
    "\121\105\077\110\057\111\137\112\151\113\115\114\133" +
    "\115\131\116\117\117\164\120\154\121\150\122\102\204" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\077\242" +
    "\100\246\115\245\116\244\001\001\000\002\001\001\000" +
    "\042\102\241\103\141\104\121\105\077\110\057\111\137" +
    "\112\151\113\115\114\133\115\131\116\117\117\164\120" +
    "\154\121\150\122\102\204\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\226\001\001\000\002\001\001\000\042\102\225\103" +
    "\141\104\121\105\077\110\057\111\137\112\151\113\115" +
    "\114\133\115\131\116\117\117\164\120\154\121\150\122" +
    "\102\204\130\001\001\000\002\001\001\000\006\242\221" +
    "\243\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\074\217\075\136\076\144" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\052\074" +
    "\216\075\136\076\144\101\135\102\142\103\141\104\121" +
    "\105\077\110\057\111\137\112\151\113\115\114\133\115" +
    "\131\116\117\117\164\120\154\121\150\122\102\204\130" +
    "\001\001\000\004\034\203\001\001\000\052\074\201\075" +
    "\136\076\144\101\135\102\142\103\141\104\121\105\077" +
    "\110\057\111\137\112\151\113\115\114\133\115\131\116" +
    "\117\117\164\120\154\121\150\122\102\204\130\001\001" +
    "\000\052\074\200\075\136\076\144\101\135\102\142\103" +
    "\141\104\121\105\077\110\057\111\137\112\151\113\115" +
    "\114\133\115\131\116\117\117\164\120\154\121\150\122" +
    "\102\204\130\001\001\000\052\074\177\075\136\076\144" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\052\074" +
    "\176\075\136\076\144\101\135\102\142\103\141\104\121" +
    "\105\077\110\057\111\137\112\151\113\115\114\133\115" +
    "\131\116\117\117\164\120\154\121\150\122\102\204\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\067\205\070\160\071\120" +
    "\072\116\073\165\074\156\075\136\076\144\101\135\102" +
    "\142\103\141\104\121\105\077\110\057\111\137\112\151" +
    "\113\115\114\133\115\131\116\117\117\164\120\154\121" +
    "\150\122\102\204\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\134\207\135\210\001\001\000\064\067" +
    "\213\070\160\071\120\072\116\073\165\074\156\075\136" +
    "\076\144\101\135\102\142\103\141\104\121\105\077\110" +
    "\057\111\137\112\151\113\115\114\133\115\131\116\117" +
    "\117\164\120\154\121\150\122\102\204\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\135\215\001\001\000\004\135\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\121\224\122\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\133\231\001\001\000" +
    "\002\001\001\000\064\067\232\070\160\071\120\072\116" +
    "\073\165\074\156\075\136\076\144\101\135\102\142\103" +
    "\141\104\121\105\077\110\057\111\137\112\151\113\115" +
    "\114\133\115\131\116\117\117\164\120\154\121\150\122" +
    "\102\204\130\001\001\000\006\134\233\135\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\101\240\102" +
    "\142\103\141\104\121\105\077\110\057\111\137\112\151" +
    "\113\115\114\133\115\131\116\117\117\164\120\154\121" +
    "\150\122\102\204\130\001\001\000\044\101\237\102\142" +
    "\103\141\104\121\105\077\110\057\111\137\112\151\113" +
    "\115\114\133\115\131\116\117\117\164\120\154\121\150" +
    "\122\102\204\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\076\251" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\076\250" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\101\255\102\142\103\141" +
    "\104\121\105\077\110\057\111\137\112\151\113\115\114" +
    "\133\115\131\116\117\117\164\120\154\121\150\122\102" +
    "\204\130\001\001\000\044\101\254\102\142\103\141\104" +
    "\121\105\077\110\057\111\137\112\151\113\115\114\133" +
    "\115\131\116\117\117\164\120\154\121\150\122\102\204" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\071\265\072\116" +
    "\073\165\074\156\075\136\076\144\101\135\102\142\103" +
    "\141\104\121\105\077\110\057\111\137\112\151\113\115" +
    "\114\133\115\131\116\117\117\164\120\154\121\150\122" +
    "\102\204\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\071\261\072\116\073\165\074\156\075\136\076" +
    "\144\101\135\102\142\103\141\104\121\105\077\110\057" +
    "\111\137\112\151\113\115\114\133\115\131\116\117\117" +
    "\164\120\154\121\150\122\102\164\267\204\130\001\001" +
    "\000\002\001\001\000\056\072\273\073\165\074\156\075" +
    "\136\076\144\101\135\102\142\103\141\104\121\105\077" +
    "\110\057\111\137\112\151\113\115\114\133\115\131\116" +
    "\117\117\164\120\154\121\150\122\102\204\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\166\276\001" +
    "\001\000\004\166\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\300\001\001\000\064\067\302\070" +
    "\160\071\120\072\116\073\165\074\156\075\136\076\144" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\067\306\070\160\071\120\072\116\073\165\074" +
    "\156\075\136\076\144\101\135\102\142\103\141\104\121" +
    "\105\077\110\057\111\137\112\151\113\115\114\133\115" +
    "\131\116\117\117\164\120\154\121\150\122\102\204\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\133" +
    "\311\001\001\000\064\067\312\070\160\071\120\072\116" +
    "\073\165\074\156\075\136\076\144\101\135\102\142\103" +
    "\141\104\121\105\077\110\057\111\137\112\151\113\115" +
    "\114\133\115\131\116\117\117\164\120\154\121\150\122" +
    "\102\204\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\067\317\070" +
    "\160\071\120\072\116\073\165\074\156\075\136\076\144" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\324\001\001\000\064\067\325\070\160\071" +
    "\120\072\116\073\165\074\156\075\136\076\144\101\135" +
    "\102\142\103\141\104\121\105\077\110\057\111\137\112" +
    "\151\113\115\114\133\115\131\116\117\117\164\120\154" +
    "\121\150\122\102\204\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\067\331\070\160" +
    "\071\120\072\116\073\165\074\156\075\136\076\144\101" +
    "\135\102\142\103\141\104\121\105\077\110\057\111\137" +
    "\112\151\113\115\114\133\115\131\116\117\117\164\120" +
    "\154\121\150\122\102\204\130\001\001\000\002\001\001" +
    "\000\064\067\333\070\160\071\120\072\116\073\165\074" +
    "\156\075\136\076\144\101\135\102\142\103\141\104\121" +
    "\105\077\110\057\111\137\112\151\113\115\114\133\115" +
    "\131\116\117\117\164\120\154\121\150\122\102\204\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\067\341" +
    "\070\160\071\120\072\116\073\165\074\156\075\136\076" +
    "\144\101\135\102\142\103\141\104\121\105\077\110\057" +
    "\111\137\112\151\113\115\114\133\115\131\116\117\117" +
    "\164\120\154\121\150\122\102\204\130\001\001\000\002" +
    "\001\001\000\064\067\343\070\160\071\120\072\116\073" +
    "\165\074\156\075\136\076\144\101\135\102\142\103\141" +
    "\104\121\105\077\110\057\111\137\112\151\113\115\114" +
    "\133\115\131\116\117\117\164\120\154\121\150\122\102" +
    "\204\130\001\001\000\002\001\001\000\064\067\345\070" +
    "\160\071\120\072\116\073\165\074\156\075\136\076\144" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\067\350\070\160\071\120" +
    "\072\116\073\165\074\156\075\136\076\144\101\135\102" +
    "\142\103\141\104\121\105\077\110\057\111\137\112\151" +
    "\113\115\114\133\115\131\116\117\117\164\120\154\121" +
    "\150\122\102\204\130\001\001\000\002\001\001\000\064" +
    "\067\352\070\160\071\120\072\116\073\165\074\156\075" +
    "\136\076\144\101\135\102\142\103\141\104\121\105\077" +
    "\110\057\111\137\112\151\113\115\114\133\115\131\116" +
    "\117\117\164\120\154\121\150\122\102\204\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\133\355\001" +
    "\001\000\064\067\356\070\160\071\120\072\116\073\165" +
    "\074\156\075\136\076\144\101\135\102\142\103\141\104" +
    "\121\105\077\110\057\111\137\112\151\113\115\114\133" +
    "\115\131\116\117\117\164\120\154\121\150\122\102\204" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\067\361\070\160\071\120\072\116\073\165\074\156\075" +
    "\136\076\144\101\135\102\142\103\141\104\121\105\077" +
    "\110\057\111\137\112\151\113\115\114\133\115\131\116" +
    "\117\117\164\120\154\121\150\122\102\204\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\067\365\070\160\071\120\072\116\073\165\074\156" +
    "\075\136\076\144\101\135\102\142\103\141\104\121\105" +
    "\077\110\057\111\137\112\151\113\115\114\133\115\131" +
    "\116\117\117\164\120\154\121\150\122\102\204\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\370" +
    "\001\001\000\064\067\371\070\160\071\120\072\116\073" +
    "\165\074\156\075\136\076\144\101\135\102\142\103\141" +
    "\104\121\105\077\110\057\111\137\112\151\113\115\114" +
    "\133\115\131\116\117\117\164\120\154\121\150\122\102" +
    "\204\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\067\u0101\070" +
    "\160\071\120\072\116\073\165\074\156\075\136\076\144" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\002\001" +
    "\001\000\064\067\u0103\070\160\071\120\072\116\073\165" +
    "\074\156\075\136\076\144\101\135\102\142\103\141\104" +
    "\121\105\077\110\057\111\137\112\151\113\115\114\133" +
    "\115\131\116\117\117\164\120\154\121\150\122\102\204" +
    "\130\001\001\000\002\001\001\000\064\067\u0106\070\160" +
    "\071\120\072\116\073\165\074\156\075\136\076\144\101" +
    "\135\102\142\103\141\104\121\105\077\110\057\111\137" +
    "\112\151\113\115\114\133\115\131\116\117\117\164\120" +
    "\154\121\150\122\102\204\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\067\u0109\070" +
    "\160\071\120\072\116\073\165\074\156\075\136\076\144" +
    "\101\135\102\142\103\141\104\121\105\077\110\057\111" +
    "\137\112\151\113\115\114\133\115\131\116\117\117\164" +
    "\120\154\121\150\122\102\204\130\001\001\000\002\001" +
    "\001\000\064\067\u010b\070\160\071\120\072\116\073\165" +
    "\074\156\075\136\076\144\101\135\102\142\103\141\104" +
    "\121\105\077\110\057\111\137\112\151\113\115\114\133" +
    "\115\131\116\117\117\164\120\154\121\150\122\102\204" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\067\u0110\070\160\071" +
    "\120\072\116\073\165\074\156\075\136\076\144\101\135" +
    "\102\142\103\141\104\121\105\077\110\057\111\137\112" +
    "\151\113\115\114\133\115\131\116\117\117\164\120\154" +
    "\121\150\122\102\204\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\067\u0113\070\160\071\120\072\116" +
    "\073\165\074\156\075\136\076\144\101\135\102\142\103" +
    "\141\104\121\105\077\110\057\111\137\112\151\113\115" +
    "\114\133\115\131\116\117\117\164\120\154\121\150\122" +
    "\102\204\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\020\075\031\056\032\052\103\060\104\043\105" +
    "\077\110\057\121\072\122\102\130\u0116\204\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\057\u0136\060\u012c\062\u012e\066\u0129\112\u0134\113" +
    "\u0125\114\133\115\131\116\117\117\u013d\120\154\121\u0133" +
    "\122\102\123\u0139\202\u0138\203\u01e9\204\u0128\205\u0131\001" +
    "\001\000\006\015\u01e6\024\011\001\001\000\002\001\001" +
    "\000\004\223\u01e4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\031\u01e3\032\052\103\060" +
    "\104\043\105\077\110\057\121\072\122\102\001\001\000" +
    "\004\224\u01e1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\040\u015a\041" +
    "\u0155\044\u015d\045\u0153\046\u0154\047\u0159\050\u014c\052\u015b" +
    "\121\u0157\122\102\143\u0156\204\u014f\210\u01df\001\001\000" +
    "\006\226\u01dc\231\u01db\001\001\000\004\225\u01d9\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u01d8\024" +
    "\u012f\026\u0123\027\u013a\030\u0127\001\001\000\006\227\u014b" +
    "\230\u014a\001\001\000\012\024\u012f\026\u0146\027\u013a\030" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\057\u0141\060\u012c\062" +
    "\u012e\064\u013e\066\u0129\112\u0134\113\u0125\114\133\115\131" +
    "\116\117\117\u013d\120\154\121\u0133\122\102\123\u0139\162" +
    "\u013f\204\u0128\205\u0140\001\001\000\002\001\001\000\046" +
    "\057\u0141\060\u012c\062\u012e\064\u013e\066\u0129\112\u0134\113" +
    "\u0125\114\133\115\131\116\117\117\u013d\120\154\121\u0133" +
    "\122\102\123\u0139\162\u0143\204\u0128\205\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\057\u0136\060\u012c\062" +
    "\u012e\066\u0129\112\u0134\113\u0125\114\133\115\131\116\117" +
    "\117\u013d\120\154\121\u0133\122\102\123\u0139\202\u0138\203" +
    "\u0145\204\u0128\205\u0131\001\001\000\002\001\001\000\046" +
    "\057\u0136\060\u012c\062\u012e\066\u0129\112\u0134\113\u0125\114" +
    "\133\115\131\116\117\117\u013d\120\154\121\u0133\122\102" +
    "\123\u0139\202\u0138\203\u0148\204\u0128\205\u0131\001\001\000" +
    "\046\057\u0136\060\u012c\062\u012e\066\u0129\112\u0134\113\u0125" +
    "\114\133\115\131\116\117\117\u013d\120\154\121\u0133\122" +
    "\102\123\u0139\202\u0138\203\u0149\204\u0128\205\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\040\u015a\041\u0155\044\u015d\045\u0153\046\u0154\047\u0159" +
    "\050\u014c\052\u015b\121\u0157\122\102\143\u0156\176\u014e\204" +
    "\u014f\210\u0150\211\u015c\001\001\000\004\240\u01cf\001\001" +
    "\000\012\047\u01ce\052\u015b\121\u0157\122\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\u01bb\054\u01bc\121\u01bd\122\102\001" +
    "\001\000\002\001\001\000\004\237\u01b0\001\001\000\002" +
    "\001\001\000\006\177\u0167\233\u0166\001\001\000\002\001" +
    "\001\000\022\044\u0164\045\u0153\046\u0154\047\u0159\050\u014c" +
    "\052\u015b\121\u0157\122\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\241\u015e\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\u0162\155\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\042\u01a5\043\u01a4\057\u0141\060\u012c\062\u012e" +
    "\064\u01a3\066\u0129\112\u0134\113\u0125\114\133\115\131\116" +
    "\117\117\u013d\120\154\121\u0133\122\102\123\u0139\204\u0128" +
    "\205\u0140\001\001\000\004\235\u0175\001\001\000\024\113" +
    "\u016d\114\133\115\131\116\117\120\u0170\200\u016c\201\u016e" +
    "\204\u016a\206\u016b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\232\u0173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\113\u016d\114\133\115" +
    "\131\116\117\120\u0170\201\u0171\204\u016a\206\u016b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\113\u016d\114\133\115\131\116\117\120\u0170\201\u0174" +
    "\204\u016a\206\u016b\001\001\000\002\001\001\000\006\146" +
    "\u0177\147\u0178\001\001\000\034\040\u015a\041\u0155\044\u015d" +
    "\045\u0153\046\u0154\047\u0159\050\u014c\052\u015b\121\u0157\122" +
    "\102\143\u0179\145\u017b\204\u014f\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\036\u0183\037\u0181\055\u0180\056" +
    "\u0182\061\u017e\063\u017f\066\u0129\112\u0134\113\u0125\114\133" +
    "\115\131\116\117\117\u013d\120\154\121\u0133\122\102\123" +
    "\u0139\204\u0128\205\u0185\001\001\000\004\147\u017d\001\001" +
    "\000\004\147\u017c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\141\u019d\142\u019e\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\035\u018f\065\u018d\121\u018e\122\102" +
    "\204\u0190\207\u018b\001\001\000\002\001\001\000\046\055" +
    "\u0180\056\u0182\061\u017e\063\u0187\066\u0129\112\u0134\113\u0125" +
    "\114\133\115\131\116\117\117\u013d\120\154\121\u0133\122" +
    "\102\123\u0139\161\u0188\204\u0128\205\u0185\001\001\000\046" +
    "\055\u0180\056\u0182\061\u017e\063\u0187\066\u0129\112\u0134\113" +
    "\u0125\114\133\115\131\116\117\117\u013d\120\154\121\u0133" +
    "\122\102\123\u0139\161\u018a\204\u0128\205\u0185\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\036\u0191\037\u0181\055\u0180\056\u0182\061\u017e" +
    "\063\u017f\066\u0129\112\u0134\113\u0125\114\133\115\131\116" +
    "\117\117\u013d\120\154\121\u0133\122\102\123\u0139\204\u0128" +
    "\205\u0185\001\001\000\002\001\001\000\006\137\u0193\140" +
    "\u0194\001\001\000\016\035\u0196\065\u018d\121\u018e\122\102" +
    "\136\u0195\204\u0190\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\140\u019a\001\001\000\050\036\u0199\037\u0181" +
    "\055\u0180\056\u0182\061\u017e\063\u017f\066\u0129\112\u0134\113" +
    "\u0125\114\133\115\131\116\117\117\u013d\120\154\121\u0133" +
    "\122\102\123\u0139\204\u0128\205\u0185\001\001\000\004\140" +
    "\u0198\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\037\u019f\055\u0180\056" +
    "\u0182\061\u017e\063\u017f\066\u0129\112\u0134\113\u0125\114\133" +
    "\115\131\116\117\117\u013d\120\154\121\u0133\122\102\123" +
    "\u0139\204\u0128\205\u0185\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\142\u01a2\001\001\000\004\142\u01a1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\236\u01a8\001\001\000\004\234\u01a6\001\001\000" +
    "\006\146\u01a7\147\u0178\001\001\000\002\001\001\000\006" +
    "\002\u01ab\150\u01aa\001\001\000\046\043\u01ad\057\u0141\060" +
    "\u012c\062\u012e\064\u01a3\066\u0129\112\u0134\113\u0125\114\133" +
    "\115\131\116\117\117\u013d\120\154\121\u0133\122\102\123" +
    "\u0139\204\u0128\205\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\u01af\001\001\000\004\002\u01ae\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\151\u01b1" +
    "\152\u01b3\001\001\000\002\001\001\000\016\046\u01b4\047" +
    "\u0159\050\u014c\052\u015b\121\u0157\122\102\001\001\000\002" +
    "\001\001\000\004\152\u01b7\001\001\000\004\152\u01b6\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\121\u01cd" +
    "\122\102\001\001\000\012\054\u01c3\121\u01bd\122\102\157" +
    "\u01c2\001\001\000\006\121\u01c1\122\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\121\u01bf\122\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\054\u01c6\121" +
    "\u01bd\122\102\156\u01c5\160\u01c7\001\001\000\010\054\u01ca" +
    "\121\u01bd\122\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\054\u01c6\121\u01bd\122\102" +
    "\160\u01c9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\153\u01d1\154\u01d2\001\001\000\014\047" +
    "\u0159\050\u01d3\052\u015b\121\u0157\122\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\154\u01d6\001\001\000" +
    "\004\154\u01d5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\u012f\026\u0146\027\u013a\030" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\040\u015a\041\u0155\044\u015d\045\u0153\046" +
    "\u0154\047\u0159\050\u014c\052\u015b\121\u0157\122\102\143\u0156" +
    "\204\u014f\210\u01dd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\u01e7\017\031\021\036\022\037" +
    "\023\040\001\001\000\002\001\001\000\046\057\u0136\060" +
    "\u012c\062\u012e\066\u0129\112\u0134\113\u0125\114\133\115\131" +
    "\116\117\117\u013d\120\154\121\u0133\122\102\123\u0139\202" +
    "\u0138\203\u01ea\204\u0128\205\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\067\u01fe\070\160\071\120" +
    "\072\116\073\165\074\156\075\136\076\144\101\135\102" +
    "\142\103\141\104\121\105\077\110\057\111\137\112\151" +
    "\113\115\114\133\115\131\116\117\117\164\120\154\121" +
    "\150\122\102\204\130\001\001\000\002\001\001\000\010" +
    "\124\u01f8\204\u01fa\212\u01fd\001\001\000\010\124\u01f8\204" +
    "\u01fa\212\u01fb\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\204\u0200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SparqlCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SparqlCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SparqlCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Map<String , ArrayList<String>> getResults(){
	  return totalResults;
  }
    public static Map<String , ArrayList<String>> totalResults;
    private ArrayList<String> errorList =new ArrayList<String>();
    public static int errors = 0;
    // Connect this parser to a scanner!
    //SparqlLexer s;
    //SparqlCup(SparqlLexer s){ this.s=s; }
    SparqlLexer scan= (SparqlLexer)this.getScanner();
    
    int lastErrorLine;
    int lastErrorColumn;
    String lastErrorWord;
    String lastErrorBuffer;
    int lastPos;
    String lastLineString;
    
    public String buildLine(String lastErrorBuffer,int lastPos){
    	System.out.println(lastPos+"buffer:"+lastErrorBuffer.length());
	    int end = lastErrorBuffer.indexOf("\n",lastPos);
	    String sub =lastErrorBuffer.substring(0,lastPos);
	    int start = sub.lastIndexOf("\n")+1;
	    System.out.println("start:"+start+"end:"+end);
	    if (start<0){start=0;}
    return lastErrorBuffer.substring(start,end);
    }
    
     public void syntax_error(Symbol cur_token) {
     lastErrorLine =  scan.getLine();
     lastErrorColumn = scan.getColumn();
     lastErrorWord = scan.getWord();
     lastErrorBuffer = new String(scan.getBuffer());
     lastPos = scan.getCurrentPos();
     lastLineString = buildLine(lastErrorBuffer,lastPos);
		 System.out.println("I’m sorry, but I have to ");
		 System.out.println("report a syntax error.");
		 System.out.println("The last symbol was: "+ scan.getWord() +
		 " (See sym.java)");
		 System.out.println("at line number " + scan.getLine());
    }
    
    public int getNoErrors(){
    return errorList.size();
    }
    public ArrayList<String> getErrors(){
    return errorList;
    }
    
    public void run(){
    
			MapMan manager = new MapMan(action_obj.sky);
			totalResults = manager.go();
    }
      public void report_error(String message, Object info) {
		    StringBuffer m = new StringBuffer();
		     if (info instanceof FakeError){
		     FakeError info2 = (FakeError)info;
		     
			    m.append("Error "+"( line: "+info2.getLine());
			    m.append(" column: "+info2.getColumn());
			    m.append(" lexeme: "+info2.getWord());
			    m.append(" ): Syntax Error\n");
			    m.append(" "+(errorList.size()+1)+" :");
			    m.append(" "+message+"\n");
		    }
		    else {
			    m.append("Error "+"( line: "+lastErrorLine);
			    m.append(" column: "+lastErrorColumn);
			    m.append(" lexeme: "+lastErrorWord);
			    m.append(" ): Syntax Error\n");
			    m.append(" "+(errorList.size()+1)+" :");
			    m.append(" "+message+"\n");
		    	
		    }
		    System.err.println(m);
		    
		    
		     m = new StringBuffer();
		   
		     if (info instanceof FakeError){
		     FakeError info2 = (FakeError)info;
		     
			    m.append("Error "+"( line: "+info2.getLine());
			    m.append(" column: "+info2.getColumn());
			    m.append(" lexeme: "+info2.getWord());
			    m.append(" ): Syntax Error\n");
			    m.append("<br />");
			    m.append(" "+(errorList.size()+1)+" :");
			    m.append(" "+message+"\n");
			    m.append("<br />");
		    }
		    else {
			    m.append("Error "+"( line: "+lastErrorLine);
			    m.append(" column: "+lastErrorColumn);
			    m.append(" lexeme: "+lastErrorWord);
			    m.append(" ): Syntax Error\n");
			    m.append("<br />");
			    m.append(" "+(errorList.size()+1)+" :");
			    m.append(" "+message+"\n");
			    m.append("<br />");
		    	
		    }
		    errorList.add(m.toString());
  }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SparqlCup$actions {

 

    Map<String , ArrayList<CoarseTriple>> sky = new HashMap<>();
    
    ArrayList<FakeError> selectVarsTot= new ArrayList<FakeError>();
    ArrayList<FakeError> whereVarsTot= new ArrayList<FakeError>();
    ArrayList<FakeError> solutionVarsTot= new ArrayList<FakeError>();
    ArrayList<String> selectVarsStr= new ArrayList<String>();
    ArrayList<String> whereVarsStr= new ArrayList<String>();
    ArrayList<String> solutionVarsStr= new ArrayList<String>();
    ArrayList<FakeError> wherePreTot= new ArrayList<FakeError>();
    ArrayList<FakeError> prefixPreTot= new ArrayList<FakeError>();
    ArrayList<String> wherePreStr= new ArrayList<String>();
    ArrayList<String> prefixPreStr= new ArrayList<String>();
    ArrayList<FakeError> tempTot= new ArrayList<FakeError>();
    ArrayList<String> tempStr= new ArrayList<String>();
    ArrayList<FakeError> tempPreTot= new ArrayList<FakeError>();
    ArrayList<String> tempPreStr= new ArrayList<String>();

  private final SparqlCup parser;

  /** Constructor */
  CUP$SparqlCup$actions(SparqlCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SparqlCup$do_action(
    int                        CUP$SparqlCup$act_num,
    java_cup.runtime.lr_parser CUP$SparqlCup$parser,
    java.util.Stack            CUP$SparqlCup$stack,
    int                        CUP$SparqlCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SparqlCup$result;

      /* select the action based on the action number */
      switch (CUP$SparqlCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // PrefixedName ::= PNAME_NS 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			
            if (tempPreStr.contains(a.toString())){
            
            }
            else {
            
		     	SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
				FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            	tempPreTot.add(nut);
            	tempPreStr.add(a.toString());
            	System.out.println("prefix vector updated");
            }
            
			System.out.println(a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrefixedName",80, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // PrefixedName ::= PNAME_LN 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			String PNAME_NSa = a.toString().substring(0,(a.toString().indexOf(":")+1));
            if (tempPreStr.contains(PNAME_NSa)){
            
            }
            else {
            
		     	SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
				FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            	tempPreTot.add(nut);
            	tempPreStr.add(PNAME_NSa);
            	System.out.println("prefix vector updated");
            }
			System.out.println(a.toString());
			RESULT=new FineElement(a.toString(),"WORD");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrefixedName",80, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // iri ::= PrefixedName 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println(a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("iri",79, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // iri ::= IRIREF 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("iri: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("iri",79, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // String ::= STRING_LITERAL_LONG2 
            {
              FineElement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println(l.toString());
			RESULT=new FineElement(l.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("String",78, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // String ::= STRING_LITERAL_LONG1 
            {
              FineElement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println(l.toString());
			RESULT=new FineElement(l.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("String",78, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // String ::= STRING_LITERAL2 
            {
              FineElement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("literal "+l.toString());
			RESULT=new FineElement(l.toString(),"WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("String",78, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // String ::= STRING_LITERAL1 
            {
              FineElement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println(l.toString());
			RESULT=new FineElement(l.toString(),"WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("String",78, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // BooleanLiteral ::= FALSE 
            {
              FineElement RESULT =null;
		 

			System.out.println("BooleanLiteral FALSE");
			RESULT=new FineElement("false","WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BooleanLiteral",77, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // BooleanLiteral ::= TRUE 
            {
              FineElement RESULT =null;
		 

			System.out.println("BooleanLiteral TRUE");
			RESULT=new FineElement("true","WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BooleanLiteral",77, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // NumericLiteralNegative ::= DOUBLE_NEGATIVE 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("NumericLiteralNegative: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralNegative",76, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // NumericLiteralNegative ::= DECIMAL_NEGATIVE 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("NumericLiteralNegative: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralNegative",76, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // NumericLiteralNegative ::= INTEGER_NEGATIVE 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("NumericLiteralNegative: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralNegative",76, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // NumericLiteralPositive ::= DOUBLE_POSITIVE 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("NumericLiteralPositive: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralPositive",75, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // NumericLiteralPositive ::= DECIMAL_POSITIVE 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("NumericLiteralPositive: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralPositive",75, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // NumericLiteralPositive ::= INTEGER_POSITIVE 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("NumericLiteralPositive: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralPositive",75, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // NumericLiteralUnsigned ::= DOUBLE 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("NumericLiteralUnsigned: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralUnsigned",74, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // NumericLiteralUnsigned ::= DECIMAL 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("NumericLiteralUnsigned: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralUnsigned",74, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // NumericLiteralUnsigned ::= INTEGER 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("NumericLiteralUnsigned: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralUnsigned",74, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // NumericLiteral ::= NumericLiteralNegative 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("NumericLiteral: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteral",73, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // NumericLiteral ::= NumericLiteralPositive 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("NumericLiteral: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteral",73, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // NumericLiteral ::= NumericLiteralUnsigned 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("NumericLiteral: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteral",73, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // RDFLiteral ::= String 
            {
              FineElement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement l = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("rdfliteral "+l.toString());
			RESULT=new FineElement(l);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RDFLiteral",72, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // RDFLiteral ::= String NT$18 CARETCARET iri 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)).right;
		FineElement l = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)).value;
		 
			System.out.println("iriOrFunction");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RDFLiteral",72, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // NT$18 ::= 
            {
              FineElement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement l = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 

			System.out.println("rdfliteral "+l.toString());
			RESULT=new FineElement(l);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$18",161, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // RDFLiteral ::= String NT$17 LANGTAG 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement l = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RDFLiteral",72, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // NT$17 ::= 
            {
              FineElement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement l = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 

			System.out.println("rdfliteral "+l.toString());
			RESULT=new FineElement(l);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$17",160, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // iriOrFunction ::= iri ArgList 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
			System.out.println("iriOrFunction");
			System.out.println(a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("iriOrFunction",71, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // iriOrFunction ::= iri 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("iriOrFunction");
			System.out.println(a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("iriOrFunction",71, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // Aggregate ::= GROUP_CONCAT PARENTHO DISTINCTQ Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate ->  GROUP_CONCAT(DISTINCT? Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate -> GROUP_CONCAT(DISTINCT? Expression): Rule translation not supported in this Demo Version");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // Aggregate ::= GROUP_CONCAT PARENTHO DISTINCTQ Expression SEMICOLON SEPARATOR EQUALMARK String PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate ->  GROUP_CONCAT(DISTINCT? Expression;SEPARATOR = String): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate ->  GROUP_CONCAT(DISTINCT? Expression;SEPARATOR = String): Rule translation not supported in this Demo Version");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-8)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // Aggregate ::= AVG PARENTHO DISTINCTQ Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate -> AVG(DISTINCT? Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate -> AVG(DISTINCT? Expression): Rule translation not supported in this Demo Version");
			

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // Aggregate ::= MAX PARENTHO DISTINCTQ Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate -> MAX(DISTINCT? Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate -> MAX(DISTINCT? Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // Aggregate ::= MIN PARENTHO DISTINCTQ Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate -> MIN(DISTINCT? Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate -> MIN(DISTINCT? Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // Aggregate ::= SUM PARENTHO DISTINCTQ Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate -> SUM(DISTINCT? Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate -> SUM(DISTINCT? Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // Aggregate ::= COUNT PARENTHO DISTINCTQ Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate -> COUNT(DISTINCT? Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate -> COUNT(DISTINCT? Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // Aggregate ::= COUNT PARENTHO DISTINCTQ STAR PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Aggregate -> COUNT(DISTINCT? *): Rule translation not supported in this Demo Version", nut );
			System.out.println("Aggregate -> COUNT(DISTINCT? *): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Aggregate",70, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // StrReplaceExpression ::= REPLACE PARENTHO Expression COMMA Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("StrReplaceExpression -> REPLACE(Expression,Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("StrReplaceExpression -> REPLACE(Expression,Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("StrReplaceExpression",69, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-7)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // StrReplaceExpression ::= REPLACE PARENTHO Expression COMMA Expression COMMA Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("StrReplaceExpression -> REPLACE(Expression,Expression,Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("StrReplaceExpression -> REPLACE(Expression,Expression,Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("StrReplaceExpression",69, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-9)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // SubstringExpression ::= SUBSTR PARENTHO Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("SubstringExpression -> SUBSTR(Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("SubstringExpression -> SUBSTR(Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SubstringExpression",68, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // SubstringExpression ::= SUBSTR PARENTHO Expression COMMA Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("SubstringExpression -> SUBSTR(Expression,Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("SubstringExpression -> SUBSTR(Expression,Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SubstringExpression",68, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-7)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // RegexExpression ::= REGEX PARENTHO Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("RegexExpression -> REGEX(Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("RegexExpression -> REGEX(Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RegexExpression",67, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // RegexExpression ::= REGEX PARENTHO Expression COMMA Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("RegexExpression -> REGEX(Expression,Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("RegexExpression -> REGEX(Expression,Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RegexExpression",67, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-7)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // BuiltInCall ::= RegexExpression 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> RegexExpression: Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> RegexExpression: Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // BuiltInCall ::= ISNUMERIC PARENTHO Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> ISNUMERIC(Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> ISNUMERIC(Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // BuiltInCall ::= ISLITERAL PARENTHO Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> ISLITERAL(Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> ISLITERAL(Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // BuiltInCall ::= ISBLANK PARENTHO Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> ISBLANK(Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> ISBLANK(Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // BuiltInCall ::= ISURI PARENTHO Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall ->  ISURI(Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> ISURI(Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // BuiltInCall ::= ISIRI PARENTHO Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall ->  ISIRI(Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> ISIRI(Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // BuiltInCall ::= SAMETERM PARENTHO Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> SAMETERM(Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> SAMETERM(Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // BuiltInCall ::= STRDT PARENTHO Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> STRDT(Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> STRDT(Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // BuiltInCall ::= STRLANG PARENTHO Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> STRLANG(Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> STRLANG(Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // BuiltInCall ::= IF PARENTHO Expression COMMA Expression COMMA Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> IF (Expression,Expression,Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> IF (Expression,Expression,Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-7)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // BuiltInCall ::= COALESCE ExpressionList 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> COALESCE ExpressionList: Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> COALESCE ExpressionList: Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // BuiltInCall ::= STR PARENTHO Expression PARENTHC 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> STR(Expression): Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> STR(Expression): Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // BuiltInCall ::= Aggregate 
            {
              FineElement RESULT =null;
			
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("BuiltInCall -> Aggregate: Rule translation not supported in this Demo Version", nut );
			System.out.println("BuiltInCall -> Aggregate: Rule translation not supported in this Demo Version");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BuiltInCall",66, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // BrackettedExpression ::= PARENTHO Expression PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("BrackettedExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BrackettedExpression",65, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // PrimaryExpression ::= Var 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PrimaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",64, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // PrimaryExpression ::= BooleanLiteral 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PrimaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",64, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // PrimaryExpression ::= NumericLiteral 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PrimaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",64, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // PrimaryExpression ::= RDFLiteral 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PrimaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",64, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // PrimaryExpression ::= iriOrFunction 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PrimaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",64, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // PrimaryExpression ::= BuiltInCall 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PrimaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",64, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // PrimaryExpression ::= BrackettedExpression 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PrimaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",64, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // UnaryExpression ::= PrimaryExpression 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("UnaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("UnaryExpression",63, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // UnaryExpression ::= MINUSMARK PrimaryExpression 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("UnaryExpression: "+a.toString());
			RESULT=new FineElement(a);
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("UnaryExpression",63, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // UnaryExpression ::= PLUSMARK PrimaryExpression 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("UnaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("UnaryExpression",63, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // UnaryExpression ::= EMARK PrimaryExpression 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("UnaryExpression: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("UnaryExpression",63, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // MultiplicativeExpression ::= MultiplicativeExpression SLASH UnaryExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("MultiplicativeExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",60, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // MultiplicativeExpression ::= MultiplicativeExpression STAR UnaryExpression 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",60, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // MultiplicativeExpression ::= UnaryExpression 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",60, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // AdditiveExpression ::= AdditiveExpression NumericLiteralUnary 
            {
              FineElement RESULT =null;
		 
			System.out.println("AdditiveExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",59, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // AdditiveExpression ::= AdditiveExpression MINUSMARK MultiplicativeExpression 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",59, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // AdditiveExpression ::= AdditiveExpression PLUSMARK MultiplicativeExpression 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",59, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // AdditiveExpression ::= MultiplicativeExpression 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",59, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NumericLiteralUnary ::= NumericLiteralUnary SLASH UnaryExpression 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralUnary",61, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NumericLiteralUnary ::= NumericLiteralUnary STAR UnaryExpression 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralUnary",61, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NumericLiteralUnary ::= NumericLiteralBoth 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralUnary",61, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // NumericLiteralBoth ::= NumericLiteralNegative 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralBoth",62, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NumericLiteralBoth ::= NumericLiteralPositive 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericLiteralBoth",62, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // NumericExpression ::= AdditiveExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("NumericExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NumericExpression",58, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // RelationalExpression ::= NOT IN ExpressionList 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // RelationalExpression ::= NumericExpression IN ExpressionList 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // RelationalExpression ::= NumericExpression GEQUAL NumericExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // RelationalExpression ::= NumericExpression LEQUAL NumericExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // RelationalExpression ::= NumericExpression GT NumericExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // RelationalExpression ::= NumericExpression LT NumericExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // RelationalExpression ::= NumericExpression DIFFERENT NumericExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // RelationalExpression ::= NumericExpression EQUALMARK NumericExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // RelationalExpression ::= NumericExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("RelationalExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("RelationalExpression",57, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ValueLogical ::= RelationalExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("ValueLogical");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ValueLogical",56, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ValueLogicals ::= DOUBLEAMPERSAND error ValueLogicals 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
            parser.report_error("Error in ValueLogicals, error in middle of DOUBLEAMPERSAND delimiter object", null );
			System.out.println("Error in ValueLogicals");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ValueLogicals",116, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ValueLogicals ::= DOUBLEAMPERSAND error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in ValueLogicals, error in DOUBLEAMPERSAND delimiter object", null );
			System.out.println("Error in ValueLogicals");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ValueLogicals",116, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ValueLogicals ::= DOUBLEAMPERSAND ValueLogical ValueLogicals 
            {
              FineElement RESULT =null;
		 
			System.out.println("ValueLogicalS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ValueLogicals",116, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ValueLogicals ::= DOUBLEAMPERSAND ValueLogical 
            {
              FineElement RESULT =null;
		 
			System.out.println("ValueLogicalS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ValueLogicals",116, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ValueLogicalS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ValueLogicalS",115, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ValueLogicalS ::= ValueLogicals 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ValueLogicalS",115, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ConditionalAndExpression ::= ValueLogical ValueLogicalS 
            {
              FineElement RESULT =null;
		 
			System.out.println("ConditionalAndExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",55, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ConditionalAndExpressions ::= ConditionalAndExpression DOUBLEPIPE ConditionalAndExpressions 
            {
              FineElement RESULT =null;
		 
			System.out.println("ConditionalAndExpressionS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpressions",114, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ConditionalAndExpressions ::= DOUBLEPIPE ConditionalAndExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("ConditionalAndExpressionS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpressions",114, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ConditionalAndExpressionS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpressionS",113, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ConditionalAndExpressionS ::= ConditionalAndExpressions 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpressionS",113, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ConditionalOrExpression ::= ConditionalAndExpression ConditionalAndExpressionS 
            {
              FineElement RESULT =null;
		 
			System.out.println("ConditionalOrExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",54, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Expression ::= ConditionalOrExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("Expression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // GraphTerm ::= NIL 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphTerm");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphTerm",52, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // GraphTerm ::= BlankNode 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphTerm");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphTerm",52, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // GraphTerm ::= BooleanLiteral 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphTerm");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphTerm",52, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // GraphTerm ::= NumericLiteral 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("GraphTerm: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphTerm",52, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // GraphTerm ::= RDFLiteral 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("GraphTerm: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphTerm",52, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // GraphTerm ::= iri 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("GraphTerm "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphTerm",52, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Var ::= VAR2 
            {
              FineElement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
         	if (tempStr.contains(v2.toString())){
            
            }
            else {
		     	SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
				FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            	tempTot.add(nut);
            	tempStr.add(v2.toString());
            }
         	RESULT=new FineElement(v2.toString(),"VARIABLE");
			System.out.println("VAR2: "+v2.toString());

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Var",130, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Var ::= VAR1 
            {
              FineElement RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            if (tempStr.contains(v1.toString())){
            
            }
            else {
            
		     	SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
				FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            	tempTot.add(nut);
            	tempStr.add(v1.toString());
            }
         
         	RESULT=new FineElement(v1.toString(),"VARIABLE");
			System.out.println("VAR1: "+v1.toString());
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Var",130, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // VarOrIri ::= iri 
            {
              FineElement RESULT =null;
		 
			System.out.println("VarOrIri");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrIri",51, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // VarOrIri ::= Var 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("VARORIRI: "+a.toString());

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrIri",51, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // VarOrTerm ::= GraphTerm 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("VarOrTerm: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrTerm",131, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // VarOrTerm ::= Var 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("VARORTERM: "+a.getContent());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrTerm",131, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // GraphNodePath ::= TriplesNodePath 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphNodePath");
         

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNodePath",50, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // GraphNodePath ::= VarOrTerm 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
         
			System.out.println("GraphNodePath: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNodePath",50, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // GraphNode ::= TriplesNode 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphNode");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNode",49, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // GraphNode ::= VarOrTerm 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphNode");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNode",49, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // GraphNodePathP ::= GraphNodePath GraphNodePathP 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphNodePathP");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNodePathP",112, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // GraphNodePathP ::= GraphNodePath 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphNodePathP");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNodePathP",112, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CollectionPath ::= PARENTHO GraphNodePathP PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("CollectionPath");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("CollectionPath",48, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // GraphNodeP ::= GraphNode GraphNodeP 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphNodeP");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNodeP",111, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // GraphNodeP ::= GraphNode 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphNodeP");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphNodeP",111, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Collection ::= PARENTHO GraphNodeP PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("Collection");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Collection",47, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // BlankNodePropertyListPath ::= SBRACKETO PropertyListPathNotEmpty SBRACKETC 
            {
              FineElement RESULT =null;
		 
			System.out.println("BlankNodePropertyListPath");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BlankNodePropertyListPath",46, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TriplesNodePath ::= BlankNodePropertyListPath 
            {
              FineElement RESULT =null;
		 
			System.out.println("TriplesNodePath");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesNodePath",45, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TriplesNodePath ::= CollectionPath 
            {
              FineElement RESULT =null;
		 
			System.out.println("TriplesNodePath");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesNodePath",45, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // BlankNodePropertyList ::= SBRACKETO PropertyListNotEmpty SBRACKETC 
            {
              FineElement RESULT =null;
		 
			System.out.println("BlankNodePropertyList");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BlankNodePropertyList",44, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TriplesNode ::= BlankNodePropertyList 
            {
              FineElement RESULT =null;
		 
			System.out.println("TriplesNode");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesNode",43, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TriplesNode ::= Collection 
            {
              FineElement RESULT =null;
		 
			System.out.println("TriplesNode");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesNode",43, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // PathOneInPropertySet ::= CARET ISA 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySet");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySet",42, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PathOneInPropertySet ::= CARET iri 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySet");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySet",42, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // PathOneInPropertySet ::= ISA ISA 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySet");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySet",42, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // PathOneInPropertySet ::= ISA iri 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySet");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySet",42, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // PathOneInPropertySet ::= iri ISA 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySet");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySet",42, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // PathOneInPropertySet ::= iri iri 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySet");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySet",42, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // PathOneInPropertySets ::= PathOneInPropertySet PIPE PathOneInPropertySets 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySetS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySets",110, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // PathOneInPropertySets ::= PIPE PathOneInPropertySet 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySetS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySets",110, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // PathOneInPropertySetS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySetS",108, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // PathOneInPropertySetS ::= PathOneInPropertySets 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySetS",108, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // PathOneInPropertySetSQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySetSQ",109, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // PathOneInPropertySetSQ ::= PathOneInPropertySet PathOneInPropertySetS 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathOneInPropertySetSQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathOneInPropertySetSQ",109, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // PathNegatedPropertySet ::= PARENTHO PathOneInPropertySetSQ PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathNegatedPropertySet");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathNegatedPropertySet",41, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // PathNegatedPropertySet ::= PathOneInPropertySet 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathNegatedPropertySet");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathNegatedPropertySet",41, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // PathPrimary ::= PARENTHO Path PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathPrimary");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathPrimary",40, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // PathPrimary ::= EMARK PathNegatedPropertySet 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathPrimary");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathPrimary",40, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // PathPrimary ::= ISA 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathPrimary: "+a.toString());
			RESULT=new FineElement(a.toString(),"WORD");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathPrimary",40, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // PathPrimary ::= iri 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathPrimary: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathPrimary",40, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // PathMod ::= PLUSMARK 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathMod");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathMod",39, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // PathMod ::= STAR 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathMod");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathMod",39, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // PathMod ::= QMARK 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathMod");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathMod",39, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // PathEltOrInverse ::= CARET PathElt 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathEltOrInverse: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverse",38, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // PathEltOrInverse ::= PathElt 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathEltOrInverse: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverse",38, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // PathModQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathModQ",107, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // PathModQ ::= PathMod 
            {
              FineElement RESULT =null;
		 
			System.out.println("PathModQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathModQ",107, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // PathElt ::= PathPrimary NT$16 PathModQ 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		 
			System.out.println("PathElt");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathElt",37, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$16 ::= 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
			System.out.println("PathElt: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$16",159, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // PathEltOrInverses ::= SLASH error PathEltOrInverses 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in PathEltOrInverses, error in middle of slash delimiter object", null );
			System.out.println("Error in PathEltOrInverses");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverses",106, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // PathEltOrInverses ::= SLASH error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in PathEltOrInverses, error in slash delimiter object", null );
			System.out.println("Error in PathEltOrInverses");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverses",106, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PathEltOrInverses ::= SLASH PathEltOrInverse PathEltOrInverses 
            {
              FineElement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		FineElement b = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathEltOrInverseS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverses",106, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // PathEltOrInverses ::= SLASH PathEltOrInverse 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathEltOrInverseS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverses",106, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PathEltOrInverseS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverseS",105, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // PathEltOrInverseS ::= PathEltOrInverses 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathEltOrInverseS",105, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // PathSequence ::= PathEltOrInverse NT$15 PathEltOrInverseS 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement b = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathSequence");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathSequence",36, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$15 ::= 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 

			System.out.println("PathSequence: "+a.toString());
			RESULT=new FineElement(a);
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$15",158, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // PathSequences ::= PIPE error PathSequences 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
            parser.report_error("Error in PathSequences, error in middle of pipe delimiter object", null );
			System.out.println("Error in PathSequences");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathSequences",104, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // PathSequences ::= PIPE error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in PathSequences, error in pipe delimiter object", null );
			System.out.println("Error in PathSequences");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathSequences",104, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // PathSequences ::= PIPE PathSequence PathSequences 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement b = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathSequenceS");
         
         
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathSequences",104, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // PathSequences ::= PIPE PathSequence 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PathSequenceS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathSequences",104, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // PathSequenceS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathSequenceS",103, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // PathSequenceS ::= PathSequences 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathSequenceS",103, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // PathAlternative ::= PathSequence NT$14 PathSequenceS 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		 
			System.out.println("PathAlternative");
         
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PathAlternative",35, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$14 ::= 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
			System.out.println("PathAlternative: "+a.toString());
			RESULT=new FineElement(a);
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$14",157, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Path ::= PathAlternative 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("Path: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Path",34, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ObjectPath ::= GraphNodePath 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

         
			System.out.println("ObjectPath: "+a.toString());
			RESULT=new FineElement(a);
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectPath",33, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ObjectPaths ::= COMMA error ObjectPaths 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
            parser.report_error("Error in ObjectPaths, error in middle of comma delimiter object", null );
			System.out.println("Error in ObjectPaths");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectPaths",0, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ObjectPaths ::= COMMA error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in ObjectPaths, error in comma delimiter object", null );
			System.out.println("Error in ObjectPaths");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectPaths",0, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ObjectPaths ::= COMMA ObjectPath ObjectPaths 
            {
              FineElement RESULT =null;
		 
			System.out.println("ObjectPathS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectPaths",0, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ObjectPaths ::= COMMA ObjectPath 
            {
              FineElement RESULT =null;
		 
			System.out.println("ObjectPathS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectPaths",0, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ObjectPathS ::= ObjectPaths 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectPathS",102, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ObjectListPath ::= ObjectPath NT$13 ObjectPathS 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		 
			System.out.println("ObjectListPath");

         
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectListPath",32, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$13 ::= 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 

         
			System.out.println("ObjectListPath: "+a.toString());
			RESULT=new FineElement(a);
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$13",156, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ObjectListPath ::= ObjectPath 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

         
			System.out.println("ObjectListPath: "+a.toString());
			RESULT=new FineElement(a);
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectListPath",32, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VerbSimple ::= Var 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbSimple");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbSimple",31, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // VerbPath ::= Path 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("VerbPath: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPath",30, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // VerbPathORSimple ::= VerbSimple 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbPathORSimple");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathORSimple",97, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // VerbPathORSimple ::= VerbPath 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("VerbPathORSimple: "+a.toString());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathORSimple",97, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // VerbPathObj ::= VerbPathORSimple ObjectList 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbPathObjQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathObj",99, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // VerbPathObjQs ::= SEMICOLON error VerbPathObjQs 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
            parser.report_error("Error in VerbPathObjQs, error in middle of semicolon delimiter object", null );
			System.out.println("Error in VerbPathObjQs");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathObjQs",101, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VerbPathObjQs ::= SEMICOLON error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in VerbPathObjQs, error in semicolon delimiter object", null );
			System.out.println("Error in VerbPathObjQs");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathObjQs",101, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VerbPathObjQs ::= SEMICOLON VerbPathObj VerbPathObjQs 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbPathObjQS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathObjQs",101, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VerbPathObjQs ::= SEMICOLON VerbPathObj 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbPathObjQS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathObjQs",101, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VerbPathObjQS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathObjQS",100, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VerbPathObjQS ::= VerbPathObjQs 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbPathObjQS",100, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PropertyListPathNotEmpty ::= VerbPathORSimple error 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
		     CoarseTriple exitvalue = new CoarseTriple();
		     exitvalue.addElement(a);
		     FineElement b = new FineElement("placeholder","WORD");
		     exitvalue.addElement(b);
            parser.report_error("Error in PropertyListPathNotEmpty, object or end of triple error", null );
			System.out.println("Error in PropertyListPathNotEmpty");
			
			RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListPathNotEmpty",134, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PropertyListPathNotEmpty ::= VerbPathORSimple ParameterList NT$12 VerbPathObjQS 
            {
              CoarseTriple RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		CoarseTriple b = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		 

			System.out.println("PropertyListPathNotEmpty");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListPathNotEmpty",134, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$12 ::= 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple b = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 

			System.out.println("PropertyListPathNotEmpty: "+b.toString());
				
		     CoarseTriple exitvalue = new CoarseTriple();
		     exitvalue.addElement(a);
		     exitvalue.addElement(b);
			RESULT=exitvalue;
			
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$12",155, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PropertyListPathNotEmpty ::= VerbPathORSimple NT$10 ObjectListPath NT$11 VerbPathObjQS 
            {
              CoarseTriple RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement b = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		 

			System.out.println("PropertyListPathNotEmpty");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListPathNotEmpty",134, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$11 ::= 
            {
              CoarseTriple RESULT =(CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement b = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 


         
			System.out.println("PropertyListPathNotEmpty: "+b.toString());
				
		     CoarseTriple exitvalue = new CoarseTriple();
		     exitvalue.addElement(a);
		     exitvalue.addElement(b);
			RESULT=exitvalue;
		     
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$11",154, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$10 ::= 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
			System.out.println("PropertyListPathNotEmpty: "+a.toString());
		     CoarseTriple exitvalue = new CoarseTriple();
		     exitvalue.addElement(a);
			RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$10",153, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Parameter ::= String 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	     System.out.println("Parameter: "+a.toString());
		RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Parameter",132, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Parameter ::= Var 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	     System.out.println("Parameter: "+a.toString());
		RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Parameter",132, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Parameter ::= NumericLiteral 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	     System.out.println("Parameter: "+a.toString());
		RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Parameter",132, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Parameters ::= error Parameters 
            {
              CoarseTriple RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple b = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in Parameters, error in middle of Parameters", null );
			System.out.println("Error in Parameters");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Parameters",127, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Parameters ::= error 
            {
              CoarseTriple RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in Parameters", null );
			System.out.println("Error in Parameters");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Parameters",127, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Parameters ::= Parameter NT$9 Parameters 
            {
              CoarseTriple RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple b = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	     System.out.println("ParameterS2: "+b.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
	     exitvalue.addElement(b);
		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Parameters",127, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$9 ::= 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
	     System.out.println("ParameterS1: "+a.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$9",152, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Parameters ::= Parameter 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	     System.out.println("ParameterSsingle: "+a.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Parameters",127, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ParameterS ::= 
            {
              CoarseTriple RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ParameterS",126, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ParameterS ::= Parameters 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	     System.out.println("PropertyListPathNotEmpty: "+a.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ParameterS",126, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ParameterList ::= PARENTHO ParameterS PARENTHC 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
	     System.out.println("PropertyListPathNotEmpty: "+a.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ParameterList",125, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PropertyListPathNotEmptyQ ::= 
            {
              CoarseTriple RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListPathNotEmptyQ",135, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PropertyListPathNotEmptyQ ::= PropertyListPathNotEmpty 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PropertyListPathNotEmptyQ: "+a.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListPathNotEmptyQ",135, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PropertyListPath ::= PropertyListPathNotEmptyQ 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("PropertyListPath: "+a.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListPath",124, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TriplesSameSubjectPath ::= VarOrTerm 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
		     SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            parser.report_error("Error in TriplesSameSubjectPath, just subject error", nut );
			System.out.println("Error in TriplesSameSubjectPath");
	        CoarseTriple exitvalue = new CoarseTriple();
	        exitvalue.addElement(a);
	        exitvalue.addElement(a);
			System.out.println("TriplesSameSubjectPath: "+exitvalue.toString());
			System.out.println("TriplesSameSubjectPath second class");
			
		    RESULT=exitvalue;
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesSameSubjectPath",128, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TriplesSameSubjectPath ::= VarOrTerm NT$8 error 
            {
              CoarseTriple RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in TriplesSameSubjectPath, verbobject error", null );
			System.out.println("Error in TriplesSameSubjectPath");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesSameSubjectPath",128, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$8 ::= 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 

			System.out.println("TriplesSameSubjectPath: "+a.toString());
			System.out.println("TriplesSameSubjectPath first class");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$8",151, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TriplesSameSubjectPath ::= TriplesNodePath NT$7 error 
            {
              CoarseTriple RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in TriplesSameSubjectPath, verbobject error", null );
			System.out.println("Error in TriplesSameSubjectPath");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesSameSubjectPath",128, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$7 ::= 
            {
              CoarseTriple RESULT =null;
 

			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$7",150, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TriplesSameSubjectPath ::= TriplesNodePath NT$6 PropertyListPath 
            {
              CoarseTriple RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 

			System.out.println("PropertyListPathUP: "+a.toString());
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
		RESULT=exitvalue;
			System.out.println("TriplesSameSubjectPath second class");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesSameSubjectPath",128, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$6 ::= 
            {
              CoarseTriple RESULT =null;
 

			
			System.out.println("TriplesSameSubjectPath first class");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$6",149, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TriplesSameSubjectPath ::= VarOrTerm NT$5 PropertyListPathNotEmpty 
            {
              CoarseTriple RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (CoarseTriple) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple b = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	     CoarseTriple exitvalue = new CoarseTriple();
	     exitvalue.addElement(a);
	     exitvalue.addElement(b);
			System.out.println("TriplesSameSubjectPath: "+exitvalue.toString());
			System.out.println("TriplesSameSubjectPath second class");
			
		RESULT=exitvalue;
         
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesSameSubjectPath",128, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$5 ::= 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
  
			System.out.println("TriplesSameSubjectPath: "+a.toString());
			System.out.println("TriplesSameSubjectPath first class");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$5",148, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Object ::= GraphNode 
            {
              FineElement RESULT =null;
		 
			System.out.println("Object");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Object",29, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Objs ::= COMMA error Objs 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
            parser.report_error("Error in Objs, error in middle of COMMA delimiter object", null );
			System.out.println("Error in Objs");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Objs",96, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Objs ::= COMMA error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in Objs, error in COMMA delimiter object", null );
			System.out.println("Error in Objs");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Objs",96, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Objs ::= COMMA Object Objs 
            {
              FineElement RESULT =null;
		 
			System.out.println("ObjS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Objs",96, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Objs ::= COMMA Object 
            {
              FineElement RESULT =null;
		 
			System.out.println("ObjS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Objs",96, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ObjS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjS",95, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ObjS ::= Objs 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjS",95, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ObjectList ::= Object ObjS 
            {
              FineElement RESULT =null;
		 
			System.out.println("ObjectList");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ObjectList",28, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Verb ::= ISA 
            {
              FineElement RESULT =null;
		 
			System.out.println("Verb");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Verb",27, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Verb ::= VarOrIri 
            {
              FineElement RESULT =null;
		 
			System.out.println("Verb");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Verb",27, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VerbObjQs ::= SEMICOLON error VerbObjQs 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
            parser.report_error("Error in VerbObjQs, error in middle of SEMICOLON delimiter object", null );
			System.out.println("Error in VerbObjQs");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbObjQs",94, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VerbObjQs ::= SEMICOLON error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in VerbObjQs, error in SEMICOLON delimiter object", null );
			System.out.println("Error in VerbObjQs");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbObjQs",94, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VerbObjQs ::= SEMICOLON VerbObjQ VerbObjQs 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbObjQS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbObjQs",94, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VerbObjQs ::= SEMICOLON VerbObjQ 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbObjQS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbObjQs",94, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VerbObjQS ::= VerbObjQs 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbObjQS",93, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VerbObjQ ::= Verb ObjectList 
            {
              FineElement RESULT =null;
		 
			System.out.println("VerbObjQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VerbObjQ",92, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PropertyListNotEmpty ::= Verb ObjectList VerbObjQS 
            {
              FineElement RESULT =null;
		 
			System.out.println("PropertyListNotEmpty");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListNotEmpty",133, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PropertyListNotEmpty ::= Verb ObjectList 
            {
              FineElement RESULT =null;
		 
			System.out.println("PropertyListNotEmpty");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PropertyListNotEmpty",133, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpressionList ::= PARENTHO Expression ExpressionS PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("ExpressionList");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ExpressionList",26, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpressionList ::= NIL 
            {
              FineElement RESULT =null;
		 
			System.out.println("ExpressionList");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ExpressionList",26, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expressions ::= COMMA error Expressions 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
            parser.report_error("Error in Expressions, error in middle of comma delimiter object", null );
			System.out.println("Error in Expressions");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Expressions",91, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expressions ::= COMMA error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in Expressions, error in comma delimiter object", null );
			System.out.println("Error in Expressions");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Expressions",91, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expressions ::= COMMA Expression Expressions 
            {
              FineElement RESULT =null;
		 
			System.out.println("ExpressionS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Expressions",91, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expressions ::= COMMA Expression 
            {
              FineElement RESULT =null;
		 
			System.out.println("ExpressionS");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Expressions",91, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpressionS ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ExpressionS",90, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpressionS ::= Expressions 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ExpressionS",90, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DISTINCTQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("DISTINCTQ",89, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DISTINCTQ ::= DISTINCT 
            {
              FineElement RESULT =null;
		 
			System.out.println("DISTINCTQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("DISTINCTQ",89, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ArgList ::= PARENTHO DISTINCTQ Expression ExpressionS PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("ArgList");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ArgList",25, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ArgList ::= NIL 
            {
              FineElement RESULT =null;
		 
			System.out.println("ArgList");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("ArgList",25, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FunctionCall ::= iri ArgList 
            {
              FineElement RESULT =null;
		 
			System.out.println("FunctionCall: Rule translation not supported in this Demo Version");
       
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("FunctionCall",24, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Constraint ::= FunctionCall 
            {
              FineElement RESULT =null;
		 
			System.out.println("Constraint: Rule translation not supported in this Demo Version");
       
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Constraint",23, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Constraint ::= BuiltInCall 
            {
              FineElement RESULT =null;
		 
			System.out.println("Constraint: Rule translation not supported in this Demo Version");
       
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Constraint",23, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Constraint ::= BrackettedExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("Constraint: Rule translation not supported in this Demo Version");
       
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Constraint",23, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Filter ::= FILTER Constraint 
            {
              FineElement RESULT =null;
		 
			System.out.println("Filter: Rule translation not supported in this Demo Version");
       

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Filter",22, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // GroupOrUnionGraphPattern ::= GroupGraphPattern 
            {
              FineElement RESULT =null;
		 
			System.out.println("GroupOrUnionGraphPattern");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupOrUnionGraphPattern",21, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // GraphPatternNotTriples ::= Filter 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphPatternNotTriples");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphPatternNotTriples",20, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // GraphPatternNotTriples ::= GroupOrUnionGraphPattern 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphPatternNotTriples");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphPatternNotTriples",20, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TriplesBlock ::= TriplesSameSubjectPath DOT TriplesBlock 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
         	
			System.out.println(d.toString());
			System.out.println("dotTRIPLESBLOCK");
			
		    CoarseTriple exitvalue = new CoarseTriple();
		    exitvalue.addElement(a);
			System.out.println("TriplesBlock: "+exitvalue.toString());
			
			
			 if(sky.containsKey(exitvalue.get(0)))
			{
			ArrayList<CoarseTriple> modList = sky.get(exitvalue.get(0));
			modList.add(exitvalue);
			sky.put(exitvalue.get(0),modList);
			}else{
			ArrayList<CoarseTriple> listSameVar = new ArrayList<CoarseTriple>();
			listSameVar.add(exitvalue);
			sky.put(exitvalue.get(0),listSameVar);
			}
			
			RESULT=exitvalue;
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesBlock",129, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TriplesBlock ::= TriplesSameSubjectPath DOT 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			
			System.out.println(d.toString());
		    CoarseTriple exitvalue = new CoarseTriple();
		    exitvalue.addElement(a);
			System.out.println("TriplesBlock: "+exitvalue.toString());
			
			
			 if(sky.containsKey(exitvalue.get(0)))
			{
			ArrayList<CoarseTriple> modList = sky.get(exitvalue.get(0));
			modList.add(exitvalue);
			sky.put(exitvalue.get(0),modList);
			}else{
			ArrayList<CoarseTriple> listSameVar = new ArrayList<CoarseTriple>();
			listSameVar.add(exitvalue);
			sky.put(exitvalue.get(0),listSameVar);
			}
			
			RESULT=exitvalue;
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesBlock",129, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TriplesBlock ::= TriplesSameSubjectPath 
            {
              CoarseTriple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		CoarseTriple a = (CoarseTriple)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
         
			System.out.println("TRIPLESBLOCK2");
					    CoarseTriple exitvalue = new CoarseTriple();
		    exitvalue.addElement(a);
			System.out.println("TriplesBlock: "+exitvalue.toString());
			
			
			 if(sky.containsKey(exitvalue.get(0)))
			{
			ArrayList<CoarseTriple> modList = sky.get(exitvalue.get(0));
			modList.add(exitvalue);
			sky.put(exitvalue.get(0),modList);
			}else{
			ArrayList<CoarseTriple> listSameVar = new ArrayList<CoarseTriple>();
			listSameVar.add(exitvalue);
			sky.put(exitvalue.get(0),listSameVar);
			}
			RESULT=exitvalue;
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesBlock",129, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TriplesBlockQ ::= 
            {
              FineElement RESULT =null;
		 
			System.out.println("finished");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesBlockQ",88, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TriplesBlockQ ::= TriplesBlock 
            {
              FineElement RESULT =null;
		 
			System.out.println("TriplesBlockQ");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("TriplesBlockQ",88, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // GraphOrTriples ::= GraphPatternNotTriples TriplesBlock 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphOrTriples");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphOrTriples",1, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // GraphOrTriples ::= GraphPatternNotTriples DOT TriplesBlock 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphOrTriples");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphOrTriples",1, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // GraphOrTriples ::= GraphOrTriples GraphPatternNotTriples TriplesBlock 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphOrTriples");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphOrTriples",1, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // GraphOrTriples ::= GraphOrTriples GraphPatternNotTriples DOT TriplesBlock 
            {
              FineElement RESULT =null;
		 
			System.out.println("GraphOrTriples");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GraphOrTriples",1, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // GroupGraphPatternSub ::= TriplesBlock 
            {
              FineElement RESULT =null;
		 
			System.out.println("GroupGraphPatternSub");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPatternSub",19, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // GroupGraphPatternSub ::= TriplesBlock GraphOrTriples 
            {
              FineElement RESULT =null;
		 
			System.out.println("GroupGraphPatternSub");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPatternSub",19, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // GroupGraphPatternSub ::= GraphOrTriples 
            {
              FineElement RESULT =null;
		 
			System.out.println("GroupGraphPatternSub");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPatternSub",19, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // GroupGraphPattern ::= CBRACKETO error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
            parser.report_error("Error in WhereClause closure", null );
			System.out.println("Error in WhereClause closure");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPattern",18, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // GroupGraphPattern ::= CBRACKETO CBRACKETC 
            {
              FineElement RESULT =null;
		 
		     SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            parser.report_error("Error in GroupGraphPattern, GroupGraphPattern  empty", nut );
			System.out.println("Error in GroupGraphPattern");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPattern",18, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // GroupGraphPattern ::= CBRACKETO error NT$4 CBRACKETC 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPattern",18, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$4 ::= 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
            parser.report_error("Error in GroupGraphPattern, GroupGraphPatternSub or SubSelect wrong", null );
			System.out.println("Error in GroupGraphPattern");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$4",147, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // GroupGraphPattern ::= CBRACKETO GroupGraphPatternSub NT$3 CBRACKETC 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		FineElement g = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPattern",18, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$3 ::= 
            {
              FineElement RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement g = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
			System.out.println("GroupGraphPattern");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$3",146, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // GroupGraphPattern ::= CBRACKETO SubSelect NT$2 CBRACKETC 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("GroupGraphPattern",18, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$2 ::= 
            {
              FineElement RESULT =null;
 
			System.out.println("GroupGraphPattern");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$2",145, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OffsetClause ::= OFFSET 
            {
              FineElement RESULT =null;
		 
		     SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			 parser.report_error("Error in OffsetClause, OFFSET value missing", nut );
			System.out.println("Error in OffsetClause");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OffsetClause",17, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OffsetClause ::= OFFSET error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in OffsetClause, OFFSET value is not an integer", null );
			System.out.println("Error in OffsetClause");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OffsetClause",17, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OffsetClause ::= OFFSET INTEGER 
            {
              FineElement RESULT =null;
		 
			System.out.println("OffsetClause");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OffsetClause",17, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LimitClause ::= LIMIT error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in LimitClause, LIMIT value is not an integer", null );
			System.out.println("Error in LimitClause");
				
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitClause",16, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LimitClause ::= LIMIT 
            {
              FineElement RESULT =null;
		 
		     SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			 parser.report_error("Error in LimitClause, LIMIT value missing", nut );
			System.out.println("Error in LimitClause");
				
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitClause",16, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LimitClause ::= LIMIT NT$1 INTEGER 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println(i.toString());
				
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitClause",16, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$1 ::= 
            {
              FineElement RESULT =null;
 
			System.out.println("LimitClause");
				
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$1",144, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LimitClauseQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitClauseQ",2, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LimitClauseQ ::= LimitClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("LimitClauseQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitClauseQ",2, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OffsetClauseQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OffsetClauseQ",87, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OffsetClauseQ ::= OffsetClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("OffsetClauseQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OffsetClauseQ",87, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LimitOffsetClauses ::= OffsetClause LimitClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("LimitOffsetClauses");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitOffsetClauses",15, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LimitOffsetClauses ::= OffsetClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("LimitOffsetClauses");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitOffsetClauses",15, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LimitOffsetClauses ::= LimitClause OffsetClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("LimitOffsetClauses");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitOffsetClauses",15, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LimitOffsetClauses ::= LimitClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("LimitOffsetClauses");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitOffsetClauses",15, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OrderCondition ::= DESC error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in OrderCondition, BrackettedExpression error", null );
			System.out.println("Error in OrderCondition");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderCondition",14, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OrderCondition ::= ASC error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in OrderCondition, BrackettedExpression error", null );
			System.out.println("Error in OrderCondition");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderCondition",14, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OrderCondition ::= Var 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderCondition");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderCondition",14, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OrderCondition ::= Constraint 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderCondition");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderCondition",14, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OrderCondition ::= DESC BrackettedExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderCondition");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderCondition",14, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OrderCondition ::= ASC BrackettedExpression 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderCondition");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderCondition",14, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OrderConditionP ::= OrderCondition OrderConditionP 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderConditionP");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderConditionP",86, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OrderConditionP ::= OrderCondition 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderConditionP");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderConditionP",86, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OrderClause ::= error BY OrderConditionP 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		 
			 parser.report_error("Error in OrderClause, ORDER wrong", null );
			System.out.println("Error in OrderClause");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClause",13, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OrderClause ::= BY OrderConditionP 
            {
              FineElement RESULT =null;
		 
			 parser.report_error("Error in OrderClause, ORDER missing", null );
			System.out.println("Error in OrderClause");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClause",13, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OrderClause ::= ORDER OrderConditionP 
            {
              FineElement RESULT =null;
		 
			 parser.report_error("Error in OrderClause, BY missing", null );
			System.out.println("Error in OrderClause");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClause",13, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OrderClause ::= ORDER error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in OrderClause, OrderCondition error", null );
			System.out.println("Error in OrderClause");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClause",13, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OrderClause ::= ORDER BY error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in OrderClause, OrderCondition error", null );
			System.out.println("Error in OrderClause");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClause",13, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OrderClause ::= ORDER BY OrderConditionP 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderClause");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClause",13, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LimitOffsetClausesQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitOffsetClausesQ",85, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LimitOffsetClausesQ ::= LimitOffsetClauses 
            {
              FineElement RESULT =null;
		 
			System.out.println("LimitOffsetClausesQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("LimitOffsetClausesQ",85, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OrderClauseQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClauseQ",84, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OrderClauseQ ::= OrderClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("OrderClauseQ");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("OrderClauseQ",84, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SolutionModifier ::= OrderClause error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in SolutionModifier, LimitOffsetClauses error", null );
			System.out.println("Error in SolutionModifier");
			
			solutionVarsTot = new ArrayList<FakeError>(tempTot);
			solutionVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SolutionModifier",12, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SolutionModifier ::= LimitOffsetClauses 
            {
              FineElement RESULT =null;
		 
			System.out.println("SolutionModifier");
			solutionVarsTot = new ArrayList<FakeError>(tempTot);
			solutionVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SolutionModifier",12, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SolutionModifier ::= OrderClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("SolutionModifier");
			
			solutionVarsTot = new ArrayList<FakeError>(tempTot);
			solutionVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SolutionModifier",12, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SolutionModifier ::= OrderClause LimitOffsetClauses 
            {
              FineElement RESULT =null;
		 
			System.out.println("SolutionModifier");
			
			solutionVarsTot = new ArrayList<FakeError>(tempTot);
			solutionVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SolutionModifier",12, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHEREQ ::= 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("WHEREQ",83, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // WHEREQ ::= WHERE 
            {
              FineElement RESULT =null;
		 
				System.out.println("WHEREQ");
	
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("WHEREQ",83, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WhereClause ::= WHERE error 
            {
              FineElement RESULT =null;
		int wwleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int wwright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		String ww = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
             System.out.println(ww);
			 parser.report_error("Error in WhereClause, GroupGraphPattern error in brackets", null );
			 System.out.println("Error in GroupGraphPattern");
			
			whereVarsTot = new ArrayList<FakeError>(tempTot);
			whereVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
			wherePreTot = new ArrayList<FakeError>(tempPreTot);
			wherePreStr = new ArrayList<String>(tempPreStr);
			tempPreTot  = new ArrayList<FakeError>();
			tempPreStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("WhereClause",11, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WhereClause ::= GroupGraphPattern 
            {
              FineElement RESULT =null;
		 
			System.out.println("WhereClause");
			
			whereVarsTot = new ArrayList<FakeError>(tempTot);
			whereVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
			wherePreTot = new ArrayList<FakeError>(tempPreTot);
			wherePreStr = new ArrayList<String>(tempPreStr);
			tempPreTot  = new ArrayList<FakeError>();
			tempPreStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("WhereClause",11, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // WhereClause ::= WHERE GroupGraphPattern 
            {
              FineElement RESULT =null;
		int wwleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int wwright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		String ww = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
         	System.out.println(ww);
			System.out.println("WhereClause");
			
			whereVarsTot = new ArrayList<FakeError>(tempTot);
			whereVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
			wherePreTot = new ArrayList<FakeError>(tempPreTot);
			wherePreStr = new ArrayList<String>(tempPreStr);
			tempPreTot  = new ArrayList<FakeError>();
			tempPreStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("WhereClause",11, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SelectClause ::= SELECT error 
            {
              ArrayList<FineElement> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in SelectClause, vars or star expected", null );
			System.out.println("Error in SelectClause");
			
			selectVarsTot = new ArrayList<FakeError>(tempTot);
			selectVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectClause",137, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SelectClause ::= SELECT STAR 
            {
              ArrayList<FineElement> RESULT =null;
		 
			System.out.println("SelectClause");
			
			selectVarsTot = new ArrayList<FakeError>(tempTot);
			selectVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectClause",137, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SelectClause ::= SELECT VarOrExpressions 
            {
              ArrayList<FineElement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		ArrayList<FineElement> a = (ArrayList<FineElement>)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
         	ArrayList<FineElement> exitvalue = new ArrayList<FineElement>();
			exitvalue.addAll(a);
			ResultMap.selectList = exitvalue;
			selectVarsTot = new ArrayList<FakeError>(tempTot);
			selectVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectClause",137, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SelectClause ::= SELECT DISTINCT STAR 
            {
              ArrayList<FineElement> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;
		 
				System.out.println("SelectClause");
			selectVarsTot = new ArrayList<FakeError>(tempTot);
			selectVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectClause",137, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VarOrExpression ::= PARENTHO Expression AS Var PARENTHC 
            {
              FineElement RESULT =null;
		 
			System.out.println("VarOrExpression");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrExpression",82, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarOrExpression ::= Var 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			System.out.println("VarOrExpression: "+a.getContent());
			RESULT=new FineElement(a);

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrExpression",82, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarOrExpressions ::= VarOrExpression VarOrExpressions 
            {
              ArrayList<FineElement> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		FineElement b = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		ArrayList<FineElement> a = (ArrayList<FineElement>)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			ArrayList<FineElement> exitvalue = new ArrayList<FineElement>();
			exitvalue.addAll(a);
			exitvalue.add(b);
	 		RESULT=exitvalue;
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrExpressions",136, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarOrExpressions ::= VarOrExpression 
            {
              ArrayList<FineElement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		FineElement a = (FineElement)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
	 		ArrayList<FineElement> exitvalue = new ArrayList<FineElement>();
	 		exitvalue.add(a);
	 		RESULT=exitvalue;

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("VarOrExpressions",136, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SelectClause ::= SELECT DISTINCT VarOrExpressions 
            {
              ArrayList<FineElement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		ArrayList<FineElement> a = (ArrayList<FineElement>)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
         	ArrayList<FineElement> exitvalue = new ArrayList<FineElement>();
			exitvalue.addAll(a);
			ResultMap.selectList = exitvalue;
			selectVarsTot = new ArrayList<FakeError>(tempTot);
			selectVarsStr = new ArrayList<String>(tempStr);
			tempTot  = new ArrayList<FakeError>();
			tempStr  = new ArrayList<String>();

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectClause",137, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SubSelect ::= SelectClause WhereClause SolutionModifier 
            {
              FineElement RESULT =null;
		 
			System.out.println("SubSelect");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SubSelect",10, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SelectQuery ::= WhereClause 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Error in SelectQuery, SelectClause missing", nut );
			System.out.println("Error in SelectQuery, SelectClause missing");
			
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SelectQuery ::= SelectClause 
            {
              FineElement RESULT =null;
		 
			 parser.report_error("Error in SelectQuery, WhereClause error", null );
			System.out.println("EError in SelectQuery, WhereClause error");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SelectQuery ::= SelectClause error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in SelectQuery, WhereClause error", null );
			System.out.println("EError in SelectQuery, WhereClause error");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SelectQuery ::= WhereClause SolutionModifier 
            {
              FineElement RESULT =null;
		 
		    SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			parser.report_error("Error in SelectQuery, SelectClause missing", nut );
			System.out.println("Error in SelectQuery, SelectClause missing");
			
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SelectQuery ::= WhereClause error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			parser.report_error("Error in SelectQuery, SelectClause missing", null );
			System.out.println("Error in SelectQuery, SelectClause missing");
			
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SelectQuery ::= SelectClause error NT$0 SolutionModifier 
            {
              FineElement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (FineElement) ((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)).value;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$0 ::= 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
 
			parser.report_error("Error in SelectQuery, WhereClause missing", null );
			System.out.println("EError in SelectQuery, WhereClause missing");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("NT$0",143, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SelectQuery ::= SelectClause WhereClause 
            {
              FineElement RESULT =null;
		 
			System.out.println("SelectQuery");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SelectQuery ::= SelectClause WhereClause error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in SolutionModifier, OrderClause error", null );
			System.out.println("Error in SolutionModifier");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SelectQuery ::= SelectClause WhereClause SolutionModifier 
            {
              FineElement RESULT =null;
		 
			System.out.println("SelectQuery");
			
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("SelectQuery",9, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PrefixDecl ::= PREFIX PNAME_NS error 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in PREFIX, IRIREF expected", e );
			System.out.println("Error in PREFIX");
			
            if (tempPreStr.contains(a.toString())){
            
            }
            else {
            
		     	SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
				FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            	tempPreTot.add(nut);
            	tempPreStr.add(a.toString());
            	System.out.println("prefix vector updated");
            }

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrefixDecl",5, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PrefixDecl ::= PREFIX error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in PREFIX, PNAME_NS expected", e );
			System.out.println("Error in PREFIX");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrefixDecl",5, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PrefixDecl ::= PREFIX PNAME_NS IRIREF 
            {
              FineElement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		 
			System.out.println("prefix block");
			
            if (tempPreStr.contains(a.toString())){
            
            }
            else {
            
		     	SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
				FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
            	tempPreTot.add(nut);
            	tempPreStr.add(a.toString());
            	System.out.println("prefix vector updated");
            }
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("PrefixDecl",5, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BaseDecl ::= BASE error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in BaseDecl, IRIREF expected", e );
			System.out.println("Error in BaseDecl");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseDecl",4, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BaseDecl ::= BASE IRIREF 
            {
              FineElement RESULT =null;
		 
			System.out.println("BaseDecl");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseDecl",4, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BaseORPres ::= BaseORPre BaseORPres 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseORPres",7, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BaseORPres ::= BaseORPre 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseORPres",7, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BaseORPreS ::= BaseORPres 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseORPreS",6, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BaseORPre ::= error 
            {
              FineElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.peek()).value;
		 
			 parser.report_error("Error in Prologue, BASE or PREFIX expected", e );
			System.out.println("Error in Prologue");

         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseORPre",8, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BaseORPre ::= PrefixDecl 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseORPre",8, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BaseORPre ::= BaseDecl 
            {
              FineElement RESULT =null;

              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("BaseORPre",8, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Prologue ::= BaseORPreS 
            {
              FineElement RESULT =null;
		 
			System.out.println("Prologue");
			
			
			prefixPreTot = new ArrayList<FakeError>(tempPreTot);
			prefixPreStr = new ArrayList<String>(tempPreStr);
			tempPreTot  = new ArrayList<FakeError>();
			tempPreStr  = new ArrayList<String>();
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Prologue",3, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Query ::= SelectQuery 
            {
              String RESULT =null;
		 
			System.out.println("Query");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Query",139, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Query ::= Prologue 
            {
              String RESULT =null;
		 
		     SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			 FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			 parser.report_error("Error in Query, SelectQuery expected", nut );
			System.out.println("Error in Query");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Query",139, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Query ::= Prologue SelectQuery 
            {
              String RESULT =null;
		 
			System.out.println("Query");
			
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("Query",139, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // QueryUnit ::= 
            {
              String RESULT =null;
		 
		     SparqlLexer scan= (SparqlLexer)CUP$SparqlCup$parser.getScanner();
			FakeError nut = new FakeError(scan.getLine(),scan.getColumn(),scan.getWord(),scan.getCurrentPos(),scan.getBuffer());
			 parser.report_error("Error in QueryUnit, Query expected", nut );
			System.out.println("Error in QueryUnit");
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("QueryUnit",138, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // QueryUnit ::= Query 
            {
              String RESULT =null;
		 
			System.out.println("parsing done!");
			
			System.out.println("\n");
			Iterator iterator = sky.keySet().iterator();
  
				while (iterator.hasNext()) {
				   String key = iterator.next().toString();
				   String value = sky.get(key).toString();
				   System.out.println(key + " " + value);
			}
			
			
			RESULT=new String("exit");
			
			if (selectVarsStr.size()!=0){System.out.println("selectVars: "+selectVarsStr.toString());}			
			if (whereVarsStr.size()!=0){System.out.println("whereVars: "+whereVarsStr.toString());}
			if (solutionVarsStr.size()!=0){System.out.println("solutionVars: "+solutionVarsStr.toString());}
			Iterator iteratorVars = selectVarsStr.iterator();
  
			while (iteratorVars.hasNext()) {
				   String value = (String)iteratorVars.next();
				   if (whereVarsStr.contains(value)){
				   }else{
							   
						 parser.report_error("Error in SelectClause: "+value+" is not in WhereClause", selectVarsTot.get(selectVarsStr.indexOf(value)) ); 
						 System.out.println("Error in SelectClause: "+value+" is not in WhereClause");
				   }
			}
			iteratorVars = solutionVarsStr.iterator();
  
			while (iteratorVars.hasNext()) {
				   String value = (String)iteratorVars.next();
				   if (whereVarsStr.contains(value)){
				   }else{
							   
						 parser.report_error("Error in SolutionModifier: "+value+" is not in WhereClause", solutionVarsTot.get(solutionVarsStr.indexOf(value)) );
						 System.out.println("Error in SolutionModifier: "+value+" is not in WhereClause");
				   }
			}
			
					
			if (wherePreStr.size()!=0){System.out.println("wherePreStr: "+wherePreStr.toString());}
			if (prefixPreStr.size()!=0){System.out.println("prefixPreStr: "+prefixPreStr.toString());}
			iteratorVars = wherePreStr.iterator();
  
			while (iteratorVars.hasNext()) {
				   String value = (String)iteratorVars.next();
				   if (prefixPreStr.contains(value)){
				   }else{
							   
						 parser.report_error("Error in WhereClause: "+value+" has not declared in Prologue", wherePreTot.get(wherePreStr.indexOf(value)) ); 
						 System.out.println("Error in WhereClause: "+value+" has not declared in Prologue");
				   }
			}
         
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("QueryUnit",138, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          return CUP$SparqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= QueryUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)).value;
		RESULT = start_val;
              CUP$SparqlCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.elementAt(CUP$SparqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SparqlCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SparqlCup$parser.done_parsing();
          return CUP$SparqlCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

