/* The following code was generated by JFlex 1.4.3 on 02/09/15 16.43 */

/* --------------------------Usercode Section------------------------ */

package it.poliba.sisinflab.semanticweb.lod.losm.sparl;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02/09/15 16.43 from the specification file
 * <tt>/home/cheggynho/eclipse_tomcat_src_workspace/Sparql_test/src/sparql/Sparql.lex</tt>
 */
public final class SparqlLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IRI_REF_END = 10;
  public static final int YYINITIAL = 0;
  public static final int IRI_REF_BODY = 8;
  public static final int PNAME_LN2 = 6;
  public static final int PNAME_NS = 2;
  public static final int PNAME_LN = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\26\1\113\2\2\1\20\22\2\1\26\1\37\1\21\1\46"+
    "\1\11\1\33\1\40\1\17\1\24\1\25\1\41\1\15\1\42\1\14"+
    "\1\7\1\45\1\6\1\102\1\103\1\105\1\107\1\101\1\104\1\6"+
    "\1\106\1\6\1\4\1\43\1\1\1\44\1\3\1\10\1\12\1\51"+
    "\1\47\1\63\1\34\1\16\1\57\1\76\1\75\1\60\1\13\1\71"+
    "\1\62\1\73\1\67\1\66\1\111\1\13\1\55\1\53\1\64\1\70"+
    "\1\110\1\74\1\61\1\72\1\100\1\27\1\22\1\30\1\117\1\5"+
    "\1\2\1\52\1\50\1\63\1\34\1\16\1\35\1\76\1\75\1\60"+
    "\1\13\1\71\1\62\1\73\1\23\1\66\1\54\1\13\1\56\1\77"+
    "\1\65\1\112\1\110\1\74\1\61\1\72\1\100\1\114\1\116\1\115"+
    "\1\36\70\0\1\32\10\0\27\31\4\0\34\31\1\0\u0208\31\160\32"+
    "\16\31\1\0\u1c81\31\14\0\2\31\61\0\2\32\57\0\u0120\31\u0a70\0"+
    "\u03f0\31\21\0\ua7ff\31\u2100\0\u04d0\31\40\0\u020e\31\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\1\11\1\12\1\13\1\11\1\1\1\14"+
    "\2\1\1\11\1\15\1\16\1\17\1\20\1\12\1\1"+
    "\2\11\1\21\1\1\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\2\11\1\27\17\11\1\30\1\31\1\32\1\33"+
    "\1\0\1\34\1\35\1\36\1\37\1\0\1\40\4\0"+
    "\1\41\2\0\1\42\1\41\1\42\1\43\1\44\1\45"+
    "\1\41\1\0\1\46\1\47\1\0\1\50\1\0\1\51"+
    "\1\46\1\0\2\41\1\0\1\52\2\0\1\53\1\0"+
    "\1\54\1\55\2\41\1\0\1\56\1\0\1\57\1\0"+
    "\10\41\1\60\1\61\1\62\4\41\1\63\2\41\1\64"+
    "\14\41\1\65\1\66\13\41\1\67\1\70\22\41\1\71"+
    "\1\72\4\0\1\73\1\0\1\40\1\74\1\40\3\0"+
    "\1\75\1\0\1\76\1\0\2\51\2\41\1\52\1\0"+
    "\1\53\1\0\1\41\1\77\1\100\3\41\1\101\12\41"+
    "\1\102\1\103\1\104\1\105\1\106\6\41\1\107\1\41"+
    "\1\110\44\41\1\111\1\112\1\113\11\41\1\0\1\40"+
    "\1\0\2\74\1\45\1\114\1\0\1\115\1\0\2\41"+
    "\4\0\1\41\1\116\1\41\1\117\1\120\2\41\1\121"+
    "\3\41\1\122\1\123\20\41\1\124\6\41\1\125\2\41"+
    "\1\126\5\41\1\127\2\41\1\130\1\131\6\41\1\132"+
    "\1\41\1\133\10\41\1\134\1\135\2\41\1\136\1\137"+
    "\5\41\2\140\1\41\1\37\2\41\2\0\1\141\4\41"+
    "\1\142\1\41\1\143\1\144\1\145\25\41\1\146\1\147"+
    "\3\41\1\150\1\41\1\151\1\41\1\152\1\153\1\41"+
    "\1\154\4\41\1\155\3\41\1\156\1\157\1\160\1\161"+
    "\1\162\1\163\1\41\1\164\1\165\1\41\1\166\1\167"+
    "\3\41\1\170\1\171\1\172\1\41\1\173\2\41\1\174"+
    "\2\41\1\175\2\41\1\176\1\177\4\41\1\200\2\41"+
    "\1\201\1\202\1\203\1\204\1\205\2\41\1\206\4\41"+
    "\1\207\1\41\1\210\3\41\1\211\2\41\1\212\1\41"+
    "\1\213\5\41\1\214\1\215\1\41\1\216\3\41\1\217"+
    "\1\220\1\221\1\222\1\41\1\223\7\41\1\224\2\41"+
    "\1\225\1\226\1\227\1\41\1\230\1\41\1\231\5\41"+
    "\1\232\1\233\1\234\1\235\2\41\1\236\1\237\1\240"+
    "\1\241\1\242\1\41\1\243\5\41\1\244\2\41\1\245"+
    "\1\41\1\246";

  private static int [] zzUnpackAction() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0"+
    "\0\u0230\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460"+
    "\0\u04b0\0\120\0\u0500\0\u0550\0\u05a0\0\u05f0\0\120\0\u0640"+
    "\0\120\0\120\0\u0690\0\u06e0\0\u0730\0\u0780\0\u07d0\0\120"+
    "\0\120\0\120\0\120\0\120\0\u0820\0\u0870\0\u08c0\0\u08c0"+
    "\0\u0910\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40"+
    "\0\u0b90\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\120"+
    "\0\120\0\u0dc0\0\u0e10\0\u0e60\0\120\0\u0e60\0\120\0\u0eb0"+
    "\0\u0f00\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u10e0"+
    "\0\u1130\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310\0\u0370"+
    "\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540\0\u1590"+
    "\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u17c0\0\u1810"+
    "\0\u1860\0\u0f00\0\120\0\u18b0\0\u1900\0\u05f0\0\120\0\u0640"+
    "\0\120\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30"+
    "\0\u1b80\0\u1bd0\0\120\0\120\0\u0820\0\u1c20\0\u1c70\0\u1cc0"+
    "\0\u1d10\0\u0370\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0"+
    "\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170"+
    "\0\u21c0\0\u2210\0\u0370\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0"+
    "\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580\0\u0370\0\u0370"+
    "\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710\0\u2760\0\u27b0\0\u2800"+
    "\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80"+
    "\0\u2ad0\0\u2b20\0\120\0\120\0\u0eb0\0\u2b70\0\u2bc0\0\u2c10"+
    "\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2df0\0\u2e40\0\u2e90"+
    "\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u1590\0\u15e0\0\u3020\0\u3070"+
    "\0\120\0\u30c0\0\120\0\u3110\0\u3160\0\u0370\0\u0370\0\u31b0"+
    "\0\u3200\0\u3250\0\u0370\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u33e0"+
    "\0\u3430\0\u3480\0\u34d0\0\u3520\0\u3570\0\u0370\0\u0370\0\u0370"+
    "\0\u0370\0\u0370\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u3750"+
    "\0\u37a0\0\u37f0\0\u0370\0\u3840\0\u3890\0\u38e0\0\u3930\0\u3980"+
    "\0\u39d0\0\u3a20\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00"+
    "\0\u3c50\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80"+
    "\0\u3ed0\0\u3f20\0\u3f70\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u4100"+
    "\0\u4150\0\u41a0\0\u41f0\0\u4240\0\u4290\0\u42e0\0\u4330\0\u0370"+
    "\0\u0370\0\u4380\0\u43d0\0\u4420\0\u4470\0\u44c0\0\u4510\0\u4560"+
    "\0\u45b0\0\u4600\0\u4650\0\u46a0\0\120\0\u2c60\0\u2da0\0\u2df0"+
    "\0\u46f0\0\u4740\0\u4740\0\u4790\0\u4790\0\u47e0\0\u4830\0\u4880"+
    "\0\u48d0\0\u4920\0\u4970\0\u49c0\0\u4a10\0\u4a60\0\u4ab0\0\u0370"+
    "\0\u4b00\0\u4b50\0\u0370\0\u4ba0\0\u4bf0\0\u4c40\0\u0370\0\u0370"+
    "\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0\0\u4e20\0\u4e70\0\u4ec0"+
    "\0\u4f10\0\u4f60\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140"+
    "\0\u0370\0\u5190\0\u51e0\0\u5230\0\u5280\0\u52d0\0\u5320\0\u0370"+
    "\0\u5370\0\u53c0\0\u0370\0\u5410\0\u5460\0\u54b0\0\u5500\0\u5550"+
    "\0\u55a0\0\u55f0\0\u5640\0\u0370\0\u0370\0\u5690\0\u56e0\0\u5730"+
    "\0\u5780\0\u57d0\0\u5820\0\u0370\0\u5870\0\u0370\0\u58c0\0\u5910"+
    "\0\u5960\0\u59b0\0\u5a00\0\u5a50\0\u5aa0\0\u5af0\0\u0370\0\u0370"+
    "\0\u5b40\0\u5b90\0\u0370\0\u0370\0\u5be0\0\u5c30\0\u5c80\0\u5cd0"+
    "\0\u5d20\0\u0370\0\u5d20\0\u5d70\0\120\0\u5dc0\0\u5e10\0\u5e60"+
    "\0\u5eb0\0\u0370\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u0370\0\u6040"+
    "\0\u0370\0\u0370\0\u0370\0\u6090\0\u60e0\0\u6130\0\u6180\0\u61d0"+
    "\0\u6220\0\u6270\0\u62c0\0\u6310\0\u6360\0\u63b0\0\u6400\0\u6450"+
    "\0\u64a0\0\u64f0\0\u6540\0\u6590\0\u65e0\0\u6630\0\u6680\0\u66d0"+
    "\0\u0370\0\u0370\0\u6720\0\u6770\0\u67c0\0\u0370\0\u6810\0\u0370"+
    "\0\u6860\0\u0370\0\u0370\0\u68b0\0\u0370\0\u6900\0\u6950\0\u69a0"+
    "\0\u69f0\0\u0370\0\u6a40\0\u6a90\0\u6ae0\0\u0370\0\u0370\0\u0370"+
    "\0\u0370\0\u0370\0\u0370\0\u6b30\0\u0370\0\u0370\0\u6b80\0\u0370"+
    "\0\u0370\0\u6bd0\0\u6c20\0\u6c70\0\u0370\0\120\0\120\0\u6cc0"+
    "\0\u0370\0\u6d10\0\u6d60\0\u0370\0\u6db0\0\u6e00\0\u0370\0\u6e50"+
    "\0\u6ea0\0\u0370\0\u0370\0\u6ef0\0\u6f40\0\u6f90\0\u6fe0\0\u0370"+
    "\0\u7030\0\u7080\0\u0370\0\u0370\0\u0370\0\u0370\0\u0370\0\u70d0"+
    "\0\u7120\0\u0370\0\u7170\0\u71c0\0\u7210\0\u7260\0\u0370\0\u72b0"+
    "\0\u0370\0\u7300\0\u7350\0\u73a0\0\u0370\0\u73f0\0\u7440\0\u0370"+
    "\0\u7490\0\u0370\0\u74e0\0\u7530\0\u7580\0\u75d0\0\u7620\0\u0370"+
    "\0\u0370\0\u7670\0\u0370\0\u76c0\0\u7710\0\u7760\0\u0370\0\u0370"+
    "\0\u0370\0\u0370\0\u77b0\0\u0370\0\u7800\0\u7850\0\u78a0\0\u78f0"+
    "\0\u7940\0\u7990\0\u79e0\0\u0370\0\u7a30\0\u7a80\0\u0370\0\u0370"+
    "\0\u0370\0\u7ad0\0\u0370\0\u7b20\0\u0370\0\u7b70\0\u7bc0\0\u7c10"+
    "\0\u7c60\0\u7cb0\0\u0370\0\u0370\0\u0370\0\u0370\0\u7d00\0\u7d50"+
    "\0\u0370\0\u0370\0\u0370\0\u0370\0\u0370\0\u7da0\0\u0370\0\u7df0"+
    "\0\u7e40\0\u7e90\0\u7ee0\0\u7f30\0\u0370\0\u7f80\0\u7fd0\0\u0370"+
    "\0\u8020\0\u0370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\22\1\30"+
    "\1\31\1\15\1\32\1\33\1\34\1\35\1\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\2\46"+
    "\1\47\1\50\1\51\1\52\2\53\1\35\1\54\1\15"+
    "\1\55\1\56\2\57\1\60\1\25\1\61\1\15\1\62"+
    "\1\63\1\64\1\65\1\66\1\51\1\15\7\10\1\67"+
    "\1\52\1\61\1\22\1\70\1\71\1\72\1\73\120\0"+
    "\1\74\2\0\1\75\14\74\3\0\3\74\1\0\15\74"+
    "\1\76\46\74\51\0\1\77\57\0\3\100\1\101\3\0"+
    "\1\100\1\102\1\0\1\100\1\103\2\0\1\104\1\100"+
    "\5\0\1\100\1\102\1\105\2\100\11\0\44\100\11\0"+
    "\1\106\2\107\1\101\3\0\1\107\1\102\1\0\1\107"+
    "\1\103\2\0\1\110\1\107\5\0\2\107\1\111\2\107"+
    "\11\0\44\107\11\0\1\101\1\107\1\10\1\112\3\0"+
    "\1\107\1\102\1\0\1\113\1\103\2\0\1\110\1\107"+
    "\5\0\2\107\1\111\2\107\11\0\32\107\7\10\3\107"+
    "\13\0\1\114\72\0\7\114\15\0\2\115\4\0\1\115"+
    "\2\0\1\115\4\0\1\115\5\0\1\115\2\0\2\115"+
    "\11\0\44\115\12\0\2\116\4\0\1\116\2\0\1\116"+
    "\4\0\1\116\5\0\1\116\2\0\2\116\11\0\44\116"+
    "\20\0\1\117\2\0\1\117\4\0\1\117\10\0\2\117"+
    "\11\0\32\117\7\0\3\117\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\13\0"+
    "\1\123\1\124\71\0\7\123\16\0\1\125\1\126\71\0"+
    "\7\125\14\0\1\6\1\120\1\127\1\121\3\0\1\120"+
    "\1\130\1\131\1\120\1\103\2\0\1\110\1\132\5\0"+
    "\2\120\1\111\2\120\11\0\12\120\1\133\5\120\1\132"+
    "\11\120\7\127\3\120\5\0\17\134\1\135\1\0\1\134"+
    "\1\136\70\134\1\0\4\134\20\137\1\0\1\140\1\141"+
    "\70\137\1\0\4\137\5\0\1\142\1\0\4\142\1\0"+
    "\2\142\1\0\1\142\1\0\3\143\2\142\5\0\1\142"+
    "\1\0\1\143\11\142\1\0\1\143\5\0\1\143\6\0"+
    "\1\143\36\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\2\120\2\144\13\120\1\145\24\120"+
    "\25\0\1\146\4\0\1\147\1\146\64\0\1\146\24\0"+
    "\1\150\5\0\1\150\1\0\1\151\62\0\1\150\12\0"+
    "\1\152\7\0\1\152\15\0\2\152\11\0\4\152\4\0"+
    "\1\152\3\0\1\152\15\0\7\152\14\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\153\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\2\120"+
    "\2\154\2\120\2\155\1\120\1\156\32\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\2\120\2\157\2\120\2\160\1\120\1\161\1\120\1\162"+
    "\30\120\51\0\1\163\113\0\1\164\57\0\41\165\1\0"+
    "\51\165\1\0\4\165\4\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\166"+
    "\5\0\2\120\1\111\2\120\11\0\2\120\2\167\5\120"+
    "\1\170\5\120\1\171\1\166\2\120\1\172\20\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\1\173"+
    "\1\120\11\0\2\174\2\120\1\175\6\120\1\176\14\120"+
    "\1\175\10\120\1\177\2\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\200\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\2\120\2\201"+
    "\5\120\1\202\3\120\2\203\2\120\1\204\4\120\1\205"+
    "\14\120\1\204\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\6\120\2\206\34\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\207"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\2\120\2\210\13\120\1\211\24\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\212\5\0\2\120\1\111\1\120\1\213"+
    "\11\0\4\120\1\214\3\120\1\213\7\120\1\212\7\120"+
    "\1\214\13\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\2\120\2\215\5\120\1\216"+
    "\2\120\1\217\2\120\1\220\24\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\221\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\6\120"+
    "\2\222\3\120\1\223\3\120\1\224\24\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\6\120\2\225\1\120\1\226\5\120\1\227\11\120\1\230"+
    "\12\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\1\120\1\231\11\0\5\120\1\232\2\233\1\231"+
    "\31\120\1\232\1\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\234"+
    "\5\0\2\120\1\111\2\120\11\0\4\120\1\235\7\120"+
    "\1\236\3\120\1\234\1\237\6\120\1\235\12\120\1\237"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\240\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\1\241\1\120\11\0\2\120\2\242"+
    "\5\120\1\243\5\120\1\244\24\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\11\120"+
    "\1\245\14\120\1\246\15\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\2\120\2\247"+
    "\13\120\1\250\24\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\6\120\2\251\34\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\2\120\2\252\40\120\123\0\1\253\120\0"+
    "\1\254\1\74\2\0\1\75\14\74\3\0\3\74\1\0"+
    "\64\74\11\0\1\255\2\100\1\255\3\0\2\100\1\0"+
    "\1\100\1\256\2\0\1\104\1\100\5\0\2\100\1\105"+
    "\2\100\11\0\44\100\11\0\1\101\2\102\1\101\3\0"+
    "\2\102\1\0\1\102\1\103\2\0\1\110\1\102\5\0"+
    "\2\102\1\111\2\102\11\0\44\102\11\0\1\257\120\0"+
    "\1\100\1\0\4\100\1\0\2\100\1\0\1\100\4\0"+
    "\2\100\5\0\1\100\2\0\11\100\57\0\1\260\7\0"+
    "\1\260\15\0\2\260\11\0\4\260\4\0\1\260\3\0"+
    "\1\260\15\0\7\260\14\0\1\101\2\261\1\101\3\0"+
    "\1\261\1\102\1\0\1\261\1\103\2\0\1\110\1\261"+
    "\5\0\1\261\1\102\1\111\2\261\11\0\44\261\11\0"+
    "\1\101\2\107\1\101\3\0\1\107\1\102\1\0\1\107"+
    "\1\103\2\0\1\110\1\107\5\0\2\107\1\111\2\107"+
    "\11\0\44\107\12\0\1\102\1\0\4\102\1\0\2\102"+
    "\1\0\1\102\4\0\2\102\5\0\1\102\2\0\11\102"+
    "\57\0\1\262\7\0\1\262\15\0\2\262\11\0\4\262"+
    "\4\0\1\262\3\0\1\262\15\0\7\262\14\0\1\101"+
    "\1\102\1\112\1\101\3\0\2\102\1\0\1\263\1\103"+
    "\2\0\1\110\1\102\5\0\2\102\1\111\2\102\11\0"+
    "\32\102\7\112\3\102\11\0\1\101\1\107\1\264\1\101"+
    "\3\0\1\107\1\265\1\266\1\107\1\103\2\0\1\110"+
    "\1\107\5\0\2\107\1\111\2\107\11\0\32\107\7\264"+
    "\3\107\13\0\1\114\7\0\1\267\62\0\7\114\15\0"+
    "\2\115\4\0\1\115\2\0\1\115\4\0\1\115\5\0"+
    "\2\115\1\0\2\115\11\0\44\115\12\0\2\116\4\0"+
    "\1\116\2\0\1\116\4\0\1\116\5\0\2\116\1\0"+
    "\2\116\11\0\44\116\20\0\1\117\1\270\1\0\1\117"+
    "\4\0\1\117\10\0\2\117\11\0\32\117\7\0\3\117"+
    "\11\0\1\101\2\122\1\121\3\0\2\122\1\0\1\122"+
    "\1\103\2\0\1\110\1\122\5\0\2\122\1\111\2\122"+
    "\11\0\44\122\11\0\1\6\2\122\1\121\3\0\2\122"+
    "\1\0\1\122\1\103\2\0\1\110\1\122\5\0\2\122"+
    "\1\111\2\122\11\0\44\122\13\0\1\123\1\271\6\0"+
    "\1\272\62\0\7\123\16\0\1\271\72\0\7\271\16\0"+
    "\1\125\1\273\6\0\1\274\62\0\7\125\16\0\1\273"+
    "\72\0\7\273\14\0\1\6\1\120\1\127\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\32\120\7\127\3\120"+
    "\11\0\1\6\1\122\1\275\1\121\3\0\2\122\1\0"+
    "\1\122\1\103\2\0\1\110\1\122\5\0\2\122\1\111"+
    "\2\122\11\0\32\122\7\275\3\122\13\0\1\276\72\0"+
    "\7\276\14\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\14\120\1\277\27\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\11\120\1\300\32\120\5\0\17\134\1\301\1\0\1\134"+
    "\1\136\70\134\1\0\4\134\17\0\1\302\117\0\1\134"+
    "\1\0\3\134\11\0\1\134\12\0\1\134\5\0\1\134"+
    "\6\0\1\134\32\0\20\137\1\0\1\303\1\141\70\137"+
    "\1\0\4\137\21\0\1\304\115\0\1\137\1\0\3\137"+
    "\11\0\1\137\12\0\1\137\5\0\1\137\6\0\1\137"+
    "\36\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\24\120\1\305\17\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\15\120"+
    "\2\306\6\120\1\307\16\120\13\0\1\142\7\0\1\142"+
    "\15\0\2\142\11\0\4\142\4\0\1\142\3\0\1\142"+
    "\15\0\7\142\14\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\4\120\1\310\6\120\1\311"+
    "\14\120\1\310\13\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\15\120\2\312\4\120"+
    "\1\313\20\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\17\120\1\314\24\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\4\120\1\315\23\120\1\315\13\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\13\120\1\316\30\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\17\120\1\317\24\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\13\120\1\320\30\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\17\120"+
    "\1\321\24\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\17\120\1\322\24\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\4\120\1\323\23\120\1\323\13\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\324\5\0\2\120\1\111\2\120\11\0"+
    "\20\120\1\324\23\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\21\120\1\325\21\120"+
    "\1\325\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\1\326\1\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\4\120"+
    "\1\327\23\120\1\327\13\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\22\120\1\330"+
    "\21\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\13\120\1\331\30\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\27\120\1\332\14\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\5\120\1\333\2\334"+
    "\3\120\1\335\1\336\25\120\1\333\1\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\24\120\1\337\17\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\13\120\1\340\30\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\6\120\2\341\34\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\2\342"+
    "\22\120\1\343\17\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\2\120\2\344\40\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\345\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\1\346\1\120\11\0\5\120\1\347"+
    "\21\120\1\350\12\120\1\347\1\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\351\5\0\2\120\1\111\2\120\11\0\20\120"+
    "\1\351\23\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\21\120\1\352\21\120\1\352"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\4\120\1\353\10\120\2\354\11\120\1\353"+
    "\13\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\355\5\0\2\120"+
    "\1\111\2\120\11\0\2\356\7\120\1\357\1\120\1\360"+
    "\4\120\1\355\1\361\21\120\1\361\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\362\5\0\2\120\1\111\2\120\11\0\20\120"+
    "\1\362\23\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\24\120\1\363\17\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\2\120\2\364\40\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\2\120\2\365"+
    "\40\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\11\120\1\366\32\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\367\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\44\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\370\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\371\5\0\2\120\1\111\2\120\11\0\2\120\2\372"+
    "\1\120\1\373\12\120\1\371\1\374\20\120\1\373\1\374"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\21\120\1\375\21\120\1\375\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\24\120\1\376\17\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\1\120\1\377\11\0\10\120\1\377"+
    "\33\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\15\120\2\u0100\25\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\1\u0101\1\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\1\u0102\1\120\11\0\11\120\1\u0103\32\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\11\120\1\u0104\32\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\2\120"+
    "\2\u0105\40\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\11\120\1\u0106\32\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\2\120\2\u0107\40\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\32\120\1\u0108"+
    "\11\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\12\120\1\u0109\31\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\u010a\5\0\2\120\1\111\2\120\11\0"+
    "\20\120\1\u010a\23\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\u010b"+
    "\5\0\2\120\1\111\2\120\11\0\20\120\1\u010b\20\120"+
    "\1\u010c\2\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\15\120\2\u010d\25\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\u010e"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\41\120\1\u010f\2\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\21\120\1\u0110\21\120\1\u0110\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\2\120"+
    "\2\u0111\13\120\1\u0112\24\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\13\120\1\u0113"+
    "\30\120\11\0\1\u0114\132\0\1\u0115\106\0\1\100\7\0"+
    "\1\100\15\0\2\100\11\0\4\100\4\0\1\100\3\0"+
    "\1\100\15\0\7\100\14\0\1\101\2\261\1\u0116\3\0"+
    "\2\261\1\0\1\261\1\103\2\0\1\110\1\261\5\0"+
    "\2\261\1\111\2\261\11\0\44\261\13\0\1\102\7\0"+
    "\1\102\15\0\2\102\11\0\4\102\4\0\1\102\3\0"+
    "\1\102\15\0\7\102\14\0\1\101\1\102\1\u0117\1\101"+
    "\3\0\1\102\1\265\1\266\1\102\1\103\2\0\1\110"+
    "\1\102\5\0\2\102\1\111\2\102\11\0\32\102\7\u0117"+
    "\3\102\11\0\1\101\1\107\1\264\1\101\3\0\1\107"+
    "\1\102\1\0\1\107\1\103\2\0\1\110\1\107\5\0"+
    "\2\107\1\111\2\107\11\0\32\107\7\264\3\107\11\0"+
    "\1\101\1\102\1\u0117\1\101\3\0\2\102\1\0\1\102"+
    "\1\103\2\0\1\110\1\102\5\0\2\102\1\111\2\102"+
    "\11\0\32\102\7\u0117\3\102\13\0\1\u0118\72\0\7\u0118"+
    "\16\0\1\u0118\5\0\2\266\63\0\7\u0118\16\0\1\u0119"+
    "\4\0\1\u0119\2\0\1\u0119\4\0\1\u0119\10\0\2\u0119"+
    "\11\0\44\u0119\13\0\1\271\7\0\1\272\62\0\7\271"+
    "\16\0\1\u011a\5\0\2\u011b\63\0\7\u011a\16\0\1\273"+
    "\7\0\1\274\62\0\7\273\16\0\1\u011c\5\0\2\u011d"+
    "\63\0\7\u011c\14\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\17\120\1\u011e\24\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\4\120\1\u011f\23\120\1\u011f\13\120\5\0\17\302"+
    "\1\u0120\2\302\1\u0121\75\302\21\304\1\u0122\1\u0123\75\304"+
    "\4\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\u0124\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\14\120\1\u0125\27\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\u0126\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\2\120\2\u0127\40\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\5\120\1\u0128\34\120\1\u0128\1\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\15\120\2\u0129\25\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\4\120\1\u012a"+
    "\23\120\1\u012a\13\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\24\120\1\u012b\17\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u012c\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\17\120"+
    "\1\u012d\24\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\1\u012e\1\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\u012f\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\44\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\1\u0130\1\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\u0131\5\0\2\120\1\111\2\120\11\0\20\120"+
    "\1\u0131\23\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\2\120\2\u0132\40\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\41\120\1\u0133\2\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u0134\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\17\120\1\u0135\24\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u0136\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\5\120\1\u0137"+
    "\34\120\1\u0137\1\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\u0138\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\u0139\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\2\u013a\2\u013b\1\u013c\6\120\1\u013d\5\120\1\u013e\6\120"+
    "\1\u013c\12\120\1\u013e\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\4\120\1\u013f\23\120"+
    "\1\u013f\13\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\32\120\1\u0140\1\u0141\1\u0142"+
    "\1\120\1\u0143\5\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\1\120\1\u0144\11\0\10\120\1\u0144"+
    "\33\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\21\120\1\u0145\21\120\1\u0145\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\13\120\1\u0146\30\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u0147\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\1\u0148"+
    "\1\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\u0149"+
    "\5\0\2\120\1\111\2\120\11\0\20\120\1\u0149\23\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\u014a\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\17\120\1\u014b\24\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\21\120\1\u014c\21\120\1\u014c\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\13\120\1\u014d\30\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\6\120\2\u014e\34\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\11\120\1\u014f\32\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\6\120"+
    "\2\u0150\34\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\27\120\1\u0151\14\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\11\120\1\u0152\32\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\4\120\1\u0153"+
    "\23\120\1\u0153\13\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\1\u0154\1\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\13\120\1\u0155\30\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\2\120\2\u0156"+
    "\40\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\2\120\2\u0157\40\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\4\120\1\u0158\7\120\1\u0159\2\u015a\11\120\1\u0158\13\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\13\120\1\u015b\30\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\23\120"+
    "\1\u015c\20\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\u015d\5\0"+
    "\2\120\1\111\2\120\11\0\20\120\1\u015d\23\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\u015e"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u015f\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\4\120"+
    "\1\u0160\23\120\1\u0160\13\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\11\120\1\u0161"+
    "\32\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\u0162\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u0163\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\17\120\1\u0164\24\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\u0165\5\0\2\120\1\111\2\120\11\0\20\120\1\u0165"+
    "\23\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\4\120\1\u0166\23\120\1\u0166\13\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\1\u0167\1\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\6\120\2\u0168"+
    "\34\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\21\120\1\u0169\21\120\1\u0169\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\15\120\2\u016a\25\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u016b\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\26\120\1\u016c\15\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\6\120\2\u016d"+
    "\34\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\11\120\1\u016e\32\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\6\120\2\u016f\34\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\5\120\1\u0170\34\120"+
    "\1\u0170\1\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\21\120\1\u0171\20\120\1\u0172"+
    "\1\u0173\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\21\120\1\u0174\21\120\1\u0174\24\0"+
    "\1\u0175\106\0\1\u0119\4\0\1\u0119\1\270\1\0\1\u0119"+
    "\4\0\1\u0119\10\0\2\u0119\11\0\44\u0119\13\0\1\u011a"+
    "\72\0\7\u011a\16\0\1\u011c\72\0\7\u011c\14\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\1\u0176\1\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\15\120\2\u0177\25\120\5\0"+
    "\17\302\1\u0178\2\302\1\u0121\75\302\17\0\1\302\1\0"+
    "\3\302\11\0\1\302\12\0\1\302\5\0\1\302\6\0"+
    "\1\302\32\0\21\304\1\u0179\1\u0123\75\304\17\0\1\304"+
    "\1\0\3\304\11\0\1\304\12\0\1\304\5\0\1\304"+
    "\6\0\1\304\36\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\1\u017a\1\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\6\120\2\u017b\34\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\15\120\2\u017c\25\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u017d\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\11\120"+
    "\1\u017e\32\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u017f\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\u0180\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\44\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\6\120\2\u0181\34\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\u0182\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\44\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\1\u0183\1\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\6\120\2\u0184"+
    "\34\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\11\120\1\u0185\32\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\14\120\1\u0186\27\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\u0187"+
    "\5\0\2\120\1\111\2\120\11\0\20\120\1\u0187\23\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u0188\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\13\120"+
    "\1\u0189\30\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\u018a\5\0"+
    "\2\120\1\111\2\120\11\0\20\120\1\u018a\23\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\u018b\5\0\2\120\1\111\2\120"+
    "\11\0\20\120\1\u018b\23\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u018c\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\1\120"+
    "\1\u018d\11\0\10\120\1\u018d\33\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\15\120"+
    "\2\u018e\25\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u018f\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\2\120\2\u0190\40\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\21\120\1\u0191\21\120\1\u0191\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\15\120"+
    "\2\u0192\25\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\33\120\1\u0193\10\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\32\120\1\u0194\11\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\37\120\1\u0195"+
    "\4\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\11\120\1\u0196\32\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\14\120\1\u0197\27\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\2\120\2\u0198\40\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\12\120\1\u0199\31\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\1\u019a\1\120\11\0"+
    "\44\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\6\120\2\u019b\34\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\24\120\1\u019c\17\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\2\120\2\u019d\40\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\11\120\1\u019e\32\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\15\120"+
    "\2\u019f\25\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\11\120\1\u01a0\32\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\24\120\1\u01a1\17\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\15\120\2\u01a2"+
    "\25\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\u01a3\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\15\120\2\u01a4"+
    "\25\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\6\120\2\u01a5\34\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\15\120\2\u01a6\25\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\2\120\2\u01a7\40\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\2\120\2\u01a8\40\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\u01a9\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\44\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u01aa\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\31\120"+
    "\1\u01ab\12\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u01ac\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\17\120"+
    "\1\u01ad\24\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\6\120\2\u01ae\34\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\1\120"+
    "\1\u01af\11\0\10\120\1\u01af\33\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\u01b0\5\0\2\120\1\111\2\120\11\0\20\120"+
    "\1\u01b0\23\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\27\120\1\u01b1\14\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\u01b2"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\4\120\1\u01b3\10\120\2\u01b4"+
    "\11\120\1\u01b3\13\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\26\120\1\u01b5\15\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\u01b6\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\u01b7"+
    "\5\0\2\120\1\111\2\120\11\0\20\120\1\u01b7\23\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\4\120\1\u01b8\23\120\1\u01b8\13\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\26\120\1\u01b9\15\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\5\120\1\u01ba"+
    "\34\120\1\u01ba\1\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\u01bb\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\u01bc\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\44\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\4\120\1\u01bd\23\120\1\u01bd\13\120"+
    "\5\0\17\302\1\u01be\2\302\1\u0121\75\302\21\304\1\u01bf"+
    "\1\u0123\75\304\4\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\11\120\1\u01c0\32\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\u01c1"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\23\120\1\u01c2\20\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\u01c3\5\0\2\120\1\111\2\120"+
    "\11\0\20\120\1\u01c3\23\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\6\120\2\u01c4"+
    "\34\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\2\120\2\u01c5\40\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\14\120\1\u01c6\27\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\15\120\2\u01c7\25\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\1\u01c8\1\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u01c9\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\u01ca"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\15\120\2\u01cb\25\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\1\u01cc"+
    "\1\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\1\120\1\u01cd\11\0\10\120\1\u01cd"+
    "\33\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\15\120\2\u01ce\25\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\2\120\2\u01cf\40\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\u01d0"+
    "\5\0\2\120\1\111\2\120\11\0\20\120\1\u01d0\23\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\u01d1\5\0\2\120\1\111"+
    "\2\120\11\0\20\120\1\u01d1\23\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\11\120"+
    "\1\u01d2\32\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\6\120\2\u01d3\34\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\34\120\1\u01d4\7\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\35\120\1\u01d5"+
    "\6\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\40\120\1\u01d6\3\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\12\120\1\u01d7\31\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\u01d8\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\14\120\1\u01d9\27\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\15\120\2\u01da\25\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\u01db\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\u01dc"+
    "\5\0\2\120\1\111\2\120\11\0\20\120\1\u01dc\23\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\u01dd\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\2\120\1\u01de\25\120"+
    "\1\u01de\13\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u01df\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\6\120"+
    "\2\u01e0\34\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\15\120\2\u01e1\25\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\11\120\1\u01e2\32\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\4\120\1\u01e3"+
    "\23\120\1\u01e3\13\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\17\120\1\u01e4\24\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u01e5\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\u01e6\5\0\2\120\1\111\2\120\11\0\20\120"+
    "\1\u01e6\23\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u01e7\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\27\120"+
    "\1\u01e8\14\120\11\0\1\6\1\u01e9\1\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\4\120\1\u01ea\23\120\1\u01ea\13\120\11\0\1\6\1\u01eb"+
    "\1\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\44\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\2\u01ec\42\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\5\120"+
    "\1\u01ed\34\120\1\u01ed\1\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\14\120\1\u01ee"+
    "\27\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\15\120\2\u01ef\25\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\u01f0\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\44\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\4\120\1\u01f1\23\120\1\u01f1\13\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\6\120\2\u01f2\34\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\4\120"+
    "\1\u01f3\23\120\1\u01f3\13\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\17\120\1\u01f4"+
    "\24\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\u01f5\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\6\120\2\u01f6"+
    "\34\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\27\120\1\u01f7\14\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\1\u01f8\1\120"+
    "\11\0\44\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\1\u01f9\1\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\u01fa\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\44\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\6\120\2\u01fb\34\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\22\120\1\u01fc\21\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\6\120\2\u01fd\34\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u01fe\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\21\120"+
    "\1\u01ff\21\120\1\u01ff\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\u0200"+
    "\5\0\2\120\1\111\2\120\11\0\20\120\1\u0200\23\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\14\120\1\u0201\27\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\u0202\5\0\2\120\1\111\2\120\11\0\20\120"+
    "\1\u0202\23\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\2\120\2\u0203\40\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\4\120\1\u0204\23\120\1\u0204\13\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\14\120\1\u0205\27\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\1\120\1\u0206\11\0\10\120\1\u0206"+
    "\33\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\u0207\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\44\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\u0208\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\44\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\15\120\2\u0209\25\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\17\120\1\u020a"+
    "\24\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\24\120\1\u020b\17\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\6\120\2\u020c\34\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\6\120\2\u020d\34\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u020e\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\11\120"+
    "\1\u020f\32\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\2\120\2\u0210\40\120\11\0"+
    "\1\6\2\120\1\121\3\0\1\120\1\122\1\0\1\120"+
    "\1\103\2\0\1\110\1\120\5\0\2\120\1\111\2\120"+
    "\11\0\14\120\1\u0211\27\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\14\120\1\u0212"+
    "\27\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\4\120\1\u0213\23\120\1\u0213\13\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\u0214\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\44\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\u0215\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\13\120\1\u0216\30\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\17\120\1\u0217\24\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\17\120\1\u0218\24\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\6\120"+
    "\2\u0219\34\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u021a\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\4\120"+
    "\1\u021b\23\120\1\u021b\13\120\11\0\1\6\2\120\1\121"+
    "\3\0\1\120\1\122\1\0\1\120\1\103\2\0\1\110"+
    "\1\120\5\0\2\120\1\111\2\120\11\0\14\120\1\u021c"+
    "\27\120\11\0\1\6\2\120\1\121\3\0\1\120\1\122"+
    "\1\0\1\120\1\103\2\0\1\110\1\120\5\0\2\120"+
    "\1\111\2\120\11\0\13\120\1\u021d\30\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\26\120\1\u021e\15\120\11\0\1\6\2\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\15\120\2\u021f\25\120"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\u0220\5\0\2\120\1\111"+
    "\2\120\11\0\20\120\1\u0220\23\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\6\120"+
    "\2\u0221\34\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\u0222\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\44\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\14\120"+
    "\1\u0223\27\120\11\0\1\6\1\u0224\1\120\1\121\3\0"+
    "\1\120\1\122\1\0\1\120\1\103\2\0\1\110\1\120"+
    "\5\0\2\120\1\111\2\120\11\0\44\120\11\0\1\6"+
    "\2\120\1\121\3\0\1\120\1\122\1\0\1\120\1\103"+
    "\2\0\1\110\1\120\5\0\2\120\1\111\2\120\11\0"+
    "\4\120\1\u0225\23\120\1\u0225\13\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\2\120"+
    "\2\u0226\40\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\21\120\1\u0227\21\120\1\u0227"+
    "\11\0\1\6\2\120\1\121\3\0\1\120\1\122\1\0"+
    "\1\120\1\103\2\0\1\110\1\120\5\0\2\120\1\111"+
    "\2\120\11\0\15\120\2\u0228\25\120\11\0\1\6\2\120"+
    "\1\121\3\0\1\120\1\122\1\0\1\120\1\103\2\0"+
    "\1\110\1\120\5\0\2\120\1\111\2\120\11\0\6\120"+
    "\2\u0229\34\120\11\0\1\6\2\120\1\121\3\0\1\120"+
    "\1\122\1\0\1\120\1\103\2\0\1\110\1\120\5\0"+
    "\2\120\1\111\2\120\11\0\11\120\1\u022a\32\120\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\16\1\1\11\4\1\1\11\1\1"+
    "\2\11\5\1\5\11\23\1\2\11\2\1\1\0\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\4\0\1\1\2\0"+
    "\7\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\11\1\0\1\11\1\0\10\1\2\11"+
    "\66\1\2\11\4\0\1\1\1\0\3\1\3\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\11\1\0\1\11\1\0"+
    "\117\1\1\0\1\11\1\0\4\1\1\0\1\1\1\0"+
    "\2\1\4\0\121\1\1\11\2\1\2\0\104\1\2\11"+
    "\153\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[554];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
      StringBuffer string = new StringBuffer();

      private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
      }
      private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }
      
   public String getWord(){
   		return yytext();
   }
   
   public int getLine()
   {
     return yyline+1;
   }
   
   public int getCurrentPos()
   {
      return zzCurrentPos;
   }
   
   public int getColumn()
   {
     return yycolumn;
   }

   public char[] getBuffer()
   {
     return zzBuffer;
   }
        private void error(String message) {
    System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }
  
  
    /**
     * Default constructor is needed as we will always call the yyreset
     */
 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { error("Illegal character <"+ yytext()+">");
          }
        case 167: break;
        case 11: 
          { return new Symbol(SparqlSym.PLUSMARK, yytext());
          }
        case 168: break;
        case 80: 
          { return new Symbol(SparqlSym.DROP, yytext());
          }
        case 169: break;
        case 158: 
          { return new Symbol(SparqlSym.SEPARATOR, yytext());
          }
        case 170: break;
        case 116: 
          { return new Symbol(SparqlSym.MONTH, yytext());
          }
        case 171: break;
        case 144: 
          { return new Symbol(SparqlSym.STRUUID, yytext());
          }
        case 172: break;
        case 157: 
          { return new Symbol(SparqlSym.OPTIONAL, yytext());
          }
        case 173: break;
        case 134: 
          { return new Symbol(SparqlSym.INSERT, yytext());
          }
        case 174: break;
        case 13: 
          { return new Symbol(SparqlSym.PARENTHO, yytext());
          }
        case 175: break;
        case 72: 
          { return new Symbol(SparqlSym.SUM, yytext());
          }
        case 176: break;
        case 31: 
          { return new Symbol(SparqlSym.PNAME_LN, yytext());
          }
        case 177: break;
        case 83: 
          { return new Symbol(SparqlSym.BIND, yytext());
          }
        case 178: break;
        case 37: 
          { return new Symbol(SparqlSym.LANGTAG, yytext());
          }
        case 179: break;
        case 92: 
          { return new Symbol(SparqlSym.UUID, yytext());
          }
        case 180: break;
        case 160: 
          { return new Symbol(SparqlSym.STRSTARTS, yytext());
          }
        case 181: break;
        case 112: 
          { /*return new Symbol(SparqlSym.UNION); */
          }
        case 182: break;
        case 65: 
          { return new Symbol(SparqlSym.DAY, yytext());
          }
        case 183: break;
        case 127: 
          { return new Symbol(SparqlSym.SILENT, yytext());
          }
        case 184: break;
        case 155: 
          { return new Symbol(SparqlSym.COALESCE, yytext());
          }
        case 185: break;
        case 102: 
          { return new Symbol(SparqlSym.REGEX, yytext());
          }
        case 186: break;
        case 91: 
          { return new Symbol(SparqlSym.TRUE, yytext());
          }
        case 187: break;
        case 110: 
          { return new Symbol(SparqlSym.ORDER, yytext());
          }
        case 188: break;
        case 43: 
          { return new Symbol(SparqlSym.STRING_LITERAL2, yytext());
          }
        case 189: break;
        case 10: 
          { return new Symbol(SparqlSym.PN_CHARS, yytext());
          }
        case 190: break;
        case 99: 
          { return new Symbol(SparqlSym.FLOOR, yytext());
          }
        case 191: break;
        case 165: 
          { return new Symbol(SparqlSym.GROUP_CONCAT, yytext());
          }
        case 192: break;
        case 49: 
          { return new Symbol(SparqlSym.DOUBLEAMPERSAND, yytext());
          }
        case 193: break;
        case 59: 
          { return new Symbol(SparqlSym.BLANK_NODE_LABEL, yytext());
          }
        case 194: break;
        case 48: 
          { return new Symbol(SparqlSym.DIFFERENT, yytext());
          }
        case 195: break;
        case 12: 
          { /*return new Symbol(SparqlSym.WS);*/
          }
        case 196: break;
        case 36: 
          { return new Symbol(SparqlSym.VAR2, yytext());
          }
        case 197: break;
        case 137: 
          { return new Symbol(SparqlSym.OFFSET, yytext());
          }
        case 198: break;
        case 51: 
          { return new Symbol(SparqlSym.BY, yytext());
          }
        case 199: break;
        case 23: 
          { return new Symbol(SparqlSym.ISA, yytext());
          }
        case 200: break;
        case 71: 
          { return new Symbol(SparqlSym.STR, yytext());
          }
        case 201: break;
        case 9: 
          { return new Symbol(SparqlSym.PN_CHARS_BASE, yytext());
          }
        case 202: break;
        case 93: 
          { return new Symbol(SparqlSym.YEAR, yytext());
          }
        case 203: break;
        case 120: 
          { return new Symbol(SparqlSym.EXISTS, yytext());
          }
        case 204: break;
        case 76: 
          { return new Symbol(SparqlSym.DOUBLE_NEGATIVE, yytext());
          }
        case 205: break;
        case 147: 
          { return new Symbol(SparqlSym.ISBLANK, yytext());
          }
        case 206: break;
        case 98: 
          { return new Symbol(SparqlSym.FALSE, yytext());
          }
        case 207: break;
        case 26: 
          { return new Symbol(SparqlSym.PIPE, yytext());
          }
        case 208: break;
        case 16: 
          { return new Symbol(SparqlSym.SBRACKETC, yytext());
          }
        case 209: break;
        case 75: 
          { return new Symbol(SparqlSym.MIN, yytext());
          }
        case 210: break;
        case 38: 
          { return new Symbol(SparqlSym.PN_PREFIX, yytext());
          }
        case 211: break;
        case 124: 
          { return new Symbol(SparqlSym.FILTER, yytext());
          }
        case 212: break;
        case 128: 
          { return new Symbol(SparqlSym.STRLEN, yytext());
          }
        case 213: break;
        case 41: 
          { return new Symbol(SparqlSym.EXPONENT, yytext());
          }
        case 214: break;
        case 159: 
          { return new Symbol(SparqlSym.STRBEFORE, yytext());
          }
        case 215: break;
        case 30: 
          { return new Symbol(SparqlSym.GEQUAL, yytext());
          }
        case 216: break;
        case 142: 
          { return new Symbol(SparqlSym.STRENDS, yytext());
          }
        case 217: break;
        case 85: 
          { return new Symbol(SparqlSym.RAND, yytext());
          }
        case 218: break;
        case 25: 
          { return new Symbol(SparqlSym.CBRACKETC, yytext());
          }
        case 219: break;
        case 34: 
          { return new Symbol(SparqlSym.DECIMAL, yytext());
          }
        case 220: break;
        case 77: 
          { return new Symbol(SparqlSym.DOUBLE_POSITIVE, yytext());
          }
        case 221: break;
        case 111: 
          { return new Symbol(SparqlSym.UNDEF, yytext());
          }
        case 222: break;
        case 113: 
          { return new Symbol(SparqlSym.USING, yytext());
          }
        case 223: break;
        case 100: 
          { return new Symbol(SparqlSym.BNODE, yytext());
          }
        case 224: break;
        case 56: 
          { return new Symbol(SparqlSym.TZ, yytext());
          }
        case 225: break;
        case 162: 
          { return new Symbol(SparqlSym.ISLITERAL, yytext());
          }
        case 226: break;
        case 115: 
          { return new Symbol(SparqlSym.MINUS, yytext());
          }
        case 227: break;
        case 161: 
          { return new Symbol(SparqlSym.ISNUMERIC, yytext());
          }
        case 228: break;
        case 114: 
          { return new Symbol(SparqlSym.UCASE, yytext());
          }
        case 229: break;
        case 97: 
          { return new Symbol(SparqlSym.NAMED, yytext());
          }
        case 230: break;
        case 28: 
          { return new Symbol(SparqlSym.IRIREF, yytext());
          }
        case 231: break;
        case 125: 
          { return new Symbol(SparqlSym.SELECT, yytext());
          }
        case 232: break;
        case 152: 
          { return new Symbol(SparqlSym.SAMETERM, yytext());
          }
        case 233: break;
        case 58: 
          { return new Symbol(SparqlSym.CARETCARET, yytext());
          }
        case 234: break;
        case 54: 
          { return new Symbol(SparqlSym.IF, yytext());
          }
        case 235: break;
        case 135: 
          { return new Symbol(SparqlSym.CREATE, yytext());
          }
        case 236: break;
        case 89: 
          { return new Symbol(SparqlSym.CEIL, yytext());
          }
        case 237: break;
        case 123: 
          { return new Symbol(SparqlSym.DELETE, yytext());
          }
        case 238: break;
        case 73: 
          { return new Symbol(SparqlSym.MD5, yytext());
          }
        case 239: break;
        case 60: 
          { return new Symbol(SparqlSym.DOUBLE, yytext());
          }
        case 240: break;
        case 149: 
          { return new Symbol(SparqlSym.DESCRIBE, yytext());
          }
        case 241: break;
        case 140: 
          { return new Symbol(SparqlSym.SERVICE, yytext());
          }
        case 242: break;
        case 14: 
          { return new Symbol(SparqlSym.PARENTHC, yytext());
          }
        case 243: break;
        case 151: 
          { return new Symbol(SparqlSym.DISTINCT, yytext());
          }
        case 244: break;
        case 78: 
          { return new Symbol(SparqlSym.DESC, yytext());
          }
        case 245: break;
        case 105: 
          { return new Symbol(SparqlSym.ISURI, yytext());
          }
        case 246: break;
        case 104: 
          { return new Symbol(SparqlSym.ISIRI, yytext());
          }
        case 247: break;
        case 138: 
          { return new Symbol(SparqlSym.HAVING, yytext());
          }
        case 248: break;
        case 145: 
          { return new Symbol(SparqlSym.REDUCED, yytext());
          }
        case 249: break;
        case 4: 
          { return new Symbol(SparqlSym.PNAME_NS, yytext());
          }
        case 250: break;
        case 33: 
          { return new Symbol(SparqlSym.VARNAME, yytext());
          }
        case 251: break;
        case 136: 
          { return new Symbol(SparqlSym.CONCAT, yytext());
          }
        case 252: break;
        case 118: 
          { return new Symbol(SparqlSym.HOURS, yytext());
          }
        case 253: break;
        case 133: 
          { return new Symbol(SparqlSym.PREFIX, yytext());
          }
        case 254: break;
        case 68: 
          { return new Symbol(SparqlSym.ASK, yytext());
          }
        case 255: break;
        case 121: 
          { return new Symbol(SparqlSym.STRING_LITERAL_LONG1, yytext());
          }
        case 256: break;
        case 139: 
          { return new Symbol(SparqlSym.VALUES, yytext());
          }
        case 257: break;
        case 40: 
          { return new Symbol(SparqlSym.INTEGER_POSITIVE, yytext());
          }
        case 258: break;
        case 143: 
          { return new Symbol(SparqlSym.STRLANG, yytext());
          }
        case 259: break;
        case 44: 
          { return new Symbol(SparqlSym.PLX, yytext());
          }
        case 260: break;
        case 22: 
          { return new Symbol(SparqlSym.SLASH, yytext());
          }
        case 261: break;
        case 166: 
          { return new Symbol(SparqlSym.ENCODE_FOR_URI, yytext());
          }
        case 262: break;
        case 94: 
          { return new Symbol(SparqlSym.MOVE, yytext());
          }
        case 263: break;
        case 39: 
          { return new Symbol(SparqlSym.INTEGER_NEGATIVE, yytext());
          }
        case 264: break;
        case 154: 
          { return new Symbol(SparqlSym.CONTAINS, yytext());
          }
        case 265: break;
        case 87: 
          { return new Symbol(SparqlSym.LANG, yytext());
          }
        case 266: break;
        case 84: 
          { return new Symbol(SparqlSym.SHA1, yytext());
          }
        case 267: break;
        case 150: 
          { return new Symbol(SparqlSym.DATATYPE, yytext());
          }
        case 268: break;
        case 146: 
          { return new Symbol(SparqlSym.REPLACE, yytext());
          }
        case 269: break;
        case 6: 
          { return new Symbol(SparqlSym.INTEGER, yytext());
          }
        case 270: break;
        case 45: 
          { return new Symbol(SparqlSym.ECHAR, yytext());
          }
        case 271: break;
        case 7: 
          { return new Symbol(SparqlSym.DOT, yytext());
          }
        case 272: break;
        case 164: 
          { return new Symbol(SparqlSym.LANGMATCHES, yytext());
          }
        case 273: break;
        case 32: 
          { return new Symbol(SparqlSym.PN_LOCAL, yytext());
          }
        case 274: break;
        case 86: 
          { return new Symbol(SparqlSym.INTO, yytext());
          }
        case 275: break;
        case 67: 
          { return new Symbol(SparqlSym.ABS, yytext());
          }
        case 276: break;
        case 156: 
          { return new Symbol(SparqlSym.TIMEZONE, yytext());
          }
        case 277: break;
        case 18: 
          { return new Symbol(SparqlSym.STAR, yytext());
          }
        case 278: break;
        case 119: 
          { return new Symbol(SparqlSym.GRAPH, yytext());
          }
        case 279: break;
        case 70: 
          { return new Symbol(SparqlSym.AVG, yytext());
          }
        case 280: break;
        case 129: 
          { return new Symbol(SparqlSym.SUBSTR, yytext());
          }
        case 281: break;
        case 101: 
          { return new Symbol(SparqlSym.BOUND, yytext());
          }
        case 282: break;
        case 126: 
          { return new Symbol(SparqlSym.SAMPLE, yytext());
          }
        case 283: break;
        case 148: 
          { return new Symbol(SparqlSym.MINUTES, yytext());
          }
        case 284: break;
        case 88: 
          { return new Symbol(SparqlSym.LOAD, yytext());
          }
        case 285: break;
        case 5: 
          { return new Symbol(SparqlSym.PN_CHARS_U, yytext());
          }
        case 286: break;
        case 29: 
          { return new Symbol(SparqlSym.LEQUAL, yytext());
          }
        case 287: break;
        case 74: 
          { return new Symbol(SparqlSym.MAX, yytext());
          }
        case 288: break;
        case 163: 
          { return new Symbol(SparqlSym.CONSTRUCT, yytext());
          }
        case 289: break;
        case 106: 
          { return new Symbol(SparqlSym.LIMIT, yytext());
          }
        case 290: break;
        case 21: 
          { return new Symbol(SparqlSym.EQUALMARK, yytext());
          }
        case 291: break;
        case 47: 
          { return new Symbol(SparqlSym.ANON, yytext());
          }
        case 292: break;
        case 17: 
          { return new Symbol(SparqlSym.EMARK, yytext());
          }
        case 293: break;
        case 90: 
          { return new Symbol(SparqlSym.COPY, yytext());
          }
        case 294: break;
        case 82: 
          { return new Symbol(SparqlSym.BASE, yytext());
          }
        case 295: break;
        case 42: 
          { return new Symbol(SparqlSym.STRING_LITERAL1, yytext());
          }
        case 296: break;
        case 20: 
          { return new Symbol(SparqlSym.SEMICOLON, yytext());
          }
        case 297: break;
        case 53: 
          { return new Symbol(SparqlSym.IN, yytext());
          }
        case 298: break;
        case 61: 
          { return new Symbol(SparqlSym.DECIMAL_NEGATIVE, yytext());
          }
        case 299: break;
        case 95: 
          { return new Symbol(SparqlSym.WITH, yytext());
          }
        case 300: break;
        case 122: 
          { return new Symbol(SparqlSym.STRING_LITERAL_LONG2, yytext());
          }
        case 301: break;
        case 57: 
          { return new Symbol(SparqlSym.DOUBLEPIPE, yytext());
          }
        case 302: break;
        case 3: 
          { return new Symbol(SparqlSym.GT, yytext());
          }
        case 303: break;
        case 109: 
          { return new Symbol(SparqlSym.COUNT, yytext());
          }
        case 304: break;
        case 132: 
          { return new Symbol(SparqlSym.SHA384, yytext());
          }
        case 305: break;
        case 69: 
          { return new Symbol(SparqlSym.ALL, yytext());
          }
        case 306: break;
        case 79: 
          { return new Symbol(SparqlSym.DATA, yytext());
          }
        case 307: break;
        case 64: 
          { return new Symbol(SparqlSym.NOW, yytext());
          }
        case 308: break;
        case 35: 
          { return new Symbol(SparqlSym.VAR1, yytext());
          }
        case 309: break;
        case 55: 
          { return new Symbol(SparqlSym.TO, yytext());
          }
        case 310: break;
        case 8: 
          { return new Symbol(SparqlSym.QMARK, yytext());
          }
        case 311: break;
        case 103: 
          { return new Symbol(SparqlSym.ROUND, yytext());
          }
        case 312: break;
        case 117: 
          { return new Symbol(SparqlSym.WHERE, yytext());
          }
        case 313: break;
        case 15: 
          { return new Symbol(SparqlSym.SBRACKETO, yytext());
          }
        case 314: break;
        case 107: 
          { return new Symbol(SparqlSym.LCASE, yytext());
          }
        case 315: break;
        case 62: 
          { return new Symbol(SparqlSym.DECIMAL_POSITIVE, yytext());
          }
        case 316: break;
        case 153: 
          { return new Symbol(SparqlSym.STRAFTER, yytext());
          }
        case 317: break;
        case 131: 
          { return new Symbol(SparqlSym.SHA256, yytext());
          }
        case 318: break;
        case 52: 
          { return new Symbol(SparqlSym.AS, yytext());
          }
        case 319: break;
        case 96: 
          { return new Symbol(SparqlSym.GROUP, yytext());
          }
        case 320: break;
        case 46: 
          { return new Symbol(SparqlSym.NIL, yytext());
          }
        case 321: break;
        case 27: 
          { return new Symbol(SparqlSym.CARET, yytext());
          }
        case 322: break;
        case 24: 
          { return new Symbol(SparqlSym.CBRACKETO, yytext());
          }
        case 323: break;
        case 81: 
          { return new Symbol(SparqlSym.FROM, yytext());
          }
        case 324: break;
        case 141: 
          { return new Symbol(SparqlSym.SECONDS, yytext());
          }
        case 325: break;
        case 130: 
          { return new Symbol(SparqlSym.SHA512, yytext());
          }
        case 326: break;
        case 108: 
          { return new Symbol(SparqlSym.CLEAR, yytext());
          }
        case 327: break;
        case 19: 
          { return new Symbol(SparqlSym.COMMA, yytext());
          }
        case 328: break;
        case 2: 
          { return new Symbol(SparqlSym.LT, yytext());
          }
        case 329: break;
        case 66: 
          { return new Symbol(SparqlSym.ADD, yytext());
          }
        case 330: break;
        case 63: 
          { return new Symbol(SparqlSym.NOT, yytext());
          }
        case 331: break;
        case 50: 
          { 
          }
        case 332: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(SparqlSym.EOF, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface SparqlSym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = SparqlSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SparqlLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        SparqlLexer scanner = null;
        try {
          scanner = new SparqlLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
